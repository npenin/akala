{
    "name": "managedblockchain",
    "commands": [
        {
            "name": "CreateAccessor",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/accessors"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessorOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessorInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateMember",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/networks/{NetworkId}/members"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateMemberOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateMemberInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateNetwork",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/networks"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateNetworkOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateNetworkInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateNode",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/networks/{NetworkId}/nodes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateNodeOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateNodeInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateProposal",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/networks/{NetworkId}/proposals"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateProposalOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateProposalInput"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessor",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessorId": "route.AccessorId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/accessors/{AccessorId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteAccessorOutput"
                    },
                    "inject": [
                        "param.0.AccessorId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessorInput"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteMember",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "MemberId": "route.MemberId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/networks/{NetworkId}/members/{MemberId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteMemberOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.MemberId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteMemberInput"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteNode",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "NodeId": "route.NodeId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/networks/{NetworkId}/nodes/{NodeId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteNodeOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.NodeId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteNodeInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessor",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessorId": "route.AccessorId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/accessors/{AccessorId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessorOutput"
                    },
                    "inject": [
                        "param.0.AccessorId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessorInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMember",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "MemberId": "route.MemberId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/members/{MemberId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMemberOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.MemberId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMemberInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetNetwork",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetNetworkOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetNetworkInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetNode",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "NodeId": "route.NodeId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/nodes/{NodeId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetNodeOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.NodeId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetNodeInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetProposal",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "ProposalId": "route.ProposalId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/proposals/{ProposalId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetProposalOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.ProposalId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetProposalInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessors",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/accessors"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessorsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessorsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListInvitations",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/invitations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListInvitationsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListInvitationsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMembers",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/members"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMembersOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMembersInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListNetworks",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/networks"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListNetworksOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListNetworksInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListNodes",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/nodes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListNodesOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListNodesInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListProposals",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/proposals"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListProposalsOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListProposalsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListProposalVotes",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "ProposalId": "route.ProposalId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/networks/{NetworkId}/proposals/{ProposalId}/votes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListProposalVotesOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.ProposalId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListProposalVotesInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "RejectInvitation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "InvitationId": "route.InvitationId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/invitations/{InvitationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/RejectInvitationOutput"
                    },
                    "inject": [
                        "param.0.InvitationId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/RejectInvitationInput"
                        }
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateMember",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "MemberId": "route.MemberId",
                            "...": "body"
                        }
                    ],
                    "method": "PATCH",
                    "route": "/networks/{NetworkId}/members/{MemberId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateMemberOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.MemberId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateMemberInput"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateNode",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "NodeId": "route.NodeId",
                            "...": "body"
                        }
                    ],
                    "method": "PATCH",
                    "route": "/networks/{NetworkId}/nodes/{NodeId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateNodeOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.NodeId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateNodeInput"
                        }
                    }
                }
            }
        },
        {
            "name": "VoteOnProposal",
            "config": {
                "http": {
                    "inject": [
                        {
                            "NetworkId": "route.NetworkId",
                            "ProposalId": "route.ProposalId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/networks/{NetworkId}/proposals/{ProposalId}/votes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/VoteOnProposalOutput"
                    },
                    "inject": [
                        "param.0.NetworkId",
                        "param.0.ProposalId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/VoteOnProposalInput"
                        }
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "CreateAccessorOutput": {
            "type": "object",
            "properties": {
                "AccessorId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "BillingToken": {
                    "$ref": "#/$defs/AccessorBillingTokenString"
                },
                "NetworkType": {
                    "$ref": "#/$defs/AccessorNetworkType"
                }
            }
        },
        "ResourceIdString": {
            "type": "string"
        },
        "AccessorBillingTokenString": {
            "type": "string"
        },
        "AccessorNetworkType": {
            "enum": [
                "ETHEREUM_GOERLI",
                "ETHEREUM_MAINNET",
                "ETHEREUM_MAINNET_AND_GOERLI",
                "POLYGON_MAINNET",
                "POLYGON_MUMBAI"
            ]
        },
        "CreateAccessorInput": {
            "type": "object",
            "properties": {
                "ClientRequestToken": {
                    "$ref": "#/$defs/ClientRequestTokenString"
                },
                "AccessorType": {
                    "$ref": "#/$defs/AccessorType"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                },
                "NetworkType": {
                    "$ref": "#/$defs/AccessorNetworkType"
                }
            }
        },
        "ClientRequestTokenString": {
            "type": "string"
        },
        "AccessorType": {
            "enum": [
                "BILLING_TOKEN"
            ]
        },
        "InputTagMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "TagValue": {
            "type": "string"
        },
        "CreateMemberOutput": {
            "type": "object",
            "properties": {
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "CreateMemberInput": {
            "type": "object",
            "properties": {
                "ClientRequestToken": {
                    "$ref": "#/$defs/ClientRequestTokenString"
                },
                "InvitationId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberConfiguration": {
                    "$ref": "#/$defs/MemberConfiguration"
                }
            }
        },
        "MemberConfiguration": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "FrameworkConfiguration": {
                    "$ref": "#/$defs/MemberFrameworkConfiguration"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/MemberLogPublishingConfiguration"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                },
                "KmsKeyArn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "NetworkMemberNameString": {
            "type": "string"
        },
        "DescriptionString": {
            "type": "string"
        },
        "MemberFrameworkConfiguration": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/MemberFabricConfiguration"
                }
            }
        },
        "MemberFabricConfiguration": {
            "type": "object",
            "properties": {
                "AdminUsername": {
                    "$ref": "#/$defs/UsernameString"
                },
                "AdminPassword": {
                    "$ref": "#/$defs/PasswordString"
                }
            }
        },
        "UsernameString": {
            "type": "string"
        },
        "PasswordString": {
            "type": "string"
        },
        "MemberLogPublishingConfiguration": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/MemberFabricLogPublishingConfiguration"
                }
            }
        },
        "MemberFabricLogPublishingConfiguration": {
            "type": "object",
            "properties": {
                "CaLogs": {
                    "$ref": "#/$defs/LogConfigurations"
                }
            }
        },
        "LogConfigurations": {
            "type": "object",
            "properties": {
                "Cloudwatch": {
                    "$ref": "#/$defs/LogConfiguration"
                }
            }
        },
        "LogConfiguration": {
            "type": "object",
            "properties": {
                "Enabled": {
                    "$ref": "#/$defs/Enabled"
                }
            }
        },
        "Enabled": {
            "type": "boolean"
        },
        "ArnString": {
            "type": "string"
        },
        "CreateNetworkOutput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "CreateNetworkInput": {
            "type": "object",
            "properties": {
                "ClientRequestToken": {
                    "$ref": "#/$defs/ClientRequestTokenString"
                },
                "Name": {
                    "$ref": "#/$defs/NameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Framework": {
                    "$ref": "#/$defs/Framework"
                },
                "FrameworkVersion": {
                    "$ref": "#/$defs/FrameworkVersionString"
                },
                "FrameworkConfiguration": {
                    "$ref": "#/$defs/NetworkFrameworkConfiguration"
                },
                "VotingPolicy": {
                    "$ref": "#/$defs/VotingPolicy"
                },
                "MemberConfiguration": {
                    "$ref": "#/$defs/MemberConfiguration"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                }
            }
        },
        "NameString": {
            "type": "string"
        },
        "Framework": {
            "enum": [
                "HYPERLEDGER_FABRIC",
                "ETHEREUM"
            ]
        },
        "FrameworkVersionString": {
            "type": "string"
        },
        "NetworkFrameworkConfiguration": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/NetworkFabricConfiguration"
                }
            }
        },
        "NetworkFabricConfiguration": {
            "type": "object",
            "properties": {
                "Edition": {
                    "$ref": "#/$defs/Edition"
                }
            }
        },
        "Edition": {
            "enum": [
                "STARTER",
                "STANDARD"
            ]
        },
        "VotingPolicy": {
            "type": "object",
            "properties": {
                "ApprovalThresholdPolicy": {
                    "$ref": "#/$defs/ApprovalThresholdPolicy"
                }
            }
        },
        "ApprovalThresholdPolicy": {
            "type": "object",
            "properties": {
                "ThresholdPercentage": {
                    "$ref": "#/$defs/ThresholdPercentageInt"
                },
                "ProposalDurationInHours": {
                    "$ref": "#/$defs/ProposalDurationInt"
                },
                "ThresholdComparator": {
                    "$ref": "#/$defs/ThresholdComparator"
                }
            }
        },
        "ThresholdPercentageInt": {
            "type": "integer",
            "format": "int32"
        },
        "ProposalDurationInt": {
            "type": "integer",
            "format": "int32"
        },
        "ThresholdComparator": {
            "enum": [
                "GREATER_THAN",
                "GREATER_THAN_OR_EQUAL_TO"
            ]
        },
        "CreateNodeOutput": {
            "type": "object",
            "properties": {
                "NodeId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "CreateNodeInput": {
            "type": "object",
            "properties": {
                "ClientRequestToken": {
                    "$ref": "#/$defs/ClientRequestTokenString"
                },
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NodeConfiguration": {
                    "$ref": "#/$defs/NodeConfiguration"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                }
            }
        },
        "NodeConfiguration": {
            "type": "object",
            "properties": {
                "InstanceType": {
                    "$ref": "#/$defs/InstanceTypeString"
                },
                "AvailabilityZone": {
                    "$ref": "#/$defs/AvailabilityZoneString"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/NodeLogPublishingConfiguration"
                },
                "StateDB": {
                    "$ref": "#/$defs/StateDBType"
                }
            }
        },
        "InstanceTypeString": {
            "type": "string"
        },
        "AvailabilityZoneString": {
            "type": "string"
        },
        "NodeLogPublishingConfiguration": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/NodeFabricLogPublishingConfiguration"
                }
            }
        },
        "NodeFabricLogPublishingConfiguration": {
            "type": "object",
            "properties": {
                "ChaincodeLogs": {
                    "$ref": "#/$defs/LogConfigurations"
                },
                "PeerLogs": {
                    "$ref": "#/$defs/LogConfigurations"
                }
            }
        },
        "StateDBType": {
            "enum": [
                "LevelDB",
                "CouchDB"
            ]
        },
        "CreateProposalOutput": {
            "type": "object",
            "properties": {
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "CreateProposalInput": {
            "type": "object",
            "properties": {
                "ClientRequestToken": {
                    "$ref": "#/$defs/ClientRequestTokenString"
                },
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Actions": {
                    "$ref": "#/$defs/ProposalActions"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                }
            }
        },
        "ProposalActions": {
            "type": "object",
            "properties": {
                "Invitations": {
                    "$ref": "#/$defs/InviteActionList"
                },
                "Removals": {
                    "$ref": "#/$defs/RemoveActionList"
                }
            }
        },
        "InviteActionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/InviteAction"
            }
        },
        "InviteAction": {
            "type": "object",
            "properties": {
                "Principal": {
                    "$ref": "#/$defs/PrincipalString"
                }
            }
        },
        "PrincipalString": {
            "type": "string"
        },
        "RemoveActionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RemoveAction"
            }
        },
        "RemoveAction": {
            "type": "object",
            "properties": {
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "DeleteAccessorOutput": {
            "type": "object",
            "properties": {}
        },
        "DeleteAccessorInput": {
            "type": "object",
            "properties": {
                "AccessorId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "DeleteMemberOutput": {
            "type": "object",
            "properties": {}
        },
        "DeleteMemberInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "DeleteNodeOutput": {
            "type": "object",
            "properties": {}
        },
        "DeleteNodeInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NodeId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "GetAccessorOutput": {
            "type": "object",
            "properties": {
                "Accessor": {
                    "$ref": "#/$defs/Accessor"
                }
            }
        },
        "Accessor": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Type": {
                    "$ref": "#/$defs/AccessorType"
                },
                "BillingToken": {
                    "$ref": "#/$defs/AccessorBillingTokenString"
                },
                "Status": {
                    "$ref": "#/$defs/AccessorStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                },
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                },
                "NetworkType": {
                    "$ref": "#/$defs/AccessorNetworkType"
                }
            }
        },
        "AccessorStatus": {
            "enum": [
                "AVAILABLE",
                "PENDING_DELETION",
                "DELETED"
            ]
        },
        "Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "OutputTagMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "GetAccessorInput": {
            "type": "object",
            "properties": {
                "AccessorId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "GetMemberOutput": {
            "type": "object",
            "properties": {
                "Member": {
                    "$ref": "#/$defs/Member"
                }
            }
        },
        "Member": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Name": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "FrameworkAttributes": {
                    "$ref": "#/$defs/MemberFrameworkAttributes"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/MemberLogPublishingConfiguration"
                },
                "Status": {
                    "$ref": "#/$defs/MemberStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                },
                "KmsKeyArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "MemberFrameworkAttributes": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/MemberFabricAttributes"
                }
            }
        },
        "MemberFabricAttributes": {
            "type": "object",
            "properties": {
                "AdminUsername": {
                    "$ref": "#/$defs/UsernameString"
                },
                "CaEndpoint": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "String": {
            "type": "string"
        },
        "MemberStatus": {
            "enum": [
                "CREATING",
                "AVAILABLE",
                "CREATE_FAILED",
                "UPDATING",
                "DELETING",
                "DELETED",
                "INACCESSIBLE_ENCRYPTION_KEY"
            ]
        },
        "GetMemberInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "GetNetworkOutput": {
            "type": "object",
            "properties": {
                "Network": {
                    "$ref": "#/$defs/Network"
                }
            }
        },
        "Network": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Name": {
                    "$ref": "#/$defs/NameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Framework": {
                    "$ref": "#/$defs/Framework"
                },
                "FrameworkVersion": {
                    "$ref": "#/$defs/FrameworkVersionString"
                },
                "FrameworkAttributes": {
                    "$ref": "#/$defs/NetworkFrameworkAttributes"
                },
                "VpcEndpointServiceName": {
                    "$ref": "#/$defs/String"
                },
                "VotingPolicy": {
                    "$ref": "#/$defs/VotingPolicy"
                },
                "Status": {
                    "$ref": "#/$defs/NetworkStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "NetworkFrameworkAttributes": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/NetworkFabricAttributes"
                },
                "Ethereum": {
                    "$ref": "#/$defs/NetworkEthereumAttributes"
                }
            }
        },
        "NetworkFabricAttributes": {
            "type": "object",
            "properties": {
                "OrderingServiceEndpoint": {
                    "$ref": "#/$defs/String"
                },
                "Edition": {
                    "$ref": "#/$defs/Edition"
                }
            }
        },
        "NetworkEthereumAttributes": {
            "type": "object",
            "properties": {
                "ChainId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NetworkStatus": {
            "enum": [
                "CREATING",
                "AVAILABLE",
                "CREATE_FAILED",
                "DELETING",
                "DELETED"
            ]
        },
        "GetNetworkInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "GetNodeOutput": {
            "type": "object",
            "properties": {
                "Node": {
                    "$ref": "#/$defs/Node"
                }
            }
        },
        "Node": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "InstanceType": {
                    "$ref": "#/$defs/InstanceTypeString"
                },
                "AvailabilityZone": {
                    "$ref": "#/$defs/AvailabilityZoneString"
                },
                "FrameworkAttributes": {
                    "$ref": "#/$defs/NodeFrameworkAttributes"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/NodeLogPublishingConfiguration"
                },
                "StateDB": {
                    "$ref": "#/$defs/StateDBType"
                },
                "Status": {
                    "$ref": "#/$defs/NodeStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                },
                "KmsKeyArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodeFrameworkAttributes": {
            "type": "object",
            "properties": {
                "Fabric": {
                    "$ref": "#/$defs/NodeFabricAttributes"
                },
                "Ethereum": {
                    "$ref": "#/$defs/NodeEthereumAttributes"
                }
            }
        },
        "NodeFabricAttributes": {
            "type": "object",
            "properties": {
                "PeerEndpoint": {
                    "$ref": "#/$defs/String"
                },
                "PeerEventEndpoint": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodeEthereumAttributes": {
            "type": "object",
            "properties": {
                "HttpEndpoint": {
                    "$ref": "#/$defs/String"
                },
                "WebSocketEndpoint": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodeStatus": {
            "enum": [
                "CREATING",
                "AVAILABLE",
                "UNHEALTHY",
                "CREATE_FAILED",
                "UPDATING",
                "DELETING",
                "DELETED",
                "FAILED",
                "INACCESSIBLE_ENCRYPTION_KEY"
            ]
        },
        "GetNodeInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NodeId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "GetProposalOutput": {
            "type": "object",
            "properties": {
                "Proposal": {
                    "$ref": "#/$defs/Proposal"
                }
            }
        },
        "Proposal": {
            "type": "object",
            "properties": {
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Actions": {
                    "$ref": "#/$defs/ProposalActions"
                },
                "ProposedByMemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "ProposedByMemberName": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "Status": {
                    "$ref": "#/$defs/ProposalStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "ExpirationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "YesVoteCount": {
                    "$ref": "#/$defs/VoteCount"
                },
                "NoVoteCount": {
                    "$ref": "#/$defs/VoteCount"
                },
                "OutstandingVoteCount": {
                    "$ref": "#/$defs/VoteCount"
                },
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "ProposalStatus": {
            "enum": [
                "IN_PROGRESS",
                "APPROVED",
                "REJECTED",
                "EXPIRED",
                "ACTION_FAILED"
            ]
        },
        "VoteCount": {
            "type": "integer",
            "format": "int32"
        },
        "GetProposalInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "ListAccessorsOutput": {
            "type": "object",
            "properties": {
                "Accessors": {
                    "$ref": "#/$defs/AccessorSummaryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "AccessorSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AccessorSummary"
            }
        },
        "AccessorSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Type": {
                    "$ref": "#/$defs/AccessorType"
                },
                "Status": {
                    "$ref": "#/$defs/AccessorStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                },
                "NetworkType": {
                    "$ref": "#/$defs/AccessorNetworkType"
                }
            }
        },
        "PaginationToken": {
            "type": "string"
        },
        "ListAccessorsInput": {
            "type": "object",
            "properties": {
                "MaxResults": {
                    "$ref": "#/$defs/AccessorListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "NetworkType": {
                    "$ref": "#/$defs/AccessorNetworkType"
                }
            }
        },
        "AccessorListMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListInvitationsOutput": {
            "type": "object",
            "properties": {
                "Invitations": {
                    "$ref": "#/$defs/InvitationList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "InvitationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Invitation"
            }
        },
        "Invitation": {
            "type": "object",
            "properties": {
                "InvitationId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "ExpirationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Status": {
                    "$ref": "#/$defs/InvitationStatus"
                },
                "NetworkSummary": {
                    "$ref": "#/$defs/NetworkSummary"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "InvitationStatus": {
            "enum": [
                "PENDING",
                "ACCEPTED",
                "ACCEPTING",
                "REJECTED",
                "EXPIRED"
            ]
        },
        "NetworkSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Name": {
                    "$ref": "#/$defs/NameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Framework": {
                    "$ref": "#/$defs/Framework"
                },
                "FrameworkVersion": {
                    "$ref": "#/$defs/FrameworkVersionString"
                },
                "Status": {
                    "$ref": "#/$defs/NetworkStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "ListInvitationsInput": {
            "type": "object",
            "properties": {
                "MaxResults": {
                    "$ref": "#/$defs/ProposalListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ProposalListMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListMembersOutput": {
            "type": "object",
            "properties": {
                "Members": {
                    "$ref": "#/$defs/MemberSummaryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "MemberSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MemberSummary"
            }
        },
        "MemberSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Name": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "Status": {
                    "$ref": "#/$defs/MemberStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "IsOwned": {
                    "$ref": "#/$defs/IsOwned"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "IsOwned": {
            "type": "boolean"
        },
        "ListMembersInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Name": {
                    "$ref": "#/$defs/String"
                },
                "Status": {
                    "$ref": "#/$defs/MemberStatus"
                },
                "IsOwned": {
                    "$ref": "#/$defs/IsOwned"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MemberListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "MemberListMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListNetworksOutput": {
            "type": "object",
            "properties": {
                "Networks": {
                    "$ref": "#/$defs/NetworkSummaryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "NetworkSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/NetworkSummary"
            }
        },
        "ListNetworksInput": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/String"
                },
                "Framework": {
                    "$ref": "#/$defs/Framework"
                },
                "Status": {
                    "$ref": "#/$defs/NetworkStatus"
                },
                "MaxResults": {
                    "$ref": "#/$defs/NetworkListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "NetworkListMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListNodesOutput": {
            "type": "object",
            "properties": {
                "Nodes": {
                    "$ref": "#/$defs/NodeSummaryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "NodeSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/NodeSummary"
            }
        },
        "NodeSummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Status": {
                    "$ref": "#/$defs/NodeStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "AvailabilityZone": {
                    "$ref": "#/$defs/AvailabilityZoneString"
                },
                "InstanceType": {
                    "$ref": "#/$defs/InstanceTypeString"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "ListNodesInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Status": {
                    "$ref": "#/$defs/NodeStatus"
                },
                "MaxResults": {
                    "$ref": "#/$defs/NodeListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "NodeListMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListProposalsOutput": {
            "type": "object",
            "properties": {
                "Proposals": {
                    "$ref": "#/$defs/ProposalSummaryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ProposalSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ProposalSummary"
            }
        },
        "ProposalSummary": {
            "type": "object",
            "properties": {
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Description": {
                    "$ref": "#/$defs/DescriptionString"
                },
                "ProposedByMemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "ProposedByMemberName": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "Status": {
                    "$ref": "#/$defs/ProposalStatus"
                },
                "CreationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "ExpirationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "Arn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "ListProposalsInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MaxResults": {
                    "$ref": "#/$defs/ProposalListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ListProposalVotesOutput": {
            "type": "object",
            "properties": {
                "ProposalVotes": {
                    "$ref": "#/$defs/ProposalVoteList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ProposalVoteList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/VoteSummary"
            }
        },
        "VoteSummary": {
            "type": "object",
            "properties": {
                "Vote": {
                    "$ref": "#/$defs/VoteValue"
                },
                "MemberName": {
                    "$ref": "#/$defs/NetworkMemberNameString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "VoteValue": {
            "enum": [
                "YES",
                "NO"
            ]
        },
        "ListProposalVotesInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MaxResults": {
                    "$ref": "#/$defs/ProposalListMaxResults"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "Tags": {
                    "$ref": "#/$defs/OutputTagMap"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/ArnString"
                }
            }
        },
        "RejectInvitationOutput": {
            "type": "object",
            "properties": {}
        },
        "RejectInvitationInput": {
            "type": "object",
            "properties": {
                "InvitationId": {
                    "$ref": "#/$defs/ResourceIdString"
                }
            }
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/ArnString"
                },
                "Tags": {
                    "$ref": "#/$defs/InputTagMap"
                }
            }
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/ArnString"
                },
                "TagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "TagKey": {
            "type": "string"
        },
        "UpdateMemberOutput": {
            "type": "object",
            "properties": {}
        },
        "UpdateMemberInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/MemberLogPublishingConfiguration"
                }
            }
        },
        "UpdateNodeOutput": {
            "type": "object",
            "properties": {}
        },
        "UpdateNodeInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "MemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "NodeId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "LogPublishingConfiguration": {
                    "$ref": "#/$defs/NodeLogPublishingConfiguration"
                }
            }
        },
        "VoteOnProposalOutput": {
            "type": "object",
            "properties": {}
        },
        "VoteOnProposalInput": {
            "type": "object",
            "properties": {
                "NetworkId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "ProposalId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "VoterMemberId": {
                    "$ref": "#/$defs/ResourceIdString"
                },
                "Vote": {
                    "$ref": "#/$defs/VoteValue"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://managedblockchain-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://managedblockchain-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://managedblockchain.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://managedblockchain.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}