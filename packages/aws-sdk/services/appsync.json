{
    "name": "appsync",
    "commands": [
        {
            "name": "AssociateApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/domainnames/{domainName}/apiassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateApiResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {},
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "AssociateMergedGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "sourceApiIdentifier": "route.sourceApiIdentifier",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateMergedGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.sourceApiIdentifier",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateMergedGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "sourceApiIdentifier": {},
                        "mergedApiIdentifier": {},
                        "description": {},
                        "sourceApiAssociationConfig": {}
                    }
                }
            }
        },
        {
            "name": "AssociateSourceGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateSourceGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateSourceGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "mergedApiIdentifier": {},
                        "sourceApiIdentifier": {},
                        "description": {},
                        "sourceApiAssociationConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateApi",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v2/apis"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateApiResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "ownerContact": {},
                        "tags": {},
                        "eventConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateApiCache",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/ApiCaches"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateApiCacheResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateApiCacheRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "ttl": {},
                        "transitEncryptionEnabled": {},
                        "atRestEncryptionEnabled": {},
                        "apiCachingBehavior": {},
                        "type": {},
                        "healthMetricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateApiKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/apikeys"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateApiKeyResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateApiKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "description": {},
                        "expires": {}
                    }
                }
            }
        },
        {
            "name": "CreateChannelNamespace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v2/apis/{apiId}/channelNamespaces"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateChannelNamespaceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateChannelNamespaceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "subscribeAuthModes": {},
                        "publishAuthModes": {},
                        "codeHandlers": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "CreateDataSource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/datasources"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateDataSourceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateDataSourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "description": {},
                        "type": {},
                        "serviceRoleArn": {},
                        "dynamodbConfig": {},
                        "lambdaConfig": {},
                        "elasticsearchConfig": {},
                        "openSearchServiceConfig": {},
                        "httpConfig": {},
                        "relationalDatabaseConfig": {},
                        "eventBridgeConfig": {},
                        "metricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateDomainName",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v1/domainnames"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateDomainNameResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateDomainNameRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {},
                        "certificateArn": {},
                        "description": {}
                    }
                }
            }
        },
        {
            "name": "CreateFunction",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/functions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateFunctionResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateFunctionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "description": {},
                        "dataSourceName": {},
                        "requestMappingTemplate": {},
                        "responseMappingTemplate": {},
                        "functionVersion": {},
                        "syncConfig": {},
                        "maxBatchSize": {},
                        "runtime": {},
                        "code": {}
                    }
                }
            }
        },
        {
            "name": "CreateGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v1/apis"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "logConfig": {},
                        "authenticationType": {},
                        "userPoolConfig": {},
                        "openIDConnectConfig": {},
                        "tags": {},
                        "additionalAuthenticationProviders": {},
                        "xrayEnabled": {},
                        "lambdaAuthorizerConfig": {},
                        "apiType": {},
                        "mergedApiExecutionRoleArn": {},
                        "visibility": {},
                        "ownerContact": {},
                        "introspectionConfig": {},
                        "queryDepthLimit": {},
                        "resolverCountLimit": {},
                        "enhancedMetricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateResolver",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/types/{typeName}/resolvers"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateResolverResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateResolverRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "fieldName": {},
                        "dataSourceName": {},
                        "requestMappingTemplate": {},
                        "responseMappingTemplate": {},
                        "kind": {},
                        "pipelineConfig": {},
                        "syncConfig": {},
                        "cachingConfig": {},
                        "maxBatchSize": {},
                        "runtime": {},
                        "code": {},
                        "metricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateType",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/types"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateTypeResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateTypeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "definition": {},
                        "format": {}
                    }
                }
            }
        },
        {
            "name": "DeleteApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v2/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "DeleteApiCache",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/ApiCaches"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteApiCacheResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteApiCacheRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "DeleteApiKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "id": "route.id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/apikeys/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteApiKeyResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteApiKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteChannelNamespace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v2/apis/{apiId}/channelNamespaces/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteChannelNamespaceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteChannelNamespaceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "DeleteDataSource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/datasources/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteDataSourceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteDataSourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "DeleteDomainName",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/domainnames/{domainName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteDomainNameResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteDomainNameRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {}
                    }
                }
            }
        },
        {
            "name": "DeleteFunction",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "functionId": "route.functionId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/functions/{functionId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteFunctionResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.functionId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteFunctionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "functionId": {}
                    }
                }
            }
        },
        {
            "name": "DeleteGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "DeleteResolver",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "fieldName": "route.fieldName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteResolverResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0.fieldName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteResolverRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "fieldName": {}
                    }
                }
            }
        },
        {
            "name": "DeleteType",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/types/{typeName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteTypeResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteTypeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/domainnames/{domainName}/apiassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateApiResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DisassociateApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateMergedGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "sourceApiIdentifier": "route.sourceApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateMergedGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.sourceApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DisassociateMergedGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "sourceApiIdentifier": {},
                        "associationId": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateSourceGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateSourceGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DisassociateSourceGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "mergedApiIdentifier": {},
                        "associationId": {}
                    }
                }
            }
        },
        {
            "name": "EvaluateCode",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v1/dataplane-evaluatecode"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/EvaluateCodeResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/EvaluateCodeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "runtime": {},
                        "code": {},
                        "context": {},
                        "function": {}
                    }
                }
            }
        },
        {
            "name": "EvaluateMappingTemplate",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v1/dataplane-evaluatetemplate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/EvaluateMappingTemplateResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/EvaluateMappingTemplateRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "template": {},
                        "context": {}
                    }
                }
            }
        },
        {
            "name": "FlushApiCache",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/apis/{apiId}/FlushCache"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/FlushApiCacheResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/FlushApiCacheRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v2/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetApiAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/domainnames/{domainName}/apiassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetApiAssociationResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetApiAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {}
                    }
                }
            }
        },
        {
            "name": "GetApiCache",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/ApiCaches"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetApiCacheResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetApiCacheRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetChannelNamespace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v2/apis/{apiId}/channelNamespaces/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetChannelNamespaceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetChannelNamespaceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "GetDataSource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/datasources/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetDataSourceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetDataSourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "GetDataSourceIntrospection",
            "config": {
                "http": {
                    "inject": [
                        {
                            "introspectionId": "route.introspectionId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/datasources/introspections/{introspectionId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetDataSourceIntrospectionResponse"
                    },
                    "inject": [
                        "params.0.introspectionId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetDataSourceIntrospectionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "introspectionId": {},
                        "includeModelsSDL": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "GetDomainName",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/domainnames/{domainName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetDomainNameResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetDomainNameRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {}
                    }
                }
            }
        },
        {
            "name": "GetFunction",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "functionId": "route.functionId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/functions/{functionId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetFunctionResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.functionId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetFunctionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "functionId": {}
                    }
                }
            }
        },
        {
            "name": "GetGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetGraphqlApiEnvironmentVariables",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/environmentVariables"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetGraphqlApiEnvironmentVariablesResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetGraphqlApiEnvironmentVariablesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetIntrospectionSchema",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/schema"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetIntrospectionSchemaResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetIntrospectionSchemaRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "format": {},
                        "includeDirectives": {}
                    }
                }
            }
        },
        {
            "name": "GetResolver",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "fieldName": "route.fieldName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetResolverResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0.fieldName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetResolverRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "fieldName": {}
                    }
                }
            }
        },
        {
            "name": "GetSchemaCreationStatus",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/schemacreation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetSchemaCreationStatusResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetSchemaCreationStatusRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {}
                    }
                }
            }
        },
        {
            "name": "GetSourceApiAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetSourceApiAssociationResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetSourceApiAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "mergedApiIdentifier": {},
                        "associationId": {}
                    }
                }
            }
        },
        {
            "name": "GetType",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/types/{typeName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetTypeResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/GetTypeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "format": {}
                    }
                }
            }
        },
        {
            "name": "ListApiKeys",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/apikeys"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListApiKeysResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListApiKeysRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListApis",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v2/apis"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListApisResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListApisRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListChannelNamespaces",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v2/apis/{apiId}/channelNamespaces"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListChannelNamespacesResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListChannelNamespacesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListDataSources",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/datasources"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListDataSourcesResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListDataSourcesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListDomainNames",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v1/domainnames"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListDomainNamesResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListDomainNamesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListFunctions",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/functions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListFunctionsResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListFunctionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListGraphqlApis",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v1/apis"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListGraphqlApisResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListGraphqlApisRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "nextToken": {},
                        "maxResults": {},
                        "apiType": {},
                        "owner": {}
                    }
                }
            }
        },
        {
            "name": "ListResolvers",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/types/{typeName}/resolvers"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListResolversResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListResolversRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListResolversByFunction",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "functionId": "route.functionId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/functions/{functionId}/resolvers"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListResolversByFunctionResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.functionId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListResolversByFunctionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "functionId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListSourceApiAssociations",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/sourceApiAssociations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListSourceApiAssociationsResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListSourceApiAssociationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {}
                    }
                }
            }
        },
        {
            "name": "ListTypes",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/apis/{apiId}/types"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTypesResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListTypesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "format": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListTypesByAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTypesByAssociationResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListTypesByAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "mergedApiIdentifier": {},
                        "associationId": {},
                        "format": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "PutGraphqlApiEnvironmentVariables",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v1/apis/{apiId}/environmentVariables"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutGraphqlApiEnvironmentVariablesResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/PutGraphqlApiEnvironmentVariablesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "environmentVariables": {}
                    }
                }
            }
        },
        {
            "name": "StartDataSourceIntrospection",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v1/datasources/introspections"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartDataSourceIntrospectionResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/StartDataSourceIntrospectionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "rdsDataApiConfig": {}
                    }
                }
            }
        },
        {
            "name": "StartSchemaCreation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/schemacreation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartSchemaCreationResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/StartSchemaCreationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "definition": {}
                    }
                }
            }
        },
        {
            "name": "StartSchemaMerge",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartSchemaMergeResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/StartSchemaMergeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "associationId": {},
                        "mergedApiIdentifier": {}
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v1/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {},
                        "tagKeys": {}
                    }
                }
            }
        },
        {
            "name": "UpdateApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v2/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "ownerContact": {},
                        "eventConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateApiCache",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/ApiCaches/update"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateApiCacheResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateApiCacheRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "ttl": {},
                        "apiCachingBehavior": {},
                        "type": {},
                        "healthMetricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateApiKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "id": "route.id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/apikeys/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateApiKeyResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateApiKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "id": {},
                        "description": {},
                        "expires": {}
                    }
                }
            }
        },
        {
            "name": "UpdateChannelNamespace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v2/apis/{apiId}/channelNamespaces/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateChannelNamespaceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateChannelNamespaceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "subscribeAuthModes": {},
                        "publishAuthModes": {},
                        "codeHandlers": {}
                    }
                }
            }
        },
        {
            "name": "UpdateDataSource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/datasources/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateDataSourceResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateDataSourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "description": {},
                        "type": {},
                        "serviceRoleArn": {},
                        "dynamodbConfig": {},
                        "lambdaConfig": {},
                        "elasticsearchConfig": {},
                        "openSearchServiceConfig": {},
                        "httpConfig": {},
                        "relationalDatabaseConfig": {},
                        "eventBridgeConfig": {},
                        "metricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateDomainName",
            "config": {
                "http": {
                    "inject": [
                        {
                            "domainName": "route.domainName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/domainnames/{domainName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateDomainNameResponse"
                    },
                    "inject": [
                        "params.0.domainName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateDomainNameRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "domainName": {},
                        "description": {}
                    }
                }
            }
        },
        {
            "name": "UpdateFunction",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "functionId": "route.functionId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/functions/{functionId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateFunctionResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.functionId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateFunctionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "description": {},
                        "functionId": {},
                        "dataSourceName": {},
                        "requestMappingTemplate": {},
                        "responseMappingTemplate": {},
                        "functionVersion": {},
                        "syncConfig": {},
                        "maxBatchSize": {},
                        "runtime": {},
                        "code": {}
                    }
                }
            }
        },
        {
            "name": "UpdateGraphqlApi",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateGraphqlApiResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateGraphqlApiRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "name": {},
                        "logConfig": {},
                        "authenticationType": {},
                        "userPoolConfig": {},
                        "openIDConnectConfig": {},
                        "additionalAuthenticationProviders": {},
                        "xrayEnabled": {},
                        "lambdaAuthorizerConfig": {},
                        "mergedApiExecutionRoleArn": {},
                        "ownerContact": {},
                        "introspectionConfig": {},
                        "queryDepthLimit": {},
                        "resolverCountLimit": {},
                        "enhancedMetricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateResolver",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "fieldName": "route.fieldName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateResolverResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0.fieldName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateResolverRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "fieldName": {},
                        "dataSourceName": {},
                        "requestMappingTemplate": {},
                        "responseMappingTemplate": {},
                        "kind": {},
                        "pipelineConfig": {},
                        "syncConfig": {},
                        "cachingConfig": {},
                        "maxBatchSize": {},
                        "runtime": {},
                        "code": {},
                        "metricsConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateSourceApiAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "mergedApiIdentifier": "route.mergedApiIdentifier",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateSourceApiAssociationResponse"
                    },
                    "inject": [
                        "params.0.mergedApiIdentifier",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateSourceApiAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "associationId": {},
                        "mergedApiIdentifier": {},
                        "description": {},
                        "sourceApiAssociationConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateType",
            "config": {
                "http": {
                    "inject": [
                        {
                            "apiId": "route.apiId",
                            "typeName": "route.typeName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v1/apis/{apiId}/types/{typeName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateTypeResponse"
                    },
                    "inject": [
                        "params.0.apiId",
                        "params.0.typeName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateTypeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "apiId": {},
                        "typeName": {},
                        "definition": {},
                        "format": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "AssociateApiRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                },
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DomainName": {
            "type": "string"
        },
        "String": {
            "type": "string"
        },
        "AssociateApiResponse": {
            "type": "object",
            "properties": {
                "apiAssociation": {
                    "$ref": "#/$defs/ApiAssociation"
                }
            }
        },
        "ApiAssociation": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                },
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "associationStatus": {
                    "$ref": "#/$defs/AssociationStatus"
                },
                "deploymentDetail": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "AssociationStatus": {
            "enum": [
                "Processing",
                "Failed",
                "Success"
            ]
        },
        "AssociateMergedGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "sourceApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiAssociationConfig": {
                    "$ref": "#/$defs/SourceApiAssociationConfig"
                }
            }
        },
        "SourceApiAssociationConfig": {
            "type": "object",
            "properties": {
                "mergeType": {
                    "$ref": "#/$defs/MergeType"
                }
            }
        },
        "MergeType": {
            "enum": [
                "MANUAL_MERGE",
                "AUTO_MERGE"
            ]
        },
        "AssociateMergedGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociation": {
                    "$ref": "#/$defs/SourceApiAssociation"
                }
            }
        },
        "SourceApiAssociation": {
            "type": "object",
            "properties": {
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "associationArn": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiId": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiArn": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiArn": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiId": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiAssociationConfig": {
                    "$ref": "#/$defs/SourceApiAssociationConfig"
                },
                "sourceApiAssociationStatus": {
                    "$ref": "#/$defs/SourceApiAssociationStatus"
                },
                "sourceApiAssociationStatusDetail": {
                    "$ref": "#/$defs/String"
                },
                "lastSuccessfulMergeDate": {
                    "$ref": "#/$defs/Date"
                }
            }
        },
        "SourceApiAssociationStatus": {
            "enum": [
                "MERGE_SCHEDULED",
                "MERGE_FAILED",
                "MERGE_SUCCESS",
                "MERGE_IN_PROGRESS",
                "AUTO_MERGE_SCHEDULE_FAILED",
                "DELETION_SCHEDULED",
                "DELETION_IN_PROGRESS",
                "DELETION_FAILED"
            ]
        },
        "Date": {
            "type": "string",
            "format": "date-time"
        },
        "AssociateSourceGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiAssociationConfig": {
                    "$ref": "#/$defs/SourceApiAssociationConfig"
                }
            }
        },
        "AssociateSourceGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociation": {
                    "$ref": "#/$defs/SourceApiAssociation"
                }
            }
        },
        "CreateApiRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/ApiName"
                },
                "ownerContact": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "eventConfig": {
                    "$ref": "#/$defs/EventConfig"
                }
            }
        },
        "ApiName": {
            "type": "string"
        },
        "TagMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "TagValue": {
            "type": "string"
        },
        "EventConfig": {
            "type": "object",
            "properties": {
                "authProviders": {
                    "$ref": "#/$defs/AuthProviders"
                },
                "connectionAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "defaultPublishAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "defaultSubscribeAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "logConfig": {
                    "$ref": "#/$defs/EventLogConfig"
                }
            }
        },
        "AuthProviders": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AuthProvider"
            }
        },
        "AuthProvider": {
            "type": "object",
            "properties": {
                "authType": {
                    "$ref": "#/$defs/AuthenticationType"
                },
                "cognitoConfig": {
                    "$ref": "#/$defs/CognitoConfig"
                },
                "openIDConnectConfig": {
                    "$ref": "#/$defs/OpenIDConnectConfig"
                },
                "lambdaAuthorizerConfig": {
                    "$ref": "#/$defs/LambdaAuthorizerConfig"
                }
            }
        },
        "AuthenticationType": {
            "enum": [
                "API_KEY",
                "AWS_IAM",
                "AMAZON_COGNITO_USER_POOLS",
                "OPENID_CONNECT",
                "AWS_LAMBDA"
            ]
        },
        "CognitoConfig": {
            "type": "object",
            "properties": {
                "userPoolId": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                },
                "appIdClientRegex": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "OpenIDConnectConfig": {
            "type": "object",
            "properties": {
                "issuer": {
                    "$ref": "#/$defs/String"
                },
                "clientId": {
                    "$ref": "#/$defs/String"
                },
                "iatTTL": {
                    "$ref": "#/$defs/Long"
                },
                "authTTL": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "Long": {
            "type": "integer",
            "format": "int64"
        },
        "LambdaAuthorizerConfig": {
            "type": "object",
            "properties": {
                "authorizerResultTtlInSeconds": {
                    "$ref": "#/$defs/TTL"
                },
                "authorizerUri": {
                    "$ref": "#/$defs/String"
                },
                "identityValidationExpression": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "TTL": {
            "type": "integer",
            "format": "int32"
        },
        "AuthModes": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AuthMode"
            }
        },
        "AuthMode": {
            "type": "object",
            "properties": {
                "authType": {
                    "$ref": "#/$defs/AuthenticationType"
                }
            }
        },
        "EventLogConfig": {
            "type": "object",
            "properties": {
                "logLevel": {
                    "$ref": "#/$defs/EventLogLevel"
                },
                "cloudWatchLogsRoleArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "EventLogLevel": {
            "enum": [
                "NONE",
                "ERROR",
                "ALL",
                "INFO",
                "DEBUG"
            ]
        },
        "CreateApiResponse": {
            "type": "object",
            "properties": {
                "api": {
                    "$ref": "#/$defs/Api"
                }
            }
        },
        "Api": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ApiName"
                },
                "ownerContact": {
                    "$ref": "#/$defs/OwnerContact"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "dns": {
                    "$ref": "#/$defs/MapOfStringToString"
                },
                "apiArn": {
                    "$ref": "#/$defs/String"
                },
                "created": {
                    "$ref": "#/$defs/Timestamp"
                },
                "xrayEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "wafWebAclArn": {
                    "$ref": "#/$defs/String"
                },
                "eventConfig": {
                    "$ref": "#/$defs/EventConfig"
                }
            }
        },
        "OwnerContact": {
            "type": "string"
        },
        "MapOfStringToString": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/String"
            }
        },
        "Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "Boolean": {
            "type": "boolean"
        },
        "CreateApiCacheRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "ttl": {
                    "$ref": "#/$defs/Long"
                },
                "transitEncryptionEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "atRestEncryptionEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "apiCachingBehavior": {
                    "$ref": "#/$defs/ApiCachingBehavior"
                },
                "type": {
                    "$ref": "#/$defs/ApiCacheType"
                },
                "healthMetricsConfig": {
                    "$ref": "#/$defs/CacheHealthMetricsConfig"
                }
            }
        },
        "ApiCachingBehavior": {
            "enum": [
                "FULL_REQUEST_CACHING",
                "PER_RESOLVER_CACHING",
                "OPERATION_LEVEL_CACHING"
            ]
        },
        "ApiCacheType": {
            "enum": [
                "T2_SMALL",
                "T2_MEDIUM",
                "R4_LARGE",
                "R4_XLARGE",
                "R4_2XLARGE",
                "R4_4XLARGE",
                "R4_8XLARGE",
                "SMALL",
                "MEDIUM",
                "LARGE",
                "XLARGE",
                "LARGE_2X",
                "LARGE_4X",
                "LARGE_8X",
                "LARGE_12X"
            ]
        },
        "CacheHealthMetricsConfig": {
            "enum": [
                "ENABLED",
                "DISABLED"
            ]
        },
        "CreateApiCacheResponse": {
            "type": "object",
            "properties": {
                "apiCache": {
                    "$ref": "#/$defs/ApiCache"
                }
            }
        },
        "ApiCache": {
            "type": "object",
            "properties": {
                "ttl": {
                    "$ref": "#/$defs/Long"
                },
                "apiCachingBehavior": {
                    "$ref": "#/$defs/ApiCachingBehavior"
                },
                "transitEncryptionEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "atRestEncryptionEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "type": {
                    "$ref": "#/$defs/ApiCacheType"
                },
                "status": {
                    "$ref": "#/$defs/ApiCacheStatus"
                },
                "healthMetricsConfig": {
                    "$ref": "#/$defs/CacheHealthMetricsConfig"
                }
            }
        },
        "ApiCacheStatus": {
            "enum": [
                "AVAILABLE",
                "CREATING",
                "DELETING",
                "MODIFYING",
                "FAILED"
            ]
        },
        "CreateApiKeyRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "expires": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "CreateApiKeyResponse": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "$ref": "#/$defs/ApiKey"
                }
            }
        },
        "ApiKey": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "expires": {
                    "$ref": "#/$defs/Long"
                },
                "deletes": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "CreateChannelNamespaceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/Namespace"
                },
                "subscribeAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "publishAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "codeHandlers": {
                    "$ref": "#/$defs/Code"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "Namespace": {
            "type": "string"
        },
        "Code": {
            "type": "string"
        },
        "CreateChannelNamespaceResponse": {
            "type": "object",
            "properties": {
                "channelNamespace": {
                    "$ref": "#/$defs/ChannelNamespace"
                }
            }
        },
        "ChannelNamespace": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/Namespace"
                },
                "subscribeAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "publishAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "codeHandlers": {
                    "$ref": "#/$defs/Code"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "channelNamespaceArn": {
                    "$ref": "#/$defs/String"
                },
                "created": {
                    "$ref": "#/$defs/Timestamp"
                },
                "lastModified": {
                    "$ref": "#/$defs/Timestamp"
                }
            }
        },
        "CreateDataSourceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/DataSourceType"
                },
                "serviceRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "dynamodbConfig": {
                    "$ref": "#/$defs/DynamodbDataSourceConfig"
                },
                "lambdaConfig": {
                    "$ref": "#/$defs/LambdaDataSourceConfig"
                },
                "elasticsearchConfig": {
                    "$ref": "#/$defs/ElasticsearchDataSourceConfig"
                },
                "openSearchServiceConfig": {
                    "$ref": "#/$defs/OpenSearchServiceDataSourceConfig"
                },
                "httpConfig": {
                    "$ref": "#/$defs/HttpDataSourceConfig"
                },
                "relationalDatabaseConfig": {
                    "$ref": "#/$defs/RelationalDatabaseDataSourceConfig"
                },
                "eventBridgeConfig": {
                    "$ref": "#/$defs/EventBridgeDataSourceConfig"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/DataSourceLevelMetricsConfig"
                }
            }
        },
        "ResourceName": {
            "type": "string"
        },
        "DataSourceType": {
            "enum": [
                "AWS_LAMBDA",
                "AMAZON_DYNAMODB",
                "AMAZON_ELASTICSEARCH",
                "NONE",
                "HTTP",
                "RELATIONAL_DATABASE",
                "AMAZON_OPENSEARCH_SERVICE",
                "AMAZON_EVENTBRIDGE",
                "AMAZON_BEDROCK_RUNTIME"
            ]
        },
        "DynamodbDataSourceConfig": {
            "type": "object",
            "properties": {
                "tableName": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                },
                "useCallerCredentials": {
                    "$ref": "#/$defs/Boolean"
                },
                "deltaSyncConfig": {
                    "$ref": "#/$defs/DeltaSyncConfig"
                },
                "versioned": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "DeltaSyncConfig": {
            "type": "object",
            "properties": {
                "baseTableTTL": {
                    "$ref": "#/$defs/Long"
                },
                "deltaSyncTableName": {
                    "$ref": "#/$defs/String"
                },
                "deltaSyncTableTTL": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "LambdaDataSourceConfig": {
            "type": "object",
            "properties": {
                "lambdaFunctionArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ElasticsearchDataSourceConfig": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "OpenSearchServiceDataSourceConfig": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "HttpDataSourceConfig": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "$ref": "#/$defs/String"
                },
                "authorizationConfig": {
                    "$ref": "#/$defs/AuthorizationConfig"
                }
            }
        },
        "AuthorizationConfig": {
            "type": "object",
            "properties": {
                "authorizationType": {
                    "$ref": "#/$defs/AuthorizationType"
                },
                "awsIamConfig": {
                    "$ref": "#/$defs/AwsIamConfig"
                }
            }
        },
        "AuthorizationType": {
            "enum": [
                "AWS_IAM"
            ]
        },
        "AwsIamConfig": {
            "type": "object",
            "properties": {
                "signingRegion": {
                    "$ref": "#/$defs/String"
                },
                "signingServiceName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "RelationalDatabaseDataSourceConfig": {
            "type": "object",
            "properties": {
                "relationalDatabaseSourceType": {
                    "$ref": "#/$defs/RelationalDatabaseSourceType"
                },
                "rdsHttpEndpointConfig": {
                    "$ref": "#/$defs/RdsHttpEndpointConfig"
                }
            }
        },
        "RelationalDatabaseSourceType": {
            "enum": [
                "RDS_HTTP_ENDPOINT"
            ]
        },
        "RdsHttpEndpointConfig": {
            "type": "object",
            "properties": {
                "awsRegion": {
                    "$ref": "#/$defs/String"
                },
                "dbClusterIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "databaseName": {
                    "$ref": "#/$defs/String"
                },
                "schema": {
                    "$ref": "#/$defs/String"
                },
                "awsSecretStoreArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "EventBridgeDataSourceConfig": {
            "type": "object",
            "properties": {
                "eventBusArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DataSourceLevelMetricsConfig": {
            "enum": [
                "ENABLED",
                "DISABLED"
            ]
        },
        "CreateDataSourceResponse": {
            "type": "object",
            "properties": {
                "dataSource": {
                    "$ref": "#/$defs/DataSource"
                }
            }
        },
        "DataSource": {
            "type": "object",
            "properties": {
                "dataSourceArn": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/DataSourceType"
                },
                "serviceRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "dynamodbConfig": {
                    "$ref": "#/$defs/DynamodbDataSourceConfig"
                },
                "lambdaConfig": {
                    "$ref": "#/$defs/LambdaDataSourceConfig"
                },
                "elasticsearchConfig": {
                    "$ref": "#/$defs/ElasticsearchDataSourceConfig"
                },
                "openSearchServiceConfig": {
                    "$ref": "#/$defs/OpenSearchServiceDataSourceConfig"
                },
                "httpConfig": {
                    "$ref": "#/$defs/HttpDataSourceConfig"
                },
                "relationalDatabaseConfig": {
                    "$ref": "#/$defs/RelationalDatabaseDataSourceConfig"
                },
                "eventBridgeConfig": {
                    "$ref": "#/$defs/EventBridgeDataSourceConfig"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/DataSourceLevelMetricsConfig"
                }
            }
        },
        "CreateDomainNameRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                },
                "certificateArn": {
                    "$ref": "#/$defs/CertificateArn"
                },
                "description": {
                    "$ref": "#/$defs/Description"
                }
            }
        },
        "CertificateArn": {
            "type": "string"
        },
        "Description": {
            "type": "string"
        },
        "CreateDomainNameResponse": {
            "type": "object",
            "properties": {
                "domainNameConfig": {
                    "$ref": "#/$defs/DomainNameConfig"
                }
            }
        },
        "DomainNameConfig": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                },
                "description": {
                    "$ref": "#/$defs/Description"
                },
                "certificateArn": {
                    "$ref": "#/$defs/CertificateArn"
                },
                "appsyncDomainName": {
                    "$ref": "#/$defs/String"
                },
                "hostedZoneId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateFunctionRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "functionVersion": {
                    "$ref": "#/$defs/String"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                }
            }
        },
        "MappingTemplate": {
            "type": "string"
        },
        "SyncConfig": {
            "type": "object",
            "properties": {
                "conflictHandler": {
                    "$ref": "#/$defs/ConflictHandlerType"
                },
                "conflictDetection": {
                    "$ref": "#/$defs/ConflictDetectionType"
                },
                "lambdaConflictHandlerConfig": {
                    "$ref": "#/$defs/LambdaConflictHandlerConfig"
                }
            }
        },
        "ConflictHandlerType": {
            "enum": [
                "OPTIMISTIC_CONCURRENCY",
                "LAMBDA",
                "AUTOMERGE",
                "NONE"
            ]
        },
        "ConflictDetectionType": {
            "enum": [
                "VERSION",
                "NONE"
            ]
        },
        "LambdaConflictHandlerConfig": {
            "type": "object",
            "properties": {
                "lambdaConflictHandlerArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "MaxBatchSize": {
            "type": "integer",
            "format": "int32"
        },
        "AppSyncRuntime": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/RuntimeName"
                },
                "runtimeVersion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "RuntimeName": {
            "enum": [
                "APPSYNC_JS"
            ]
        },
        "CreateFunctionResponse": {
            "type": "object",
            "properties": {
                "functionConfiguration": {
                    "$ref": "#/$defs/FunctionConfiguration"
                }
            }
        },
        "FunctionConfiguration": {
            "type": "object",
            "properties": {
                "functionId": {
                    "$ref": "#/$defs/String"
                },
                "functionArn": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "functionVersion": {
                    "$ref": "#/$defs/String"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                }
            }
        },
        "CreateGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "logConfig": {
                    "$ref": "#/$defs/LogConfig"
                },
                "authenticationType": {
                    "$ref": "#/$defs/AuthenticationType"
                },
                "userPoolConfig": {
                    "$ref": "#/$defs/UserPoolConfig"
                },
                "openIDConnectConfig": {
                    "$ref": "#/$defs/OpenIDConnectConfig"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "additionalAuthenticationProviders": {
                    "$ref": "#/$defs/AdditionalAuthenticationProviders"
                },
                "xrayEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "lambdaAuthorizerConfig": {
                    "$ref": "#/$defs/LambdaAuthorizerConfig"
                },
                "apiType": {
                    "$ref": "#/$defs/GraphQLApiType"
                },
                "mergedApiExecutionRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "visibility": {
                    "$ref": "#/$defs/GraphQLApiVisibility"
                },
                "ownerContact": {
                    "$ref": "#/$defs/String"
                },
                "introspectionConfig": {
                    "$ref": "#/$defs/GraphQLApiIntrospectionConfig"
                },
                "queryDepthLimit": {
                    "$ref": "#/$defs/QueryDepthLimit"
                },
                "resolverCountLimit": {
                    "$ref": "#/$defs/ResolverCountLimit"
                },
                "enhancedMetricsConfig": {
                    "$ref": "#/$defs/EnhancedMetricsConfig"
                }
            }
        },
        "LogConfig": {
            "type": "object",
            "properties": {
                "fieldLogLevel": {
                    "$ref": "#/$defs/FieldLogLevel"
                },
                "cloudWatchLogsRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "excludeVerboseContent": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "FieldLogLevel": {
            "enum": [
                "NONE",
                "ERROR",
                "ALL",
                "INFO",
                "DEBUG"
            ]
        },
        "UserPoolConfig": {
            "type": "object",
            "properties": {
                "userPoolId": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                },
                "defaultAction": {
                    "$ref": "#/$defs/DefaultAction"
                },
                "appIdClientRegex": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DefaultAction": {
            "enum": [
                "ALLOW",
                "DENY"
            ]
        },
        "AdditionalAuthenticationProviders": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AdditionalAuthenticationProvider"
            }
        },
        "AdditionalAuthenticationProvider": {
            "type": "object",
            "properties": {
                "authenticationType": {
                    "$ref": "#/$defs/AuthenticationType"
                },
                "openIDConnectConfig": {
                    "$ref": "#/$defs/OpenIDConnectConfig"
                },
                "userPoolConfig": {
                    "$ref": "#/$defs/CognitoUserPoolConfig"
                },
                "lambdaAuthorizerConfig": {
                    "$ref": "#/$defs/LambdaAuthorizerConfig"
                }
            }
        },
        "CognitoUserPoolConfig": {
            "type": "object",
            "properties": {
                "userPoolId": {
                    "$ref": "#/$defs/String"
                },
                "awsRegion": {
                    "$ref": "#/$defs/String"
                },
                "appIdClientRegex": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GraphQLApiType": {
            "enum": [
                "GRAPHQL",
                "MERGED"
            ]
        },
        "GraphQLApiVisibility": {
            "enum": [
                "GLOBAL",
                "PRIVATE"
            ]
        },
        "GraphQLApiIntrospectionConfig": {
            "enum": [
                "ENABLED",
                "DISABLED"
            ]
        },
        "QueryDepthLimit": {
            "type": "integer",
            "format": "int32"
        },
        "ResolverCountLimit": {
            "type": "integer",
            "format": "int32"
        },
        "EnhancedMetricsConfig": {
            "type": "object",
            "properties": {
                "resolverLevelMetricsBehavior": {
                    "$ref": "#/$defs/ResolverLevelMetricsBehavior"
                },
                "dataSourceLevelMetricsBehavior": {
                    "$ref": "#/$defs/DataSourceLevelMetricsBehavior"
                },
                "operationLevelMetricsConfig": {
                    "$ref": "#/$defs/OperationLevelMetricsConfig"
                }
            }
        },
        "ResolverLevelMetricsBehavior": {
            "enum": [
                "FULL_REQUEST_RESOLVER_METRICS",
                "PER_RESOLVER_METRICS"
            ]
        },
        "DataSourceLevelMetricsBehavior": {
            "enum": [
                "FULL_REQUEST_DATA_SOURCE_METRICS",
                "PER_DATA_SOURCE_METRICS"
            ]
        },
        "OperationLevelMetricsConfig": {
            "enum": [
                "ENABLED",
                "DISABLED"
            ]
        },
        "CreateGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "graphqlApi": {
                    "$ref": "#/$defs/GraphqlApi"
                }
            }
        },
        "GraphqlApi": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "authenticationType": {
                    "$ref": "#/$defs/AuthenticationType"
                },
                "logConfig": {
                    "$ref": "#/$defs/LogConfig"
                },
                "userPoolConfig": {
                    "$ref": "#/$defs/UserPoolConfig"
                },
                "openIDConnectConfig": {
                    "$ref": "#/$defs/OpenIDConnectConfig"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                },
                "uris": {
                    "$ref": "#/$defs/MapOfStringToString"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "additionalAuthenticationProviders": {
                    "$ref": "#/$defs/AdditionalAuthenticationProviders"
                },
                "xrayEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "wafWebAclArn": {
                    "$ref": "#/$defs/String"
                },
                "lambdaAuthorizerConfig": {
                    "$ref": "#/$defs/LambdaAuthorizerConfig"
                },
                "dns": {
                    "$ref": "#/$defs/MapOfStringToString"
                },
                "visibility": {
                    "$ref": "#/$defs/GraphQLApiVisibility"
                },
                "apiType": {
                    "$ref": "#/$defs/GraphQLApiType"
                },
                "mergedApiExecutionRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "owner": {
                    "$ref": "#/$defs/String"
                },
                "ownerContact": {
                    "$ref": "#/$defs/String"
                },
                "introspectionConfig": {
                    "$ref": "#/$defs/GraphQLApiIntrospectionConfig"
                },
                "queryDepthLimit": {
                    "$ref": "#/$defs/QueryDepthLimit"
                },
                "resolverCountLimit": {
                    "$ref": "#/$defs/ResolverCountLimit"
                },
                "enhancedMetricsConfig": {
                    "$ref": "#/$defs/EnhancedMetricsConfig"
                }
            }
        },
        "CreateResolverRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "fieldName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "kind": {
                    "$ref": "#/$defs/ResolverKind"
                },
                "pipelineConfig": {
                    "$ref": "#/$defs/PipelineConfig"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "cachingConfig": {
                    "$ref": "#/$defs/CachingConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/ResolverLevelMetricsConfig"
                }
            }
        },
        "ResolverKind": {
            "enum": [
                "UNIT",
                "PIPELINE"
            ]
        },
        "PipelineConfig": {
            "type": "object",
            "properties": {
                "functions": {
                    "$ref": "#/$defs/FunctionsIds"
                }
            }
        },
        "FunctionsIds": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "CachingConfig": {
            "type": "object",
            "properties": {
                "ttl": {
                    "$ref": "#/$defs/Long"
                },
                "cachingKeys": {
                    "$ref": "#/$defs/CachingKeys"
                }
            }
        },
        "CachingKeys": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "ResolverLevelMetricsConfig": {
            "enum": [
                "ENABLED",
                "DISABLED"
            ]
        },
        "CreateResolverResponse": {
            "type": "object",
            "properties": {
                "resolver": {
                    "$ref": "#/$defs/Resolver"
                }
            }
        },
        "Resolver": {
            "type": "object",
            "properties": {
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "fieldName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "resolverArn": {
                    "$ref": "#/$defs/String"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "kind": {
                    "$ref": "#/$defs/ResolverKind"
                },
                "pipelineConfig": {
                    "$ref": "#/$defs/PipelineConfig"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "cachingConfig": {
                    "$ref": "#/$defs/CachingConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/ResolverLevelMetricsConfig"
                }
            }
        },
        "CreateTypeRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "definition": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                }
            }
        },
        "TypeDefinitionFormat": {
            "enum": [
                "SDL",
                "JSON"
            ]
        },
        "CreateTypeResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/Type"
                }
            }
        },
        "Type": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                },
                "definition": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                }
            }
        },
        "DeleteApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteApiResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteApiCacheRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteApiCacheResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteApiKeyRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "id": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteApiKeyResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteChannelNamespaceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/Namespace"
                }
            }
        },
        "DeleteChannelNamespaceResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteDataSourceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "DeleteDataSourceResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteDomainNameRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                }
            }
        },
        "DeleteDomainNameResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteFunctionRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "functionId": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "DeleteFunctionResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteGraphqlApiResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteResolverRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "fieldName": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "DeleteResolverResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteTypeRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "DeleteTypeResponse": {
            "type": "object",
            "properties": {}
        },
        "DisassociateApiRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                }
            }
        },
        "DisassociateApiResponse": {
            "type": "object",
            "properties": {}
        },
        "DisassociateMergedGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "sourceApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DisassociateMergedGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociationStatus": {
                    "$ref": "#/$defs/SourceApiAssociationStatus"
                }
            }
        },
        "DisassociateSourceGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DisassociateSourceGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociationStatus": {
                    "$ref": "#/$defs/SourceApiAssociationStatus"
                }
            }
        },
        "EvaluateCodeRequest": {
            "type": "object",
            "properties": {
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                },
                "context": {
                    "$ref": "#/$defs/Context"
                },
                "function": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "Context": {
            "type": "string"
        },
        "EvaluateCodeResponse": {
            "type": "object",
            "properties": {
                "evaluationResult": {
                    "$ref": "#/$defs/EvaluationResult"
                },
                "error": {
                    "$ref": "#/$defs/EvaluateCodeErrorDetail"
                },
                "logs": {
                    "$ref": "#/$defs/Logs"
                },
                "stash": {
                    "$ref": "#/$defs/Stash"
                },
                "outErrors": {
                    "$ref": "#/$defs/OutErrors"
                }
            }
        },
        "EvaluationResult": {
            "type": "string"
        },
        "EvaluateCodeErrorDetail": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/$defs/ErrorMessage"
                },
                "codeErrors": {
                    "$ref": "#/$defs/CodeErrors"
                }
            }
        },
        "ErrorMessage": {
            "type": "string"
        },
        "CodeErrors": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CodeError"
            }
        },
        "CodeError": {
            "type": "object",
            "properties": {
                "errorType": {
                    "$ref": "#/$defs/String"
                },
                "value": {
                    "$ref": "#/$defs/String"
                },
                "location": {
                    "$ref": "#/$defs/CodeErrorLocation"
                }
            }
        },
        "CodeErrorLocation": {
            "type": "object",
            "properties": {
                "line": {
                    "$ref": "#/$defs/CodeErrorLine"
                },
                "column": {
                    "$ref": "#/$defs/CodeErrorColumn"
                },
                "span": {
                    "$ref": "#/$defs/CodeErrorSpan"
                }
            }
        },
        "CodeErrorLine": {
            "type": "integer",
            "format": "int32"
        },
        "CodeErrorColumn": {
            "type": "integer",
            "format": "int32"
        },
        "CodeErrorSpan": {
            "type": "integer",
            "format": "int32"
        },
        "Logs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "Stash": {
            "type": "string"
        },
        "OutErrors": {
            "type": "string"
        },
        "EvaluateMappingTemplateRequest": {
            "type": "object",
            "properties": {
                "template": {
                    "$ref": "#/$defs/Template"
                },
                "context": {
                    "$ref": "#/$defs/Context"
                }
            }
        },
        "Template": {
            "type": "string"
        },
        "EvaluateMappingTemplateResponse": {
            "type": "object",
            "properties": {
                "evaluationResult": {
                    "$ref": "#/$defs/EvaluationResult"
                },
                "error": {
                    "$ref": "#/$defs/ErrorDetail"
                },
                "logs": {
                    "$ref": "#/$defs/Logs"
                },
                "stash": {
                    "$ref": "#/$defs/Stash"
                },
                "outErrors": {
                    "$ref": "#/$defs/OutErrors"
                }
            }
        },
        "ErrorDetail": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/$defs/ErrorMessage"
                }
            }
        },
        "FlushApiCacheRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "FlushApiCacheResponse": {
            "type": "object",
            "properties": {}
        },
        "GetApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetApiResponse": {
            "type": "object",
            "properties": {
                "api": {
                    "$ref": "#/$defs/Api"
                }
            }
        },
        "GetApiAssociationRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                }
            }
        },
        "GetApiAssociationResponse": {
            "type": "object",
            "properties": {
                "apiAssociation": {
                    "$ref": "#/$defs/ApiAssociation"
                }
            }
        },
        "GetApiCacheRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetApiCacheResponse": {
            "type": "object",
            "properties": {
                "apiCache": {
                    "$ref": "#/$defs/ApiCache"
                }
            }
        },
        "GetChannelNamespaceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/Namespace"
                }
            }
        },
        "GetChannelNamespaceResponse": {
            "type": "object",
            "properties": {
                "channelNamespace": {
                    "$ref": "#/$defs/ChannelNamespace"
                }
            }
        },
        "GetDataSourceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "GetDataSourceResponse": {
            "type": "object",
            "properties": {
                "dataSource": {
                    "$ref": "#/$defs/DataSource"
                }
            }
        },
        "GetDataSourceIntrospectionRequest": {
            "type": "object",
            "properties": {
                "introspectionId": {
                    "$ref": "#/$defs/String"
                },
                "includeModelsSDL": {
                    "$ref": "#/$defs/Boolean"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "PaginationToken": {
            "type": "string"
        },
        "MaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "GetDataSourceIntrospectionResponse": {
            "type": "object",
            "properties": {
                "introspectionId": {
                    "$ref": "#/$defs/String"
                },
                "introspectionStatus": {
                    "$ref": "#/$defs/DataSourceIntrospectionStatus"
                },
                "introspectionStatusDetail": {
                    "$ref": "#/$defs/String"
                },
                "introspectionResult": {
                    "$ref": "#/$defs/DataSourceIntrospectionResult"
                }
            }
        },
        "DataSourceIntrospectionStatus": {
            "enum": [
                "PROCESSING",
                "FAILED",
                "SUCCESS"
            ]
        },
        "DataSourceIntrospectionResult": {
            "type": "object",
            "properties": {
                "models": {
                    "$ref": "#/$defs/DataSourceIntrospectionModels"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "DataSourceIntrospectionModels": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DataSourceIntrospectionModel"
            }
        },
        "DataSourceIntrospectionModel": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "fields": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelFields"
                },
                "primaryKey": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelIndex"
                },
                "indexes": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelIndexes"
                },
                "sdl": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DataSourceIntrospectionModelFields": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DataSourceIntrospectionModelField"
            }
        },
        "DataSourceIntrospectionModelField": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelFieldType"
                },
                "length": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "DataSourceIntrospectionModelFieldType": {
            "type": "object",
            "properties": {
                "kind": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelFieldType"
                },
                "values": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelFieldTypeValues"
                }
            }
        },
        "DataSourceIntrospectionModelFieldTypeValues": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "DataSourceIntrospectionModelIndex": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "fields": {
                    "$ref": "#/$defs/DataSourceIntrospectionModelIndexFields"
                }
            }
        },
        "DataSourceIntrospectionModelIndexFields": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "DataSourceIntrospectionModelIndexes": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DataSourceIntrospectionModelIndex"
            }
        },
        "GetDomainNameRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                }
            }
        },
        "GetDomainNameResponse": {
            "type": "object",
            "properties": {
                "domainNameConfig": {
                    "$ref": "#/$defs/DomainNameConfig"
                }
            }
        },
        "GetFunctionRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "functionId": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "GetFunctionResponse": {
            "type": "object",
            "properties": {
                "functionConfiguration": {
                    "$ref": "#/$defs/FunctionConfiguration"
                }
            }
        },
        "GetGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "graphqlApi": {
                    "$ref": "#/$defs/GraphqlApi"
                }
            }
        },
        "GetGraphqlApiEnvironmentVariablesRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetGraphqlApiEnvironmentVariablesResponse": {
            "type": "object",
            "properties": {
                "environmentVariables": {
                    "$ref": "#/$defs/EnvironmentVariableMap"
                }
            }
        },
        "EnvironmentVariableMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/EnvironmentVariableValue"
            }
        },
        "EnvironmentVariableValue": {
            "type": "string"
        },
        "GetIntrospectionSchemaRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/OutputType"
                },
                "includeDirectives": {
                    "$ref": "#/$defs/BooleanValue"
                }
            }
        },
        "OutputType": {
            "enum": [
                "SDL",
                "JSON"
            ]
        },
        "BooleanValue": {
            "type": "boolean"
        },
        "GetIntrospectionSchemaResponse": {
            "type": "object",
            "properties": {
                "schema": {
                    "$ref": "#/$defs/Blob"
                }
            }
        },
        "Blob": {
            "type": "string",
            "format": "binary"
        },
        "GetResolverRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "fieldName": {
                    "$ref": "#/$defs/ResourceName"
                }
            }
        },
        "GetResolverResponse": {
            "type": "object",
            "properties": {
                "resolver": {
                    "$ref": "#/$defs/Resolver"
                }
            }
        },
        "GetSchemaCreationStatusRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetSchemaCreationStatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/SchemaStatus"
                },
                "details": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "SchemaStatus": {
            "enum": [
                "Processing",
                "Active",
                "Deleting",
                "Failed",
                "Success",
                "NotApplicable"
            ]
        },
        "GetSourceApiAssociationRequest": {
            "type": "object",
            "properties": {
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetSourceApiAssociationResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociation": {
                    "$ref": "#/$defs/SourceApiAssociation"
                }
            }
        },
        "GetTypeRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                }
            }
        },
        "GetTypeResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/Type"
                }
            }
        },
        "ListApiKeysRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListApiKeysResponse": {
            "type": "object",
            "properties": {
                "apiKeys": {
                    "$ref": "#/$defs/ApiKeys"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ApiKeys": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ApiKey"
            }
        },
        "ListApisRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListApisResponse": {
            "type": "object",
            "properties": {
                "apis": {
                    "$ref": "#/$defs/Apis"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "Apis": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Api"
            }
        },
        "ListChannelNamespacesRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListChannelNamespacesResponse": {
            "type": "object",
            "properties": {
                "channelNamespaces": {
                    "$ref": "#/$defs/ChannelNamespaces"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ChannelNamespaces": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ChannelNamespace"
            }
        },
        "ListDataSourcesRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListDataSourcesResponse": {
            "type": "object",
            "properties": {
                "dataSources": {
                    "$ref": "#/$defs/DataSources"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "DataSources": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DataSource"
            }
        },
        "ListDomainNamesRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListDomainNamesResponse": {
            "type": "object",
            "properties": {
                "domainNameConfigs": {
                    "$ref": "#/$defs/DomainNameConfigs"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "DomainNameConfigs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DomainNameConfig"
            }
        },
        "ListFunctionsRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListFunctionsResponse": {
            "type": "object",
            "properties": {
                "functions": {
                    "$ref": "#/$defs/Functions"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "Functions": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/FunctionConfiguration"
            }
        },
        "ListGraphqlApisRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                },
                "apiType": {
                    "$ref": "#/$defs/GraphQLApiType"
                },
                "owner": {
                    "$ref": "#/$defs/Ownership"
                }
            }
        },
        "Ownership": {
            "enum": [
                "CURRENT_ACCOUNT",
                "OTHER_ACCOUNTS"
            ]
        },
        "ListGraphqlApisResponse": {
            "type": "object",
            "properties": {
                "graphqlApis": {
                    "$ref": "#/$defs/GraphqlApis"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "GraphqlApis": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/GraphqlApi"
            }
        },
        "ListResolversRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListResolversResponse": {
            "type": "object",
            "properties": {
                "resolvers": {
                    "$ref": "#/$defs/Resolvers"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "Resolvers": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Resolver"
            }
        },
        "ListResolversByFunctionRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "functionId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListResolversByFunctionResponse": {
            "type": "object",
            "properties": {
                "resolvers": {
                    "$ref": "#/$defs/Resolvers"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ListSourceApiAssociationsRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListSourceApiAssociationsResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociationSummaries": {
                    "$ref": "#/$defs/SourceApiAssociationSummaryList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "SourceApiAssociationSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/SourceApiAssociationSummary"
            }
        },
        "SourceApiAssociationSummary": {
            "type": "object",
            "properties": {
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "associationArn": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiId": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiArn": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiId": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiArn": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                }
            }
        },
        "ResourceArn": {
            "type": "string"
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "ListTypesRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListTypesResponse": {
            "type": "object",
            "properties": {
                "types": {
                    "$ref": "#/$defs/TypeList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "TypeList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Type"
            }
        },
        "ListTypesByAssociationRequest": {
            "type": "object",
            "properties": {
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListTypesByAssociationResponse": {
            "type": "object",
            "properties": {
                "types": {
                    "$ref": "#/$defs/TypeList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "PutGraphqlApiEnvironmentVariablesRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "environmentVariables": {
                    "$ref": "#/$defs/EnvironmentVariableMap"
                }
            }
        },
        "PutGraphqlApiEnvironmentVariablesResponse": {
            "type": "object",
            "properties": {
                "environmentVariables": {
                    "$ref": "#/$defs/EnvironmentVariableMap"
                }
            }
        },
        "StartDataSourceIntrospectionRequest": {
            "type": "object",
            "properties": {
                "rdsDataApiConfig": {
                    "$ref": "#/$defs/RdsDataApiConfig"
                }
            }
        },
        "RdsDataApiConfig": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/RdsDataApiConfigResourceArn"
                },
                "secretArn": {
                    "$ref": "#/$defs/RdsDataApiConfigSecretArn"
                },
                "databaseName": {
                    "$ref": "#/$defs/RdsDataApiConfigDatabaseName"
                }
            }
        },
        "RdsDataApiConfigResourceArn": {
            "type": "string"
        },
        "RdsDataApiConfigSecretArn": {
            "type": "string"
        },
        "RdsDataApiConfigDatabaseName": {
            "type": "string"
        },
        "StartDataSourceIntrospectionResponse": {
            "type": "object",
            "properties": {
                "introspectionId": {
                    "$ref": "#/$defs/String"
                },
                "introspectionStatus": {
                    "$ref": "#/$defs/DataSourceIntrospectionStatus"
                },
                "introspectionStatusDetail": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "StartSchemaCreationRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "definition": {
                    "$ref": "#/$defs/Blob"
                }
            }
        },
        "StartSchemaCreationResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/SchemaStatus"
                }
            }
        },
        "StartSchemaMergeRequest": {
            "type": "object",
            "properties": {
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "StartSchemaMergeResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociationStatus": {
                    "$ref": "#/$defs/SourceApiAssociationStatus"
                }
            }
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                },
                "tagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "TagKey": {
            "type": "string"
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UpdateApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ApiName"
                },
                "ownerContact": {
                    "$ref": "#/$defs/String"
                },
                "eventConfig": {
                    "$ref": "#/$defs/EventConfig"
                }
            }
        },
        "UpdateApiResponse": {
            "type": "object",
            "properties": {
                "api": {
                    "$ref": "#/$defs/Api"
                }
            }
        },
        "UpdateApiCacheRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "ttl": {
                    "$ref": "#/$defs/Long"
                },
                "apiCachingBehavior": {
                    "$ref": "#/$defs/ApiCachingBehavior"
                },
                "type": {
                    "$ref": "#/$defs/ApiCacheType"
                },
                "healthMetricsConfig": {
                    "$ref": "#/$defs/CacheHealthMetricsConfig"
                }
            }
        },
        "UpdateApiCacheResponse": {
            "type": "object",
            "properties": {
                "apiCache": {
                    "$ref": "#/$defs/ApiCache"
                }
            }
        },
        "UpdateApiKeyRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "id": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "expires": {
                    "$ref": "#/$defs/Long"
                }
            }
        },
        "UpdateApiKeyResponse": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "$ref": "#/$defs/ApiKey"
                }
            }
        },
        "UpdateChannelNamespaceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/Namespace"
                },
                "subscribeAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "publishAuthModes": {
                    "$ref": "#/$defs/AuthModes"
                },
                "codeHandlers": {
                    "$ref": "#/$defs/Code"
                }
            }
        },
        "UpdateChannelNamespaceResponse": {
            "type": "object",
            "properties": {
                "channelNamespace": {
                    "$ref": "#/$defs/ChannelNamespace"
                }
            }
        },
        "UpdateDataSourceRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/DataSourceType"
                },
                "serviceRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "dynamodbConfig": {
                    "$ref": "#/$defs/DynamodbDataSourceConfig"
                },
                "lambdaConfig": {
                    "$ref": "#/$defs/LambdaDataSourceConfig"
                },
                "elasticsearchConfig": {
                    "$ref": "#/$defs/ElasticsearchDataSourceConfig"
                },
                "openSearchServiceConfig": {
                    "$ref": "#/$defs/OpenSearchServiceDataSourceConfig"
                },
                "httpConfig": {
                    "$ref": "#/$defs/HttpDataSourceConfig"
                },
                "relationalDatabaseConfig": {
                    "$ref": "#/$defs/RelationalDatabaseDataSourceConfig"
                },
                "eventBridgeConfig": {
                    "$ref": "#/$defs/EventBridgeDataSourceConfig"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/DataSourceLevelMetricsConfig"
                }
            }
        },
        "UpdateDataSourceResponse": {
            "type": "object",
            "properties": {
                "dataSource": {
                    "$ref": "#/$defs/DataSource"
                }
            }
        },
        "UpdateDomainNameRequest": {
            "type": "object",
            "properties": {
                "domainName": {
                    "$ref": "#/$defs/DomainName"
                },
                "description": {
                    "$ref": "#/$defs/Description"
                }
            }
        },
        "UpdateDomainNameResponse": {
            "type": "object",
            "properties": {
                "domainNameConfig": {
                    "$ref": "#/$defs/DomainNameConfig"
                }
            }
        },
        "UpdateFunctionRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/ResourceName"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "functionId": {
                    "$ref": "#/$defs/ResourceName"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "functionVersion": {
                    "$ref": "#/$defs/String"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                }
            }
        },
        "UpdateFunctionResponse": {
            "type": "object",
            "properties": {
                "functionConfiguration": {
                    "$ref": "#/$defs/FunctionConfiguration"
                }
            }
        },
        "UpdateGraphqlApiRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/String"
                },
                "logConfig": {
                    "$ref": "#/$defs/LogConfig"
                },
                "authenticationType": {
                    "$ref": "#/$defs/AuthenticationType"
                },
                "userPoolConfig": {
                    "$ref": "#/$defs/UserPoolConfig"
                },
                "openIDConnectConfig": {
                    "$ref": "#/$defs/OpenIDConnectConfig"
                },
                "additionalAuthenticationProviders": {
                    "$ref": "#/$defs/AdditionalAuthenticationProviders"
                },
                "xrayEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "lambdaAuthorizerConfig": {
                    "$ref": "#/$defs/LambdaAuthorizerConfig"
                },
                "mergedApiExecutionRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "ownerContact": {
                    "$ref": "#/$defs/String"
                },
                "introspectionConfig": {
                    "$ref": "#/$defs/GraphQLApiIntrospectionConfig"
                },
                "queryDepthLimit": {
                    "$ref": "#/$defs/QueryDepthLimit"
                },
                "resolverCountLimit": {
                    "$ref": "#/$defs/ResolverCountLimit"
                },
                "enhancedMetricsConfig": {
                    "$ref": "#/$defs/EnhancedMetricsConfig"
                }
            }
        },
        "UpdateGraphqlApiResponse": {
            "type": "object",
            "properties": {
                "graphqlApi": {
                    "$ref": "#/$defs/GraphqlApi"
                }
            }
        },
        "UpdateResolverRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "fieldName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "dataSourceName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "requestMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "responseMappingTemplate": {
                    "$ref": "#/$defs/MappingTemplate"
                },
                "kind": {
                    "$ref": "#/$defs/ResolverKind"
                },
                "pipelineConfig": {
                    "$ref": "#/$defs/PipelineConfig"
                },
                "syncConfig": {
                    "$ref": "#/$defs/SyncConfig"
                },
                "cachingConfig": {
                    "$ref": "#/$defs/CachingConfig"
                },
                "maxBatchSize": {
                    "$ref": "#/$defs/MaxBatchSize"
                },
                "runtime": {
                    "$ref": "#/$defs/AppSyncRuntime"
                },
                "code": {
                    "$ref": "#/$defs/Code"
                },
                "metricsConfig": {
                    "$ref": "#/$defs/ResolverLevelMetricsConfig"
                }
            }
        },
        "UpdateResolverResponse": {
            "type": "object",
            "properties": {
                "resolver": {
                    "$ref": "#/$defs/Resolver"
                }
            }
        },
        "UpdateSourceApiAssociationRequest": {
            "type": "object",
            "properties": {
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "mergedApiIdentifier": {
                    "$ref": "#/$defs/String"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "sourceApiAssociationConfig": {
                    "$ref": "#/$defs/SourceApiAssociationConfig"
                }
            }
        },
        "UpdateSourceApiAssociationResponse": {
            "type": "object",
            "properties": {
                "sourceApiAssociation": {
                    "$ref": "#/$defs/SourceApiAssociation"
                }
            }
        },
        "UpdateTypeRequest": {
            "type": "object",
            "properties": {
                "apiId": {
                    "$ref": "#/$defs/String"
                },
                "typeName": {
                    "$ref": "#/$defs/ResourceName"
                },
                "definition": {
                    "$ref": "#/$defs/String"
                },
                "format": {
                    "$ref": "#/$defs/TypeDefinitionFormat"
                }
            }
        },
        "UpdateTypeResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/Type"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://appsync-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://appsync-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://appsync.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://appsync.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}
