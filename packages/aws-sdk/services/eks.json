{
    "name": "eks",
    "commands": [
        {
            "name": "AssociateAccessPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}/access-policies"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateAccessPolicyResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateAccessPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {},
                        "policyArn": {},
                        "accessScope": {}
                    }
                }
            }
        },
        {
            "name": "AssociateEncryptionConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/encryption-config/associate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateEncryptionConfigResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateEncryptionConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "encryptionConfig": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "AssociateIdentityProviderConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/identity-provider-configs/associate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateIdentityProviderConfigResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/AssociateIdentityProviderConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "oidc": {},
                        "tags": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "CreateAccessEntry",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/access-entries"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessEntryResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateAccessEntryRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {},
                        "kubernetesGroups": {},
                        "tags": {},
                        "clientRequestToken": {},
                        "username": {},
                        "type": {}
                    }
                }
            }
        },
        {
            "name": "CreateAddon",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/addons"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAddonResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateAddonRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "addonName": {},
                        "addonVersion": {},
                        "serviceAccountRoleArn": {},
                        "resolveConflicts": {},
                        "clientRequestToken": {},
                        "tags": {},
                        "configurationValues": {},
                        "podIdentityAssociations": {}
                    }
                }
            }
        },
        {
            "name": "CreateCluster",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/clusters"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateClusterResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateClusterRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "version": {},
                        "roleArn": {},
                        "resourcesVpcConfig": {},
                        "kubernetesNetworkConfig": {},
                        "logging": {},
                        "clientRequestToken": {},
                        "tags": {},
                        "encryptionConfig": {},
                        "outpostConfig": {},
                        "accessConfig": {},
                        "bootstrapSelfManagedAddons": {},
                        "upgradePolicy": {},
                        "zonalShiftConfig": {},
                        "remoteNetworkConfig": {},
                        "computeConfig": {},
                        "storageConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateEksAnywhereSubscription",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/eks-anywhere-subscriptions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateEksAnywhereSubscriptionResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateEksAnywhereSubscriptionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "term": {},
                        "licenseQuantity": {},
                        "licenseType": {},
                        "autoRenew": {},
                        "clientRequestToken": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "CreateFargateProfile",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/fargate-profiles"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateFargateProfileResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateFargateProfileRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "fargateProfileName": {},
                        "clusterName": {},
                        "podExecutionRoleArn": {},
                        "subnets": {},
                        "selectors": {},
                        "clientRequestToken": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "CreateNodegroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/node-groups"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateNodegroupResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreateNodegroupRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "nodegroupName": {},
                        "scalingConfig": {},
                        "diskSize": {},
                        "subnets": {},
                        "instanceTypes": {},
                        "amiType": {},
                        "remoteAccess": {},
                        "nodeRole": {},
                        "labels": {},
                        "taints": {},
                        "tags": {},
                        "clientRequestToken": {},
                        "launchTemplate": {},
                        "updateConfig": {},
                        "nodeRepairConfig": {},
                        "capacityType": {},
                        "version": {},
                        "releaseVersion": {}
                    }
                }
            }
        },
        {
            "name": "CreatePodIdentityAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/pod-identity-associations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreatePodIdentityAssociationResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/CreatePodIdentityAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "namespace": {},
                        "serviceAccount": {},
                        "roleArn": {},
                        "clientRequestToken": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "DeleteAccessEntry",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteAccessEntryResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteAccessEntryRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {}
                    }
                }
            }
        },
        {
            "name": "DeleteAddon",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "addonName": "route.addonName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/addons/{addonName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteAddonResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.addonName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteAddonRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "addonName": {},
                        "preserve": {}
                    }
                }
            }
        },
        {
            "name": "DeleteCluster",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteClusterResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteClusterRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "DeleteEksAnywhereSubscription",
            "config": {
                "http": {
                    "inject": [
                        {
                            "id": "route.id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/eks-anywhere-subscriptions/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteEksAnywhereSubscriptionResponse"
                    },
                    "inject": [
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteEksAnywhereSubscriptionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteFargateProfile",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "fargateProfileName": "route.fargateProfileName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/fargate-profiles/{fargateProfileName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteFargateProfileResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.fargateProfileName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteFargateProfileRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "fargateProfileName": {}
                    }
                }
            }
        },
        {
            "name": "DeleteNodegroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "nodegroupName": "route.nodegroupName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/node-groups/{nodegroupName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteNodegroupResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.nodegroupName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeleteNodegroupRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "nodegroupName": {}
                    }
                }
            }
        },
        {
            "name": "DeletePodIdentityAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/pod-identity-associations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeletePodIdentityAssociationResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeletePodIdentityAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "associationId": {}
                    }
                }
            }
        },
        {
            "name": "DeregisterCluster",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/cluster-registrations/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeregisterClusterResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DeregisterClusterRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "DescribeAccessEntry",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeAccessEntryResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeAccessEntryRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {}
                    }
                }
            }
        },
        {
            "name": "DescribeAddon",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "addonName": "route.addonName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/addons/{addonName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeAddonResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.addonName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeAddonRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "addonName": {}
                    }
                }
            }
        },
        {
            "name": "DescribeAddonConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/addons/configuration-schemas"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeAddonConfigurationResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeAddonConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "addonName": {},
                        "addonVersion": {}
                    }
                }
            }
        },
        {
            "name": "DescribeAddonVersions",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/addons/supported-versions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeAddonVersionsResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeAddonVersionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "kubernetesVersion": {},
                        "maxResults": {},
                        "nextToken": {},
                        "addonName": {},
                        "types": {},
                        "publishers": {},
                        "owners": {}
                    }
                }
            }
        },
        {
            "name": "DescribeCluster",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeClusterResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeClusterRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {}
                    }
                }
            }
        },
        {
            "name": "DescribeClusterVersions",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/cluster-versions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeClusterVersionsResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeClusterVersionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterType": {},
                        "maxResults": {},
                        "nextToken": {},
                        "defaultOnly": {},
                        "includeAll": {},
                        "clusterVersions": {},
                        "status": {},
                        "versionStatus": {}
                    }
                }
            }
        },
        {
            "name": "DescribeEksAnywhereSubscription",
            "config": {
                "http": {
                    "inject": [
                        {
                            "id": "route.id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/eks-anywhere-subscriptions/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeEksAnywhereSubscriptionResponse"
                    },
                    "inject": [
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeEksAnywhereSubscriptionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "id": {}
                    }
                }
            }
        },
        {
            "name": "DescribeFargateProfile",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "fargateProfileName": "route.fargateProfileName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/fargate-profiles/{fargateProfileName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeFargateProfileResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.fargateProfileName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeFargateProfileRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "fargateProfileName": {}
                    }
                }
            }
        },
        {
            "name": "DescribeIdentityProviderConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/identity-provider-configs/describe"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeIdentityProviderConfigResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeIdentityProviderConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "identityProviderConfig": {}
                    }
                }
            }
        },
        {
            "name": "DescribeInsight",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "id": "route.id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/insights/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeInsightResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeInsightRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "id": {}
                    }
                }
            }
        },
        {
            "name": "DescribeNodegroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "nodegroupName": "route.nodegroupName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/node-groups/{nodegroupName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeNodegroupResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.nodegroupName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeNodegroupRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "nodegroupName": {}
                    }
                }
            }
        },
        {
            "name": "DescribePodIdentityAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "associationId": "route.associationId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/pod-identity-associations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribePodIdentityAssociationResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribePodIdentityAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "associationId": {}
                    }
                }
            }
        },
        {
            "name": "DescribeUpdate",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "updateId": "route.updateId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{name}/updates/{updateId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeUpdateResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0.updateId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DescribeUpdateRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "updateId": {},
                        "nodegroupName": {},
                        "addonName": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateAccessPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "policyArn": "route.policyArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}/access-policies/{policyArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateAccessPolicyResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0.policyArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DisassociateAccessPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {},
                        "policyArn": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateIdentityProviderConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/identity-provider-configs/disassociate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateIdentityProviderConfigResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/DisassociateIdentityProviderConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "identityProviderConfig": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "ListAccessEntries",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/access-entries"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessEntriesResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListAccessEntriesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "associatedPolicyArn": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListAccessPolicies",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/access-policies"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessPoliciesResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListAccessPoliciesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListAddons",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/addons"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAddonsResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListAddonsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListAssociatedAccessPolicies",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}/access-policies"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAssociatedAccessPoliciesResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListAssociatedAccessPoliciesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListClusters",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/clusters"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListClustersResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListClustersRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "maxResults": {},
                        "nextToken": {},
                        "include": {}
                    }
                }
            }
        },
        {
            "name": "ListEksAnywhereSubscriptions",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/eks-anywhere-subscriptions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListEksAnywhereSubscriptionsResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListEksAnywhereSubscriptionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "maxResults": {},
                        "nextToken": {},
                        "includeStatus": {}
                    }
                }
            }
        },
        {
            "name": "ListFargateProfiles",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/fargate-profiles"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListFargateProfilesResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListFargateProfilesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListIdentityProviderConfigs",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/identity-provider-configs"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListIdentityProviderConfigsResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListIdentityProviderConfigsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListInsights",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/insights"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListInsightsResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListInsightsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "filter": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListNodegroups",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/node-groups"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListNodegroupsResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListNodegroupsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListPodIdentityAssociations",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{clusterName}/pod-identity-associations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListPodIdentityAssociationsResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListPodIdentityAssociationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "namespace": {},
                        "serviceAccount": {},
                        "maxResults": {},
                        "nextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {}
                    }
                }
            }
        },
        {
            "name": "ListUpdates",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/clusters/{name}/updates"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListUpdatesResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/ListUpdatesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "nodegroupName": {},
                        "addonName": {},
                        "nextToken": {},
                        "maxResults": {}
                    }
                }
            }
        },
        {
            "name": "RegisterCluster",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/cluster-registrations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/RegisterClusterResponse"
                    },
                    "inject": [
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/RegisterClusterRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "connectorConfig": {},
                        "clientRequestToken": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {},
                        "tags": {}
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "params.0.resourceArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "resourceArn": {},
                        "tagKeys": {}
                    }
                }
            }
        },
        {
            "name": "UpdateAccessEntry",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "principalArn": "route.principalArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/access-entries/{principalArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateAccessEntryResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.principalArn",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateAccessEntryRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "principalArn": {},
                        "kubernetesGroups": {},
                        "clientRequestToken": {},
                        "username": {}
                    }
                }
            }
        },
        {
            "name": "UpdateAddon",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "addonName": "route.addonName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/addons/{addonName}/update"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateAddonResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.addonName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateAddonRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "addonName": {},
                        "addonVersion": {},
                        "serviceAccountRoleArn": {},
                        "resolveConflicts": {},
                        "clientRequestToken": {},
                        "configurationValues": {},
                        "podIdentityAssociations": {}
                    }
                }
            }
        },
        {
            "name": "UpdateClusterConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{name}/update-config"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateClusterConfigResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateClusterConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "resourcesVpcConfig": {},
                        "logging": {},
                        "clientRequestToken": {},
                        "accessConfig": {},
                        "upgradePolicy": {},
                        "zonalShiftConfig": {},
                        "computeConfig": {},
                        "kubernetesNetworkConfig": {},
                        "storageConfig": {}
                    }
                }
            }
        },
        {
            "name": "UpdateClusterVersion",
            "config": {
                "http": {
                    "inject": [
                        {
                            "name": "route.name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{name}/updates"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateClusterVersionResponse"
                    },
                    "inject": [
                        "params.0.name",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateClusterVersionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "name": {},
                        "version": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "UpdateEksAnywhereSubscription",
            "config": {
                "http": {
                    "inject": [
                        {
                            "id": "route.id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/eks-anywhere-subscriptions/{id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateEksAnywhereSubscriptionResponse"
                    },
                    "inject": [
                        "params.0.id",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateEksAnywhereSubscriptionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "id": {},
                        "autoRenew": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "UpdateNodegroupConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "nodegroupName": "route.nodegroupName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/node-groups/{nodegroupName}/update-config"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateNodegroupConfigResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.nodegroupName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateNodegroupConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "nodegroupName": {},
                        "labels": {},
                        "taints": {},
                        "scalingConfig": {},
                        "updateConfig": {},
                        "nodeRepairConfig": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "UpdateNodegroupVersion",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "nodegroupName": "route.nodegroupName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/node-groups/{nodegroupName}/update-version"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateNodegroupVersionResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.nodegroupName",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdateNodegroupVersionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "nodegroupName": {},
                        "version": {},
                        "releaseVersion": {},
                        "launchTemplate": {},
                        "force": {},
                        "clientRequestToken": {}
                    }
                }
            }
        },
        {
            "name": "UpdatePodIdentityAssociation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "clusterName": "route.clusterName",
                            "associationId": "route.associationId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/clusters/{clusterName}/pod-identity-associations/{associationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdatePodIdentityAssociationResponse"
                    },
                    "inject": [
                        "params.0.clusterName",
                        "params.0.associationId",
                        "params.0"
                    ],
                    "$defs": {
                        "params.0": {
                            "$ref": "#/$defs/UpdatePodIdentityAssociationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "clusterName": {},
                        "associationId": {},
                        "roleArn": {},
                        "clientRequestToken": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "AssociateAccessPolicyRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "policyArn": {
                    "$ref": "#/$defs/String"
                },
                "accessScope": {
                    "$ref": "#/$defs/AccessScope"
                }
            }
        },
        "String": {
            "type": "string"
        },
        "AccessScope": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/AccessScopeType"
                },
                "namespaces": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "AccessScopeType": {
            "enum": [
                "cluster",
                "namespace"
            ]
        },
        "StringList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "AssociateAccessPolicyResponse": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "associatedAccessPolicy": {
                    "$ref": "#/$defs/AssociatedAccessPolicy"
                }
            }
        },
        "AssociatedAccessPolicy": {
            "type": "object",
            "properties": {
                "policyArn": {
                    "$ref": "#/$defs/String"
                },
                "accessScope": {
                    "$ref": "#/$defs/AccessScope"
                },
                "associatedAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "modifiedAt": {
                    "$ref": "#/$defs/Timestamp"
                }
            }
        },
        "Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "AssociateEncryptionConfigRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "encryptionConfig": {
                    "$ref": "#/$defs/EncryptionConfigList"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "EncryptionConfigList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EncryptionConfig"
            }
        },
        "EncryptionConfig": {
            "type": "object",
            "properties": {
                "resources": {
                    "$ref": "#/$defs/StringList"
                },
                "provider": {
                    "$ref": "#/$defs/Provider"
                }
            }
        },
        "Provider": {
            "type": "object",
            "properties": {
                "keyArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "AssociateEncryptionConfigResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "Update": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "status": {
                    "$ref": "#/$defs/UpdateStatus"
                },
                "type": {
                    "$ref": "#/$defs/UpdateType"
                },
                "params": {
                    "$ref": "#/$defs/UpdateParams"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "errors": {
                    "$ref": "#/$defs/ErrorDetails"
                }
            }
        },
        "UpdateStatus": {
            "enum": [
                "IN_PROGRESS",
                "FAILED",
                "CANCELLED",
                "SUCCESSFUL"
            ]
        },
        "UpdateType": {
            "enum": [
                "VERSION_UPDATE",
                "ENDPOINT_ACCESS_UPDATE",
                "LOGGING_UPDATE",
                "CONFIG_UPDATE",
                "ASSOCIATE_IDENTITY_PROVIDER_CONFIG",
                "DISASSOCIATE_IDENTITY_PROVIDER_CONFIG",
                "ASSOCIATE_ENCRYPTION_CONFIG",
                "ADDON_UPDATE",
                "VPC_CONFIG_UPDATE",
                "ACCESS_CONFIG_UPDATE",
                "UPGRADE_POLICY_UPDATE",
                "ZONAL_SHIFT_CONFIG_UPDATE",
                "AUTO_MODE_UPDATE"
            ]
        },
        "UpdateParams": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/UpdateParam"
            }
        },
        "UpdateParam": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/UpdateParamType"
                },
                "value": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateParamType": {
            "enum": [
                "VERSION",
                "PLATFORM_VERSION",
                "ENDPOINT_PRIVATE_ACCESS",
                "ENDPOINT_PUBLIC_ACCESS",
                "CLUSTER_LOGGING",
                "DESIRED_SIZE",
                "LABELS_TO_ADD",
                "LABELS_TO_REMOVE",
                "TAINTS_TO_ADD",
                "TAINTS_TO_REMOVE",
                "MAX_SIZE",
                "MIN_SIZE",
                "RELEASE_VERSION",
                "PUBLIC_ACCESS_CIDRS",
                "LAUNCH_TEMPLATE_NAME",
                "LAUNCH_TEMPLATE_VERSION",
                "IDENTITY_PROVIDER_CONFIG",
                "ENCRYPTION_CONFIG",
                "ADDON_VERSION",
                "SERVICE_ACCOUNT_ROLE_ARN",
                "RESOLVE_CONFLICTS",
                "MAX_UNAVAILABLE",
                "MAX_UNAVAILABLE_PERCENTAGE",
                "NODE_REPAIR_ENABLED",
                "UPDATE_STRATEGY",
                "CONFIGURATION_VALUES",
                "SECURITY_GROUPS",
                "SUBNETS",
                "AUTHENTICATION_MODE",
                "POD_IDENTITY_ASSOCIATIONS",
                "UPGRADE_POLICY",
                "ZONAL_SHIFT_CONFIG",
                "COMPUTE_CONFIG",
                "STORAGE_CONFIG",
                "KUBERNETES_NETWORK_CONFIG"
            ]
        },
        "ErrorDetails": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ErrorDetail"
            }
        },
        "ErrorDetail": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "$ref": "#/$defs/ErrorCode"
                },
                "errorMessage": {
                    "$ref": "#/$defs/String"
                },
                "resourceIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ErrorCode": {
            "enum": [
                "SUBNET_NOT_FOUND",
                "SECURITY_GROUP_NOT_FOUND",
                "ENI_LIMIT_REACHED",
                "IP_NOT_AVAILABLE",
                "ACCESS_DENIED",
                "OPERATION_NOT_PERMITTED",
                "VPC_ID_NOT_FOUND",
                "UNKNOWN",
                "NODE_CREATION_FAILURE",
                "POD_EVICTION_FAILURE",
                "INSUFFICIENT_FREE_ADDRESSES",
                "CLUSTER_UNREACHABLE",
                "INSUFFICIENT_NUMBER_OF_REPLICAS",
                "CONFIGURATION_CONFLICT",
                "ADMISSION_REQUEST_DENIED",
                "UNSUPPORTED_ADDON_MODIFICATION",
                "K8S_RESOURCE_NOT_FOUND"
            ]
        },
        "AssociateIdentityProviderConfigRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "oidc": {
                    "$ref": "#/$defs/OidcIdentityProviderConfigRequest"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "OidcIdentityProviderConfigRequest": {
            "type": "object",
            "properties": {
                "identityProviderConfigName": {
                    "$ref": "#/$defs/String"
                },
                "issuerUrl": {
                    "$ref": "#/$defs/String"
                },
                "clientId": {
                    "$ref": "#/$defs/String"
                },
                "usernameClaim": {
                    "$ref": "#/$defs/String"
                },
                "usernamePrefix": {
                    "$ref": "#/$defs/String"
                },
                "groupsClaim": {
                    "$ref": "#/$defs/String"
                },
                "groupsPrefix": {
                    "$ref": "#/$defs/String"
                },
                "requiredClaims": {
                    "$ref": "#/$defs/requiredClaimsMap"
                }
            }
        },
        "requiredClaimsMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/requiredClaimsValue"
            }
        },
        "requiredClaimsValue": {
            "type": "string"
        },
        "TagMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "TagValue": {
            "type": "string"
        },
        "AssociateIdentityProviderConfigResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "CreateAccessEntryRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "kubernetesGroups": {
                    "$ref": "#/$defs/StringList"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "username": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateAccessEntryResponse": {
            "type": "object",
            "properties": {
                "accessEntry": {
                    "$ref": "#/$defs/AccessEntry"
                }
            }
        },
        "AccessEntry": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "kubernetesGroups": {
                    "$ref": "#/$defs/StringList"
                },
                "accessEntryArn": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "modifiedAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "username": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateAddonRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "addonVersion": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccountRoleArn": {
                    "$ref": "#/$defs/RoleArn"
                },
                "resolveConflicts": {
                    "$ref": "#/$defs/ResolveConflicts"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "configurationValues": {
                    "$ref": "#/$defs/String"
                },
                "podIdentityAssociations": {
                    "$ref": "#/$defs/AddonPodIdentityAssociationsList"
                }
            }
        },
        "ClusterName": {
            "type": "string"
        },
        "RoleArn": {
            "type": "string"
        },
        "ResolveConflicts": {
            "enum": [
                "OVERWRITE",
                "NONE",
                "PRESERVE"
            ]
        },
        "AddonPodIdentityAssociationsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonPodIdentityAssociations"
            }
        },
        "AddonPodIdentityAssociations": {
            "type": "object",
            "properties": {
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateAddonResponse": {
            "type": "object",
            "properties": {
                "addon": {
                    "$ref": "#/$defs/Addon"
                }
            }
        },
        "Addon": {
            "type": "object",
            "properties": {
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "status": {
                    "$ref": "#/$defs/AddonStatus"
                },
                "addonVersion": {
                    "$ref": "#/$defs/String"
                },
                "health": {
                    "$ref": "#/$defs/AddonHealth"
                },
                "addonArn": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "modifiedAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "serviceAccountRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "publisher": {
                    "$ref": "#/$defs/String"
                },
                "owner": {
                    "$ref": "#/$defs/String"
                },
                "marketplaceInformation": {
                    "$ref": "#/$defs/MarketplaceInformation"
                },
                "configurationValues": {
                    "$ref": "#/$defs/String"
                },
                "podIdentityAssociations": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "AddonStatus": {
            "enum": [
                "CREATING",
                "ACTIVE",
                "CREATE_FAILED",
                "UPDATING",
                "DELETING",
                "DELETE_FAILED",
                "DEGRADED",
                "UPDATE_FAILED"
            ]
        },
        "AddonHealth": {
            "type": "object",
            "properties": {
                "issues": {
                    "$ref": "#/$defs/AddonIssueList"
                }
            }
        },
        "AddonIssueList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonIssue"
            }
        },
        "AddonIssue": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/$defs/AddonIssueCode"
                },
                "message": {
                    "$ref": "#/$defs/String"
                },
                "resourceIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "AddonIssueCode": {
            "enum": [
                "ACCESS_DENIED",
                "INTERNAL_FAILURE",
                "CLUSTER_UNREACHABLE",
                "INSUFFICIENT_NUMBER_OF_REPLICAS",
                "CONFIGURATION_CONFLICT",
                "ADMISSION_REQUEST_DENIED",
                "UNSUPPORTED_ADDON_MODIFICATION",
                "K8S_RESOURCE_NOT_FOUND",
                "ADDON_SUBSCRIPTION_NEEDED",
                "ADDON_PERMISSION_FAILURE"
            ]
        },
        "MarketplaceInformation": {
            "type": "object",
            "properties": {
                "productId": {
                    "$ref": "#/$defs/String"
                },
                "productUrl": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateClusterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/ClusterName"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "resourcesVpcConfig": {
                    "$ref": "#/$defs/VpcConfigRequest"
                },
                "kubernetesNetworkConfig": {
                    "$ref": "#/$defs/KubernetesNetworkConfigRequest"
                },
                "logging": {
                    "$ref": "#/$defs/Logging"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "encryptionConfig": {
                    "$ref": "#/$defs/EncryptionConfigList"
                },
                "outpostConfig": {
                    "$ref": "#/$defs/OutpostConfigRequest"
                },
                "accessConfig": {
                    "$ref": "#/$defs/CreateAccessConfigRequest"
                },
                "bootstrapSelfManagedAddons": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "upgradePolicy": {
                    "$ref": "#/$defs/UpgradePolicyRequest"
                },
                "zonalShiftConfig": {
                    "$ref": "#/$defs/ZonalShiftConfigRequest"
                },
                "remoteNetworkConfig": {
                    "$ref": "#/$defs/RemoteNetworkConfigRequest"
                },
                "computeConfig": {
                    "$ref": "#/$defs/ComputeConfigRequest"
                },
                "storageConfig": {
                    "$ref": "#/$defs/StorageConfigRequest"
                }
            }
        },
        "VpcConfigRequest": {
            "type": "object",
            "properties": {
                "subnetIds": {
                    "$ref": "#/$defs/StringList"
                },
                "securityGroupIds": {
                    "$ref": "#/$defs/StringList"
                },
                "endpointPublicAccess": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "endpointPrivateAccess": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "publicAccessCidrs": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "BoxedBoolean": {
            "type": "boolean"
        },
        "KubernetesNetworkConfigRequest": {
            "type": "object",
            "properties": {
                "serviceIpv4Cidr": {
                    "$ref": "#/$defs/String"
                },
                "ipFamily": {
                    "$ref": "#/$defs/IpFamily"
                },
                "elasticLoadBalancing": {
                    "$ref": "#/$defs/ElasticLoadBalancing"
                }
            }
        },
        "IpFamily": {
            "enum": [
                "IPV4",
                "IPV6"
            ]
        },
        "ElasticLoadBalancing": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "Logging": {
            "type": "object",
            "properties": {
                "clusterLogging": {
                    "$ref": "#/$defs/LogSetups"
                }
            }
        },
        "LogSetups": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/LogSetup"
            }
        },
        "LogSetup": {
            "type": "object",
            "properties": {
                "types": {
                    "$ref": "#/$defs/LogTypes"
                },
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "LogTypes": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/LogType"
            }
        },
        "LogType": {
            "enum": [
                "API",
                "AUDIT",
                "AUTHENTICATOR",
                "CONTROLLER_MANAGER",
                "SCHEDULER"
            ]
        },
        "OutpostConfigRequest": {
            "type": "object",
            "properties": {
                "outpostArns": {
                    "$ref": "#/$defs/StringList"
                },
                "controlPlaneInstanceType": {
                    "$ref": "#/$defs/String"
                },
                "controlPlanePlacement": {
                    "$ref": "#/$defs/ControlPlanePlacementRequest"
                }
            }
        },
        "ControlPlanePlacementRequest": {
            "type": "object",
            "properties": {
                "groupName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateAccessConfigRequest": {
            "type": "object",
            "properties": {
                "bootstrapClusterCreatorAdminPermissions": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "authenticationMode": {
                    "$ref": "#/$defs/AuthenticationMode"
                }
            }
        },
        "AuthenticationMode": {
            "enum": [
                "API",
                "API_AND_CONFIG_MAP",
                "CONFIG_MAP"
            ]
        },
        "UpgradePolicyRequest": {
            "type": "object",
            "properties": {
                "supportType": {
                    "$ref": "#/$defs/SupportType"
                }
            }
        },
        "SupportType": {
            "enum": [
                "STANDARD",
                "EXTENDED"
            ]
        },
        "ZonalShiftConfigRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "RemoteNetworkConfigRequest": {
            "type": "object",
            "properties": {
                "remoteNodeNetworks": {
                    "$ref": "#/$defs/RemoteNodeNetworkList"
                },
                "remotePodNetworks": {
                    "$ref": "#/$defs/RemotePodNetworkList"
                }
            }
        },
        "RemoteNodeNetworkList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RemoteNodeNetwork"
            }
        },
        "RemoteNodeNetwork": {
            "type": "object",
            "properties": {
                "cidrs": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "RemotePodNetworkList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RemotePodNetwork"
            }
        },
        "RemotePodNetwork": {
            "type": "object",
            "properties": {
                "cidrs": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ComputeConfigRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "nodePools": {
                    "$ref": "#/$defs/StringList"
                },
                "nodeRoleArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "StorageConfigRequest": {
            "type": "object",
            "properties": {
                "blockStorage": {
                    "$ref": "#/$defs/BlockStorage"
                }
            }
        },
        "BlockStorage": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "CreateClusterResponse": {
            "type": "object",
            "properties": {
                "cluster": {
                    "$ref": "#/$defs/Cluster"
                }
            }
        },
        "Cluster": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "endpoint": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "resourcesVpcConfig": {
                    "$ref": "#/$defs/VpcConfigResponse"
                },
                "kubernetesNetworkConfig": {
                    "$ref": "#/$defs/KubernetesNetworkConfigResponse"
                },
                "logging": {
                    "$ref": "#/$defs/Logging"
                },
                "identity": {
                    "$ref": "#/$defs/Identity"
                },
                "status": {
                    "$ref": "#/$defs/ClusterStatus"
                },
                "certificateAuthority": {
                    "$ref": "#/$defs/Certificate"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "platformVersion": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "encryptionConfig": {
                    "$ref": "#/$defs/EncryptionConfigList"
                },
                "connectorConfig": {
                    "$ref": "#/$defs/ConnectorConfigResponse"
                },
                "id": {
                    "$ref": "#/$defs/String"
                },
                "health": {
                    "$ref": "#/$defs/ClusterHealth"
                },
                "outpostConfig": {
                    "$ref": "#/$defs/OutpostConfigResponse"
                },
                "accessConfig": {
                    "$ref": "#/$defs/AccessConfigResponse"
                },
                "upgradePolicy": {
                    "$ref": "#/$defs/UpgradePolicyResponse"
                },
                "zonalShiftConfig": {
                    "$ref": "#/$defs/ZonalShiftConfigResponse"
                },
                "remoteNetworkConfig": {
                    "$ref": "#/$defs/RemoteNetworkConfigResponse"
                },
                "computeConfig": {
                    "$ref": "#/$defs/ComputeConfigResponse"
                },
                "storageConfig": {
                    "$ref": "#/$defs/StorageConfigResponse"
                }
            }
        },
        "VpcConfigResponse": {
            "type": "object",
            "properties": {
                "subnetIds": {
                    "$ref": "#/$defs/StringList"
                },
                "securityGroupIds": {
                    "$ref": "#/$defs/StringList"
                },
                "clusterSecurityGroupId": {
                    "$ref": "#/$defs/String"
                },
                "vpcId": {
                    "$ref": "#/$defs/String"
                },
                "endpointPublicAccess": {
                    "$ref": "#/$defs/Boolean"
                },
                "endpointPrivateAccess": {
                    "$ref": "#/$defs/Boolean"
                },
                "publicAccessCidrs": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "Boolean": {
            "type": "boolean"
        },
        "KubernetesNetworkConfigResponse": {
            "type": "object",
            "properties": {
                "serviceIpv4Cidr": {
                    "$ref": "#/$defs/String"
                },
                "serviceIpv6Cidr": {
                    "$ref": "#/$defs/String"
                },
                "ipFamily": {
                    "$ref": "#/$defs/IpFamily"
                },
                "elasticLoadBalancing": {
                    "$ref": "#/$defs/ElasticLoadBalancing"
                }
            }
        },
        "Identity": {
            "type": "object",
            "properties": {
                "oidc": {
                    "$ref": "#/$defs/OIDC"
                }
            }
        },
        "OIDC": {
            "type": "object",
            "properties": {
                "issuer": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ClusterStatus": {
            "enum": [
                "CREATING",
                "ACTIVE",
                "DELETING",
                "FAILED",
                "UPDATING",
                "PENDING"
            ]
        },
        "Certificate": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ConnectorConfigResponse": {
            "type": "object",
            "properties": {
                "activationId": {
                    "$ref": "#/$defs/String"
                },
                "activationCode": {
                    "$ref": "#/$defs/String"
                },
                "activationExpiry": {
                    "$ref": "#/$defs/Timestamp"
                },
                "provider": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ClusterHealth": {
            "type": "object",
            "properties": {
                "issues": {
                    "$ref": "#/$defs/ClusterIssueList"
                }
            }
        },
        "ClusterIssueList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ClusterIssue"
            }
        },
        "ClusterIssue": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/$defs/ClusterIssueCode"
                },
                "message": {
                    "$ref": "#/$defs/String"
                },
                "resourceIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ClusterIssueCode": {
            "enum": [
                "ACCESS_DENIED",
                "CLUSTER_UNREACHABLE",
                "CONFIGURATION_CONFLICT",
                "INTERNAL_FAILURE",
                "RESOURCE_LIMIT_EXCEEDED",
                "RESOURCE_NOT_FOUND",
                "IAM_ROLE_NOT_FOUND",
                "VPC_NOT_FOUND",
                "INSUFFICIENT_FREE_ADDRESSES",
                "EC2_SERVICE_NOT_SUBSCRIBED",
                "EC2_SUBNET_NOT_FOUND",
                "EC2_SECURITY_GROUP_NOT_FOUND",
                "KMS_GRANT_REVOKED",
                "KMS_KEY_NOT_FOUND",
                "KMS_KEY_MARKED_FOR_DELETION",
                "KMS_KEY_DISABLED",
                "STS_REGIONAL_ENDPOINT_DISABLED",
                "UNSUPPORTED_VERSION",
                "OTHER"
            ]
        },
        "OutpostConfigResponse": {
            "type": "object",
            "properties": {
                "outpostArns": {
                    "$ref": "#/$defs/StringList"
                },
                "controlPlaneInstanceType": {
                    "$ref": "#/$defs/String"
                },
                "controlPlanePlacement": {
                    "$ref": "#/$defs/ControlPlanePlacementResponse"
                }
            }
        },
        "ControlPlanePlacementResponse": {
            "type": "object",
            "properties": {
                "groupName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "AccessConfigResponse": {
            "type": "object",
            "properties": {
                "bootstrapClusterCreatorAdminPermissions": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "authenticationMode": {
                    "$ref": "#/$defs/AuthenticationMode"
                }
            }
        },
        "UpgradePolicyResponse": {
            "type": "object",
            "properties": {
                "supportType": {
                    "$ref": "#/$defs/SupportType"
                }
            }
        },
        "ZonalShiftConfigResponse": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "RemoteNetworkConfigResponse": {
            "type": "object",
            "properties": {
                "remoteNodeNetworks": {
                    "$ref": "#/$defs/RemoteNodeNetworkList"
                },
                "remotePodNetworks": {
                    "$ref": "#/$defs/RemotePodNetworkList"
                }
            }
        },
        "ComputeConfigResponse": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "nodePools": {
                    "$ref": "#/$defs/StringList"
                },
                "nodeRoleArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "StorageConfigResponse": {
            "type": "object",
            "properties": {
                "blockStorage": {
                    "$ref": "#/$defs/BlockStorage"
                }
            }
        },
        "CreateEksAnywhereSubscriptionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionName"
                },
                "term": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionTerm"
                },
                "licenseQuantity": {
                    "$ref": "#/$defs/Integer"
                },
                "licenseType": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionLicenseType"
                },
                "autoRenew": {
                    "$ref": "#/$defs/Boolean"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "EksAnywhereSubscriptionName": {
            "type": "string"
        },
        "EksAnywhereSubscriptionTerm": {
            "type": "object",
            "properties": {
                "duration": {
                    "$ref": "#/$defs/Integer"
                },
                "unit": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionTermUnit"
                }
            }
        },
        "Integer": {
            "type": "integer",
            "format": "int32"
        },
        "EksAnywhereSubscriptionTermUnit": {
            "enum": [
                "MONTHS"
            ]
        },
        "EksAnywhereSubscriptionLicenseType": {
            "enum": [
                "Cluster"
            ]
        },
        "CreateEksAnywhereSubscriptionResponse": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/$defs/EksAnywhereSubscription"
                }
            }
        },
        "EksAnywhereSubscription": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "effectiveDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "expirationDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "licenseQuantity": {
                    "$ref": "#/$defs/Integer"
                },
                "licenseType": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionLicenseType"
                },
                "term": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionTerm"
                },
                "status": {
                    "$ref": "#/$defs/String"
                },
                "autoRenew": {
                    "$ref": "#/$defs/Boolean"
                },
                "licenseArns": {
                    "$ref": "#/$defs/StringList"
                },
                "licenses": {
                    "$ref": "#/$defs/LicenseList"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "LicenseList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/License"
            }
        },
        "License": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "token": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "CreateFargateProfileRequest": {
            "type": "object",
            "properties": {
                "fargateProfileName": {
                    "$ref": "#/$defs/String"
                },
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "podExecutionRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "selectors": {
                    "$ref": "#/$defs/FargateProfileSelectors"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "FargateProfileSelectors": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/FargateProfileSelector"
            }
        },
        "FargateProfileSelector": {
            "type": "object",
            "properties": {
                "namespace": {
                    "$ref": "#/$defs/String"
                },
                "labels": {
                    "$ref": "#/$defs/FargateProfileLabel"
                }
            }
        },
        "FargateProfileLabel": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/String"
            }
        },
        "CreateFargateProfileResponse": {
            "type": "object",
            "properties": {
                "fargateProfile": {
                    "$ref": "#/$defs/FargateProfile"
                }
            }
        },
        "FargateProfile": {
            "type": "object",
            "properties": {
                "fargateProfileName": {
                    "$ref": "#/$defs/String"
                },
                "fargateProfileArn": {
                    "$ref": "#/$defs/String"
                },
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "podExecutionRoleArn": {
                    "$ref": "#/$defs/String"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "selectors": {
                    "$ref": "#/$defs/FargateProfileSelectors"
                },
                "status": {
                    "$ref": "#/$defs/FargateProfileStatus"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "health": {
                    "$ref": "#/$defs/FargateProfileHealth"
                }
            }
        },
        "FargateProfileStatus": {
            "enum": [
                "CREATING",
                "ACTIVE",
                "DELETING",
                "CREATE_FAILED",
                "DELETE_FAILED"
            ]
        },
        "FargateProfileHealth": {
            "type": "object",
            "properties": {
                "issues": {
                    "$ref": "#/$defs/FargateProfileIssueList"
                }
            }
        },
        "FargateProfileIssueList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/FargateProfileIssue"
            }
        },
        "FargateProfileIssue": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/$defs/FargateProfileIssueCode"
                },
                "message": {
                    "$ref": "#/$defs/String"
                },
                "resourceIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "FargateProfileIssueCode": {
            "enum": [
                "POD_EXECUTION_ROLE_ALREADY_IN_USE",
                "ACCESS_DENIED",
                "CLUSTER_UNREACHABLE",
                "INTERNAL_FAILURE"
            ]
        },
        "CreateNodegroupRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "scalingConfig": {
                    "$ref": "#/$defs/NodegroupScalingConfig"
                },
                "diskSize": {
                    "$ref": "#/$defs/BoxedInteger"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "instanceTypes": {
                    "$ref": "#/$defs/StringList"
                },
                "amiType": {
                    "$ref": "#/$defs/AMITypes"
                },
                "remoteAccess": {
                    "$ref": "#/$defs/RemoteAccessConfig"
                },
                "nodeRole": {
                    "$ref": "#/$defs/String"
                },
                "labels": {
                    "$ref": "#/$defs/labelsMap"
                },
                "taints": {
                    "$ref": "#/$defs/taintsList"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "launchTemplate": {
                    "$ref": "#/$defs/LaunchTemplateSpecification"
                },
                "updateConfig": {
                    "$ref": "#/$defs/NodegroupUpdateConfig"
                },
                "nodeRepairConfig": {
                    "$ref": "#/$defs/NodeRepairConfig"
                },
                "capacityType": {
                    "$ref": "#/$defs/CapacityTypes"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "releaseVersion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodegroupScalingConfig": {
            "type": "object",
            "properties": {
                "minSize": {
                    "$ref": "#/$defs/ZeroCapacity"
                },
                "maxSize": {
                    "$ref": "#/$defs/Capacity"
                },
                "desiredSize": {
                    "$ref": "#/$defs/ZeroCapacity"
                }
            }
        },
        "ZeroCapacity": {
            "type": "integer",
            "format": "int32"
        },
        "Capacity": {
            "type": "integer",
            "format": "int32"
        },
        "BoxedInteger": {
            "type": "integer",
            "format": "int32"
        },
        "AMITypes": {
            "enum": [
                "AL2_x86_64",
                "AL2_x86_64_GPU",
                "AL2_ARM_64",
                "CUSTOM",
                "BOTTLEROCKET_ARM_64",
                "BOTTLEROCKET_x86_64",
                "BOTTLEROCKET_ARM_64_NVIDIA",
                "BOTTLEROCKET_x86_64_NVIDIA",
                "WINDOWS_CORE_2019_x86_64",
                "WINDOWS_FULL_2019_x86_64",
                "WINDOWS_CORE_2022_x86_64",
                "WINDOWS_FULL_2022_x86_64",
                "AL2023_x86_64_STANDARD",
                "AL2023_ARM_64_STANDARD",
                "AL2023_x86_64_NEURON",
                "AL2023_x86_64_NVIDIA"
            ]
        },
        "RemoteAccessConfig": {
            "type": "object",
            "properties": {
                "ec2SshKey": {
                    "$ref": "#/$defs/String"
                },
                "sourceSecurityGroups": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "labelsMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/labelValue"
            }
        },
        "labelValue": {
            "type": "string"
        },
        "taintsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Taint"
            }
        },
        "Taint": {
            "type": "object",
            "properties": {
                "key": {
                    "$ref": "#/$defs/taintKey"
                },
                "value": {
                    "$ref": "#/$defs/taintValue"
                },
                "effect": {
                    "$ref": "#/$defs/TaintEffect"
                }
            }
        },
        "taintKey": {
            "type": "string"
        },
        "taintValue": {
            "type": "string"
        },
        "TaintEffect": {
            "enum": [
                "NO_SCHEDULE",
                "NO_EXECUTE",
                "PREFER_NO_SCHEDULE"
            ]
        },
        "LaunchTemplateSpecification": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "id": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodegroupUpdateConfig": {
            "type": "object",
            "properties": {
                "maxUnavailable": {
                    "$ref": "#/$defs/NonZeroInteger"
                },
                "maxUnavailablePercentage": {
                    "$ref": "#/$defs/PercentCapacity"
                },
                "updateStrategy": {
                    "$ref": "#/$defs/NodegroupUpdateStrategies"
                }
            }
        },
        "NonZeroInteger": {
            "type": "integer",
            "format": "int32"
        },
        "PercentCapacity": {
            "type": "integer",
            "format": "int32"
        },
        "NodegroupUpdateStrategies": {
            "enum": [
                "DEFAULT",
                "MINIMAL"
            ]
        },
        "NodeRepairConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "$ref": "#/$defs/BoxedBoolean"
                }
            }
        },
        "CapacityTypes": {
            "enum": [
                "ON_DEMAND",
                "SPOT",
                "CAPACITY_BLOCK"
            ]
        },
        "CreateNodegroupResponse": {
            "type": "object",
            "properties": {
                "nodegroup": {
                    "$ref": "#/$defs/Nodegroup"
                }
            }
        },
        "Nodegroup": {
            "type": "object",
            "properties": {
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupArn": {
                    "$ref": "#/$defs/String"
                },
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "releaseVersion": {
                    "$ref": "#/$defs/String"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "modifiedAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "status": {
                    "$ref": "#/$defs/NodegroupStatus"
                },
                "capacityType": {
                    "$ref": "#/$defs/CapacityTypes"
                },
                "scalingConfig": {
                    "$ref": "#/$defs/NodegroupScalingConfig"
                },
                "instanceTypes": {
                    "$ref": "#/$defs/StringList"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "remoteAccess": {
                    "$ref": "#/$defs/RemoteAccessConfig"
                },
                "amiType": {
                    "$ref": "#/$defs/AMITypes"
                },
                "nodeRole": {
                    "$ref": "#/$defs/String"
                },
                "labels": {
                    "$ref": "#/$defs/labelsMap"
                },
                "taints": {
                    "$ref": "#/$defs/taintsList"
                },
                "resources": {
                    "$ref": "#/$defs/NodegroupResources"
                },
                "diskSize": {
                    "$ref": "#/$defs/BoxedInteger"
                },
                "health": {
                    "$ref": "#/$defs/NodegroupHealth"
                },
                "updateConfig": {
                    "$ref": "#/$defs/NodegroupUpdateConfig"
                },
                "nodeRepairConfig": {
                    "$ref": "#/$defs/NodeRepairConfig"
                },
                "launchTemplate": {
                    "$ref": "#/$defs/LaunchTemplateSpecification"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "NodegroupStatus": {
            "enum": [
                "CREATING",
                "ACTIVE",
                "UPDATING",
                "DELETING",
                "CREATE_FAILED",
                "DELETE_FAILED",
                "DEGRADED"
            ]
        },
        "NodegroupResources": {
            "type": "object",
            "properties": {
                "autoScalingGroups": {
                    "$ref": "#/$defs/AutoScalingGroupList"
                },
                "remoteAccessSecurityGroup": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "AutoScalingGroupList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AutoScalingGroup"
            }
        },
        "AutoScalingGroup": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "NodegroupHealth": {
            "type": "object",
            "properties": {
                "issues": {
                    "$ref": "#/$defs/IssueList"
                }
            }
        },
        "IssueList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Issue"
            }
        },
        "Issue": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/$defs/NodegroupIssueCode"
                },
                "message": {
                    "$ref": "#/$defs/String"
                },
                "resourceIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "NodegroupIssueCode": {
            "enum": [
                "AUTO_SCALING_GROUP_NOT_FOUND",
                "AUTO_SCALING_GROUP_INVALID_CONFIGURATION",
                "EC2_SECURITY_GROUP_NOT_FOUND",
                "EC2_SECURITY_GROUP_DELETION_FAILURE",
                "EC2_LAUNCH_TEMPLATE_NOT_FOUND",
                "EC2_LAUNCH_TEMPLATE_VERSION_MISMATCH",
                "EC2_SUBNET_NOT_FOUND",
                "EC2_SUBNET_INVALID_CONFIGURATION",
                "IAM_INSTANCE_PROFILE_NOT_FOUND",
                "EC2_SUBNET_MISSING_IPV6_ASSIGNMENT",
                "IAM_LIMIT_EXCEEDED",
                "IAM_NODE_ROLE_NOT_FOUND",
                "NODE_CREATION_FAILURE",
                "ASG_INSTANCE_LAUNCH_FAILURES",
                "INSTANCE_LIMIT_EXCEEDED",
                "INSUFFICIENT_FREE_ADDRESSES",
                "ACCESS_DENIED",
                "INTERNAL_FAILURE",
                "CLUSTER_UNREACHABLE",
                "AMI_ID_NOT_FOUND",
                "AUTO_SCALING_GROUP_OPT_IN_REQUIRED",
                "AUTO_SCALING_GROUP_RATE_LIMIT_EXCEEDED",
                "EC2_LAUNCH_TEMPLATE_DELETION_FAILURE",
                "EC2_LAUNCH_TEMPLATE_INVALID_CONFIGURATION",
                "EC2_LAUNCH_TEMPLATE_MAX_LIMIT_EXCEEDED",
                "EC2_SUBNET_LIST_TOO_LONG",
                "IAM_THROTTLING",
                "NODE_TERMINATION_FAILURE",
                "POD_EVICTION_FAILURE",
                "SOURCE_EC2_LAUNCH_TEMPLATE_NOT_FOUND",
                "LIMIT_EXCEEDED",
                "UNKNOWN",
                "AUTO_SCALING_GROUP_INSTANCE_REFRESH_ACTIVE",
                "KUBERNETES_LABEL_INVALID",
                "EC2_LAUNCH_TEMPLATE_VERSION_MAX_LIMIT_EXCEEDED",
                "EC2_INSTANCE_TYPE_DOES_NOT_EXIST"
            ]
        },
        "CreatePodIdentityAssociationRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "namespace": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "CreatePodIdentityAssociationResponse": {
            "type": "object",
            "properties": {
                "association": {
                    "$ref": "#/$defs/PodIdentityAssociation"
                }
            }
        },
        "PodIdentityAssociation": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "namespace": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "associationArn": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "createdAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "modifiedAt": {
                    "$ref": "#/$defs/Timestamp"
                },
                "ownerArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteAccessEntryRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteAccessEntryResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteAddonRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "preserve": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "DeleteAddonResponse": {
            "type": "object",
            "properties": {
                "addon": {
                    "$ref": "#/$defs/Addon"
                }
            }
        },
        "DeleteClusterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteClusterResponse": {
            "type": "object",
            "properties": {
                "cluster": {
                    "$ref": "#/$defs/Cluster"
                }
            }
        },
        "DeleteEksAnywhereSubscriptionRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteEksAnywhereSubscriptionResponse": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/$defs/EksAnywhereSubscription"
                }
            }
        },
        "DeleteFargateProfileRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "fargateProfileName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteFargateProfileResponse": {
            "type": "object",
            "properties": {
                "fargateProfile": {
                    "$ref": "#/$defs/FargateProfile"
                }
            }
        },
        "DeleteNodegroupRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeleteNodegroupResponse": {
            "type": "object",
            "properties": {
                "nodegroup": {
                    "$ref": "#/$defs/Nodegroup"
                }
            }
        },
        "DeletePodIdentityAssociationRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeletePodIdentityAssociationResponse": {
            "type": "object",
            "properties": {
                "association": {
                    "$ref": "#/$defs/PodIdentityAssociation"
                }
            }
        },
        "DeregisterClusterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DeregisterClusterResponse": {
            "type": "object",
            "properties": {
                "cluster": {
                    "$ref": "#/$defs/Cluster"
                }
            }
        },
        "DescribeAccessEntryRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeAccessEntryResponse": {
            "type": "object",
            "properties": {
                "accessEntry": {
                    "$ref": "#/$defs/AccessEntry"
                }
            }
        },
        "DescribeAddonRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeAddonResponse": {
            "type": "object",
            "properties": {
                "addon": {
                    "$ref": "#/$defs/Addon"
                }
            }
        },
        "DescribeAddonConfigurationRequest": {
            "type": "object",
            "properties": {
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "addonVersion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeAddonConfigurationResponse": {
            "type": "object",
            "properties": {
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "addonVersion": {
                    "$ref": "#/$defs/String"
                },
                "configurationSchema": {
                    "$ref": "#/$defs/String"
                },
                "podIdentityConfiguration": {
                    "$ref": "#/$defs/AddonPodIdentityConfigurationList"
                }
            }
        },
        "AddonPodIdentityConfigurationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonPodIdentityConfiguration"
            }
        },
        "AddonPodIdentityConfiguration": {
            "type": "object",
            "properties": {
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "recommendedManagedPolicies": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "DescribeAddonVersionsRequest": {
            "type": "object",
            "properties": {
                "kubernetesVersion": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/DescribeAddonVersionsRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "types": {
                    "$ref": "#/$defs/StringList"
                },
                "publishers": {
                    "$ref": "#/$defs/StringList"
                },
                "owners": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "DescribeAddonVersionsRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "DescribeAddonVersionsResponse": {
            "type": "object",
            "properties": {
                "addons": {
                    "$ref": "#/$defs/Addons"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "Addons": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonInfo"
            }
        },
        "AddonInfo": {
            "type": "object",
            "properties": {
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "type": {
                    "$ref": "#/$defs/String"
                },
                "addonVersions": {
                    "$ref": "#/$defs/AddonVersionInfoList"
                },
                "publisher": {
                    "$ref": "#/$defs/String"
                },
                "owner": {
                    "$ref": "#/$defs/String"
                },
                "marketplaceInformation": {
                    "$ref": "#/$defs/MarketplaceInformation"
                }
            }
        },
        "AddonVersionInfoList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonVersionInfo"
            }
        },
        "AddonVersionInfo": {
            "type": "object",
            "properties": {
                "addonVersion": {
                    "$ref": "#/$defs/String"
                },
                "architecture": {
                    "$ref": "#/$defs/StringList"
                },
                "computeTypes": {
                    "$ref": "#/$defs/StringList"
                },
                "compatibilities": {
                    "$ref": "#/$defs/Compatibilities"
                },
                "requiresConfiguration": {
                    "$ref": "#/$defs/Boolean"
                },
                "requiresIamPermissions": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "Compatibilities": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Compatibility"
            }
        },
        "Compatibility": {
            "type": "object",
            "properties": {
                "clusterVersion": {
                    "$ref": "#/$defs/String"
                },
                "platformVersions": {
                    "$ref": "#/$defs/StringList"
                },
                "defaultVersion": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "DescribeClusterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeClusterResponse": {
            "type": "object",
            "properties": {
                "cluster": {
                    "$ref": "#/$defs/Cluster"
                }
            }
        },
        "DescribeClusterVersionsRequest": {
            "type": "object",
            "properties": {
                "clusterType": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/DescribeClusterVersionMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "defaultOnly": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "includeAll": {
                    "$ref": "#/$defs/BoxedBoolean"
                },
                "clusterVersions": {
                    "$ref": "#/$defs/StringList"
                },
                "status": {
                    "$ref": "#/$defs/ClusterVersionStatus"
                },
                "versionStatus": {
                    "$ref": "#/$defs/VersionStatus"
                }
            }
        },
        "DescribeClusterVersionMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ClusterVersionStatus": {
            "enum": [
                "unsupported",
                "standard_support",
                "extended_support"
            ]
        },
        "VersionStatus": {
            "enum": [
                "UNSUPPORTED",
                "STANDARD_SUPPORT",
                "EXTENDED_SUPPORT"
            ]
        },
        "DescribeClusterVersionsResponse": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "clusterVersions": {
                    "$ref": "#/$defs/ClusterVersionList"
                }
            }
        },
        "ClusterVersionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ClusterVersionInformation"
            }
        },
        "ClusterVersionInformation": {
            "type": "object",
            "properties": {
                "clusterVersion": {
                    "$ref": "#/$defs/String"
                },
                "clusterType": {
                    "$ref": "#/$defs/String"
                },
                "defaultPlatformVersion": {
                    "$ref": "#/$defs/String"
                },
                "defaultVersion": {
                    "$ref": "#/$defs/Boolean"
                },
                "releaseDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "endOfStandardSupportDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "endOfExtendedSupportDate": {
                    "$ref": "#/$defs/Timestamp"
                },
                "status": {
                    "$ref": "#/$defs/ClusterVersionStatus"
                },
                "versionStatus": {
                    "$ref": "#/$defs/VersionStatus"
                },
                "kubernetesPatchVersion": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeEksAnywhereSubscriptionRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeEksAnywhereSubscriptionResponse": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/$defs/EksAnywhereSubscription"
                }
            }
        },
        "DescribeFargateProfileRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "fargateProfileName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeFargateProfileResponse": {
            "type": "object",
            "properties": {
                "fargateProfile": {
                    "$ref": "#/$defs/FargateProfile"
                }
            }
        },
        "DescribeIdentityProviderConfigRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "identityProviderConfig": {
                    "$ref": "#/$defs/IdentityProviderConfig"
                }
            }
        },
        "IdentityProviderConfig": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeIdentityProviderConfigResponse": {
            "type": "object",
            "properties": {
                "identityProviderConfig": {
                    "$ref": "#/$defs/IdentityProviderConfigResponse"
                }
            }
        },
        "IdentityProviderConfigResponse": {
            "type": "object",
            "properties": {
                "oidc": {
                    "$ref": "#/$defs/OidcIdentityProviderConfig"
                }
            }
        },
        "OidcIdentityProviderConfig": {
            "type": "object",
            "properties": {
                "identityProviderConfigName": {
                    "$ref": "#/$defs/String"
                },
                "identityProviderConfigArn": {
                    "$ref": "#/$defs/String"
                },
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "issuerUrl": {
                    "$ref": "#/$defs/String"
                },
                "clientId": {
                    "$ref": "#/$defs/String"
                },
                "usernameClaim": {
                    "$ref": "#/$defs/String"
                },
                "usernamePrefix": {
                    "$ref": "#/$defs/String"
                },
                "groupsClaim": {
                    "$ref": "#/$defs/String"
                },
                "groupsPrefix": {
                    "$ref": "#/$defs/String"
                },
                "requiredClaims": {
                    "$ref": "#/$defs/requiredClaimsMap"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                },
                "status": {
                    "$ref": "#/$defs/configStatus"
                }
            }
        },
        "configStatus": {
            "enum": [
                "CREATING",
                "DELETING",
                "ACTIVE"
            ]
        },
        "DescribeInsightRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "id": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeInsightResponse": {
            "type": "object",
            "properties": {
                "insight": {
                    "$ref": "#/$defs/Insight"
                }
            }
        },
        "Insight": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/String"
                },
                "category": {
                    "$ref": "#/$defs/Category"
                },
                "kubernetesVersion": {
                    "$ref": "#/$defs/String"
                },
                "lastRefreshTime": {
                    "$ref": "#/$defs/Timestamp"
                },
                "lastTransitionTime": {
                    "$ref": "#/$defs/Timestamp"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "insightStatus": {
                    "$ref": "#/$defs/InsightStatus"
                },
                "recommendation": {
                    "$ref": "#/$defs/String"
                },
                "additionalInfo": {
                    "$ref": "#/$defs/AdditionalInfoMap"
                },
                "resources": {
                    "$ref": "#/$defs/InsightResourceDetails"
                },
                "categorySpecificSummary": {
                    "$ref": "#/$defs/InsightCategorySpecificSummary"
                }
            }
        },
        "Category": {
            "enum": [
                "UPGRADE_READINESS"
            ]
        },
        "InsightStatus": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/InsightStatusValue"
                },
                "reason": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "InsightStatusValue": {
            "enum": [
                "PASSING",
                "WARNING",
                "ERROR",
                "UNKNOWN"
            ]
        },
        "AdditionalInfoMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/String"
            }
        },
        "InsightResourceDetails": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/InsightResourceDetail"
            }
        },
        "InsightResourceDetail": {
            "type": "object",
            "properties": {
                "insightStatus": {
                    "$ref": "#/$defs/InsightStatus"
                },
                "kubernetesResourceUri": {
                    "$ref": "#/$defs/String"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "InsightCategorySpecificSummary": {
            "type": "object",
            "properties": {
                "deprecationDetails": {
                    "$ref": "#/$defs/DeprecationDetails"
                },
                "addonCompatibilityDetails": {
                    "$ref": "#/$defs/AddonCompatibilityDetails"
                }
            }
        },
        "DeprecationDetails": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DeprecationDetail"
            }
        },
        "DeprecationDetail": {
            "type": "object",
            "properties": {
                "usage": {
                    "$ref": "#/$defs/String"
                },
                "replacedWith": {
                    "$ref": "#/$defs/String"
                },
                "stopServingVersion": {
                    "$ref": "#/$defs/String"
                },
                "startServingReplacementVersion": {
                    "$ref": "#/$defs/String"
                },
                "clientStats": {
                    "$ref": "#/$defs/ClientStats"
                }
            }
        },
        "ClientStats": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ClientStat"
            }
        },
        "ClientStat": {
            "type": "object",
            "properties": {
                "userAgent": {
                    "$ref": "#/$defs/String"
                },
                "numberOfRequestsLast30Days": {
                    "$ref": "#/$defs/Integer"
                },
                "lastRequestTime": {
                    "$ref": "#/$defs/Timestamp"
                }
            }
        },
        "AddonCompatibilityDetails": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AddonCompatibilityDetail"
            }
        },
        "AddonCompatibilityDetail": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "compatibleVersions": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "DescribeNodegroupRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeNodegroupResponse": {
            "type": "object",
            "properties": {
                "nodegroup": {
                    "$ref": "#/$defs/Nodegroup"
                }
            }
        },
        "DescribePodIdentityAssociationRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribePodIdentityAssociationResponse": {
            "type": "object",
            "properties": {
                "association": {
                    "$ref": "#/$defs/PodIdentityAssociation"
                }
            }
        },
        "DescribeUpdateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "updateId": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DescribeUpdateResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "DisassociateAccessPolicyRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "policyArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DisassociateAccessPolicyResponse": {
            "type": "object",
            "properties": {}
        },
        "DisassociateIdentityProviderConfigRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "identityProviderConfig": {
                    "$ref": "#/$defs/IdentityProviderConfig"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "DisassociateIdentityProviderConfigResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "ListAccessEntriesRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "associatedPolicyArn": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListAccessEntriesRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAccessEntriesRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListAccessEntriesResponse": {
            "type": "object",
            "properties": {
                "accessEntries": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAccessPoliciesRequest": {
            "type": "object",
            "properties": {
                "maxResults": {
                    "$ref": "#/$defs/ListAccessPoliciesRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAccessPoliciesRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListAccessPoliciesResponse": {
            "type": "object",
            "properties": {
                "accessPolicies": {
                    "$ref": "#/$defs/AccessPoliciesList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "AccessPoliciesList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AccessPolicy"
            }
        },
        "AccessPolicy": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "arn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAddonsRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListAddonsRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAddonsRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListAddonsResponse": {
            "type": "object",
            "properties": {
                "addons": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAssociatedAccessPoliciesRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListAssociatedAccessPoliciesRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListAssociatedAccessPoliciesRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListAssociatedAccessPoliciesResponse": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "associatedAccessPolicies": {
                    "$ref": "#/$defs/AssociatedAccessPoliciesList"
                }
            }
        },
        "AssociatedAccessPoliciesList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AssociatedAccessPolicy"
            }
        },
        "ListClustersRequest": {
            "type": "object",
            "properties": {
                "maxResults": {
                    "$ref": "#/$defs/ListClustersRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "include": {
                    "$ref": "#/$defs/IncludeClustersList"
                }
            }
        },
        "ListClustersRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "IncludeClustersList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "ListClustersResponse": {
            "type": "object",
            "properties": {
                "clusters": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListEksAnywhereSubscriptionsRequest": {
            "type": "object",
            "properties": {
                "maxResults": {
                    "$ref": "#/$defs/ListEksAnywhereSubscriptionsRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "includeStatus": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionStatusValues"
                }
            }
        },
        "ListEksAnywhereSubscriptionsRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "EksAnywhereSubscriptionStatusValues": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EksAnywhereSubscriptionStatus"
            }
        },
        "EksAnywhereSubscriptionStatus": {
            "enum": [
                "CREATING",
                "ACTIVE",
                "UPDATING",
                "EXPIRING",
                "EXPIRED",
                "DELETING"
            ]
        },
        "ListEksAnywhereSubscriptionsResponse": {
            "type": "object",
            "properties": {
                "subscriptions": {
                    "$ref": "#/$defs/EksAnywhereSubscriptionList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "EksAnywhereSubscriptionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EksAnywhereSubscription"
            }
        },
        "ListFargateProfilesRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/FargateProfilesRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "FargateProfilesRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListFargateProfilesResponse": {
            "type": "object",
            "properties": {
                "fargateProfileNames": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListIdentityProviderConfigsRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListIdentityProviderConfigsRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListIdentityProviderConfigsRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListIdentityProviderConfigsResponse": {
            "type": "object",
            "properties": {
                "identityProviderConfigs": {
                    "$ref": "#/$defs/IdentityProviderConfigs"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "IdentityProviderConfigs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/IdentityProviderConfig"
            }
        },
        "ListInsightsRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "filter": {
                    "$ref": "#/$defs/InsightsFilter"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListInsightsMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "InsightsFilter": {
            "type": "object",
            "properties": {
                "categories": {
                    "$ref": "#/$defs/CategoryList"
                },
                "kubernetesVersions": {
                    "$ref": "#/$defs/StringList"
                },
                "statuses": {
                    "$ref": "#/$defs/InsightStatusValueList"
                }
            }
        },
        "CategoryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Category"
            }
        },
        "InsightStatusValueList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/InsightStatusValue"
            }
        },
        "ListInsightsMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListInsightsResponse": {
            "type": "object",
            "properties": {
                "insights": {
                    "$ref": "#/$defs/InsightSummaries"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "InsightSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/InsightSummary"
            }
        },
        "InsightSummary": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "name": {
                    "$ref": "#/$defs/String"
                },
                "category": {
                    "$ref": "#/$defs/Category"
                },
                "kubernetesVersion": {
                    "$ref": "#/$defs/String"
                },
                "lastRefreshTime": {
                    "$ref": "#/$defs/Timestamp"
                },
                "lastTransitionTime": {
                    "$ref": "#/$defs/Timestamp"
                },
                "description": {
                    "$ref": "#/$defs/String"
                },
                "insightStatus": {
                    "$ref": "#/$defs/InsightStatus"
                }
            }
        },
        "ListNodegroupsRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListNodegroupsRequestMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListNodegroupsRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListNodegroupsResponse": {
            "type": "object",
            "properties": {
                "nodegroups": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListPodIdentityAssociationsRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "namespace": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListPodIdentityAssociationsMaxResults"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListPodIdentityAssociationsMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListPodIdentityAssociationsResponse": {
            "type": "object",
            "properties": {
                "associations": {
                    "$ref": "#/$defs/PodIdentityAssociationSummaries"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "PodIdentityAssociationSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/PodIdentityAssociationSummary"
            }
        },
        "PodIdentityAssociationSummary": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "namespace": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccount": {
                    "$ref": "#/$defs/String"
                },
                "associationArn": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "ownerArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "ListUpdatesRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListUpdatesRequestMaxResults"
                }
            }
        },
        "ListUpdatesRequestMaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListUpdatesResponse": {
            "type": "object",
            "properties": {
                "updateIds": {
                    "$ref": "#/$defs/StringList"
                },
                "nextToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "RegisterClusterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/ClusterName"
                },
                "connectorConfig": {
                    "$ref": "#/$defs/ConnectorConfigRequest"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "ConnectorConfigRequest": {
            "type": "object",
            "properties": {
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "provider": {
                    "$ref": "#/$defs/ConnectorConfigProvider"
                }
            }
        },
        "ConnectorConfigProvider": {
            "enum": [
                "EKS_ANYWHERE",
                "ANTHOS",
                "GKE",
                "AKS",
                "OPENSHIFT",
                "TANZU",
                "RANCHER",
                "EC2",
                "OTHER"
            ]
        },
        "RegisterClusterResponse": {
            "type": "object",
            "properties": {
                "cluster": {
                    "$ref": "#/$defs/Cluster"
                }
            }
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/String"
                },
                "tags": {
                    "$ref": "#/$defs/TagMap"
                }
            }
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/String"
                },
                "tagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "TagKey": {
            "type": "string"
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UpdateAccessEntryRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "principalArn": {
                    "$ref": "#/$defs/String"
                },
                "kubernetesGroups": {
                    "$ref": "#/$defs/StringList"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "username": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateAccessEntryResponse": {
            "type": "object",
            "properties": {
                "accessEntry": {
                    "$ref": "#/$defs/AccessEntry"
                }
            }
        },
        "UpdateAddonRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/ClusterName"
                },
                "addonName": {
                    "$ref": "#/$defs/String"
                },
                "addonVersion": {
                    "$ref": "#/$defs/String"
                },
                "serviceAccountRoleArn": {
                    "$ref": "#/$defs/RoleArn"
                },
                "resolveConflicts": {
                    "$ref": "#/$defs/ResolveConflicts"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "configurationValues": {
                    "$ref": "#/$defs/String"
                },
                "podIdentityAssociations": {
                    "$ref": "#/$defs/AddonPodIdentityAssociationsList"
                }
            }
        },
        "UpdateAddonResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "UpdateClusterConfigRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "resourcesVpcConfig": {
                    "$ref": "#/$defs/VpcConfigRequest"
                },
                "logging": {
                    "$ref": "#/$defs/Logging"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                },
                "accessConfig": {
                    "$ref": "#/$defs/UpdateAccessConfigRequest"
                },
                "upgradePolicy": {
                    "$ref": "#/$defs/UpgradePolicyRequest"
                },
                "zonalShiftConfig": {
                    "$ref": "#/$defs/ZonalShiftConfigRequest"
                },
                "computeConfig": {
                    "$ref": "#/$defs/ComputeConfigRequest"
                },
                "kubernetesNetworkConfig": {
                    "$ref": "#/$defs/KubernetesNetworkConfigRequest"
                },
                "storageConfig": {
                    "$ref": "#/$defs/StorageConfigRequest"
                }
            }
        },
        "UpdateAccessConfigRequest": {
            "type": "object",
            "properties": {
                "authenticationMode": {
                    "$ref": "#/$defs/AuthenticationMode"
                }
            }
        },
        "UpdateClusterConfigResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "UpdateClusterVersionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/String"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateClusterVersionResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "UpdateEksAnywhereSubscriptionRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "autoRenew": {
                    "$ref": "#/$defs/Boolean"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateEksAnywhereSubscriptionResponse": {
            "type": "object",
            "properties": {
                "subscription": {
                    "$ref": "#/$defs/EksAnywhereSubscription"
                }
            }
        },
        "UpdateNodegroupConfigRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "labels": {
                    "$ref": "#/$defs/UpdateLabelsPayload"
                },
                "taints": {
                    "$ref": "#/$defs/UpdateTaintsPayload"
                },
                "scalingConfig": {
                    "$ref": "#/$defs/NodegroupScalingConfig"
                },
                "updateConfig": {
                    "$ref": "#/$defs/NodegroupUpdateConfig"
                },
                "nodeRepairConfig": {
                    "$ref": "#/$defs/NodeRepairConfig"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateLabelsPayload": {
            "type": "object",
            "properties": {
                "addOrUpdateLabels": {
                    "$ref": "#/$defs/labelsMap"
                },
                "removeLabels": {
                    "$ref": "#/$defs/labelsKeyList"
                }
            }
        },
        "labelsKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/String"
            }
        },
        "UpdateTaintsPayload": {
            "type": "object",
            "properties": {
                "addOrUpdateTaints": {
                    "$ref": "#/$defs/taintsList"
                },
                "removeTaints": {
                    "$ref": "#/$defs/taintsList"
                }
            }
        },
        "UpdateNodegroupConfigResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "UpdateNodegroupVersionRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "nodegroupName": {
                    "$ref": "#/$defs/String"
                },
                "version": {
                    "$ref": "#/$defs/String"
                },
                "releaseVersion": {
                    "$ref": "#/$defs/String"
                },
                "launchTemplate": {
                    "$ref": "#/$defs/LaunchTemplateSpecification"
                },
                "force": {
                    "$ref": "#/$defs/Boolean"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdateNodegroupVersionResponse": {
            "type": "object",
            "properties": {
                "update": {
                    "$ref": "#/$defs/Update"
                }
            }
        },
        "UpdatePodIdentityAssociationRequest": {
            "type": "object",
            "properties": {
                "clusterName": {
                    "$ref": "#/$defs/String"
                },
                "associationId": {
                    "$ref": "#/$defs/String"
                },
                "roleArn": {
                    "$ref": "#/$defs/String"
                },
                "clientRequestToken": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "UpdatePodIdentityAssociationResponse": {
            "type": "object",
            "properties": {
                "association": {
                    "$ref": "#/$defs/PodIdentityAssociation"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://eks-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "stringEquals",
                                                            "argv": [
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "name"
                                                                    ]
                                                                },
                                                                "aws"
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "https://fips.eks.{Region}.amazonaws.com",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "stringEquals",
                                                            "argv": [
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "name"
                                                                    ]
                                                                },
                                                                "aws-us-gov"
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "https://eks.{Region}.amazonaws.com",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://eks-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://eks.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://eks.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}
