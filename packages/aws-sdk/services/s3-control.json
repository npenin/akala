{
    "name": "s3",
    "commands": [
        {
            "name": "AssociateAccessGrantsIdentityCenter",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/accessgrantsinstance/identitycenter"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/AssociateAccessGrantsIdentityCenterRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateAccessGrant",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/accessgrantsinstance/grant"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessGrantResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessGrantRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateAccessGrantsInstance",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/accessgrantsinstance"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessGrantsInstanceResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessGrantsInstanceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateAccessGrantsLocation",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/accessgrantsinstance/location"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessGrantsLocationResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessGrantsLocationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accesspoint/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessPointResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateAccessPointForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateAccessPointForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateAccessPointForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateBucket",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateBucketResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateBucketRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateJob",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/jobs"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateJobResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateJobRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateMultiRegionAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/async-requests/mrap/create"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateMultiRegionAccessPointResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateMultiRegionAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateStorageLensGroup",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/storagelensgroup"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateStorageLensGroupRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessGrant",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessGrantId": "route.AccessGrantId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accessgrantsinstance/grant/{AccessGrantId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.AccessGrantId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessGrantRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessGrantsInstance",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accessgrantsinstance"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessGrantsInstanceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessGrantsInstanceResourcePolicy",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accessgrantsinstance/resourcepolicy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessGrantsInstanceResourcePolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessGrantsLocation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessGrantsLocationId": "route.AccessGrantsLocationId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.AccessGrantsLocationId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessGrantsLocationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accesspoint/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessPointForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessPointForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessPointPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accesspoint/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessPointPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteAccessPointPolicyForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteAccessPointPolicyForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteBucket",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/bucket/{Bucket}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteBucketRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteBucketLifecycleConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/bucket/{Bucket}/lifecycleconfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteBucketLifecycleConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteBucketPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/bucket/{Bucket}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteBucketPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteBucketReplication",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/bucket/{Bucket}/replication"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteBucketReplicationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteBucketTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/bucket/{Bucket}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteBucketTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteJobTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/jobs/{JobId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteJobTaggingResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteJobTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteMultiRegionAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/async-requests/mrap/delete"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteMultiRegionAccessPointResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteMultiRegionAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeletePublicAccessBlock",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/configuration/publicAccessBlock"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeletePublicAccessBlockRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteStorageLensConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/storagelens/{ConfigId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteStorageLensConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteStorageLensConfigurationTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/storagelens/{ConfigId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteStorageLensConfigurationTaggingResult"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteStorageLensConfigurationTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteStorageLensGroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/storagelensgroup/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteStorageLensGroupRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DescribeJob",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/jobs/{JobId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeJobResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeJobRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DescribeMultiRegionAccessPointOperation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "RequestTokenARN": "route.RequestTokenARN",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/async-requests/mrap{/RequestTokenARN*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeMultiRegionAccessPointOperationResult"
                    },
                    "inject": [
                        "param.0.RequestTokenARN",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeMultiRegionAccessPointOperationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "DissociateAccessGrantsIdentityCenter",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/accessgrantsinstance/identitycenter"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DissociateAccessGrantsIdentityCenterRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessGrant",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessGrantId": "route.AccessGrantId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/grant/{AccessGrantId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessGrantResult"
                    },
                    "inject": [
                        "param.0.AccessGrantId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessGrantRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessGrantsInstance",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessGrantsInstanceResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessGrantsInstanceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessGrantsInstanceForPrefix",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/prefix"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessGrantsInstanceForPrefixResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessGrantsInstanceForPrefixRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessGrantsInstanceResourcePolicy",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/resourcepolicy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessGrantsInstanceResourcePolicyResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessGrantsInstanceResourcePolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessGrantsLocation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessGrantsLocationId": "route.AccessGrantsLocationId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessGrantsLocationResult"
                    },
                    "inject": [
                        "param.0.AccessGrantsLocationId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessGrantsLocationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspoint/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointConfigurationForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/configuration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointConfigurationForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointConfigurationForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspoint/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointPolicyResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointPolicyForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointPolicyForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointPolicyForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointPolicyStatus",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspoint/{Name}/policyStatus"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointPolicyStatusResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointPolicyStatusRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetAccessPointPolicyStatusForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/policyStatus"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccessPointPolicyStatusForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccessPointPolicyStatusForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucket",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucketLifecycleConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}/lifecycleconfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketLifecycleConfigurationResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketLifecycleConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucketPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketPolicyResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucketReplication",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}/replication"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketReplicationResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketReplicationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucketTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketTaggingResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetBucketVersioning",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket/{Bucket}/versioning"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetBucketVersioningResult"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetBucketVersioningRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetDataAccess",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/dataaccess"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetDataAccessResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetDataAccessRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetJobTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/jobs/{JobId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetJobTaggingResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetJobTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMultiRegionAccessPoint",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/mrap/instances{/Name*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMultiRegionAccessPointResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMultiRegionAccessPointRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMultiRegionAccessPointPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/mrap/instances{/Name*}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMultiRegionAccessPointPolicyResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMultiRegionAccessPointPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMultiRegionAccessPointPolicyStatus",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/mrap/instances{/Name*}/policystatus"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMultiRegionAccessPointPolicyStatusResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMultiRegionAccessPointPolicyStatusRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMultiRegionAccessPointRoutes",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Mrap": "route.Mrap",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/mrap/instances{/Mrap*}/routes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMultiRegionAccessPointRoutesResult"
                    },
                    "inject": [
                        "param.0.Mrap",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMultiRegionAccessPointRoutesRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetPublicAccessBlock",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/configuration/publicAccessBlock"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetPublicAccessBlockOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetPublicAccessBlockRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetStorageLensConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/storagelens/{ConfigId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStorageLensConfigurationResult"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStorageLensConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetStorageLensConfigurationTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/storagelens/{ConfigId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStorageLensConfigurationTaggingResult"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStorageLensConfigurationTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "GetStorageLensGroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/storagelensgroup/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStorageLensGroupResult"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStorageLensGroupRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessGrants",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/grants"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessGrantsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessGrantsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessGrantsInstances",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstances"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessGrantsInstancesResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessGrantsInstancesRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessGrantsLocations",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/locations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessGrantsLocationsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessGrantsLocationsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessPoints",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspoint"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessPointsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessPointsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListAccessPointsForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accesspointforobjectlambda"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListAccessPointsForObjectLambdaResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListAccessPointsForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListCallerAccessGrants",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/accessgrantsinstance/caller/grants"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListCallerAccessGrantsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListCallerAccessGrantsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListJobs",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/jobs"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListJobsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListJobsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMultiRegionAccessPoints",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/mrap/instances"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMultiRegionAccessPointsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMultiRegionAccessPointsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListRegionalBuckets",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/bucket"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListRegionalBucketsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListRegionalBucketsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListStorageLensConfigurations",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/storagelens"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListStorageLensConfigurationsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListStorageLensConfigurationsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListStorageLensGroups",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/v20180820/storagelensgroup"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListStorageLensGroupsResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListStorageLensGroupsRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/v20180820/tags{/ResourceArn*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResult"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutAccessGrantsInstanceResourcePolicy",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accessgrantsinstance/resourcepolicy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutAccessGrantsInstanceResourcePolicyResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutAccessGrantsInstanceResourcePolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutAccessPointConfigurationForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/configuration"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutAccessPointConfigurationForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutAccessPointPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accesspoint/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutAccessPointPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutAccessPointPolicyForObjectLambda",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accesspointforobjectlambda/{Name}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutAccessPointPolicyForObjectLambdaRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutBucketLifecycleConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}/lifecycleconfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutBucketLifecycleConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutBucketPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}/policy"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutBucketPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutBucketReplication",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}/replication"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutBucketReplicationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutBucketTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutBucketTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutBucketVersioning",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Bucket": "route.Bucket",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/bucket/{Bucket}/versioning"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Bucket",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutBucketVersioningRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutJobTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/jobs/{JobId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutJobTaggingResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutJobTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutMultiRegionAccessPointPolicy",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/v20180820/async-requests/mrap/put-policy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutMultiRegionAccessPointPolicyResult"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutMultiRegionAccessPointPolicyRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutPublicAccessBlock",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "PUT",
                    "route": "/v20180820/configuration/publicAccessBlock"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutPublicAccessBlockRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutStorageLensConfiguration",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/storagelens/{ConfigId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutStorageLensConfigurationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "PutStorageLensConfigurationTagging",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ConfigId": "route.ConfigId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/storagelens/{ConfigId}/tagging"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutStorageLensConfigurationTaggingResult"
                    },
                    "inject": [
                        "param.0.ConfigId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutStorageLensConfigurationTaggingRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "SubmitMultiRegionAccessPointRoutes",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Mrap": "route.Mrap",
                            "...": "body"
                        }
                    ],
                    "method": "PATCH",
                    "route": "/v20180820/mrap/instances{/Mrap*}/routes"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/SubmitMultiRegionAccessPointRoutesResult"
                    },
                    "inject": [
                        "param.0.Mrap",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/SubmitMultiRegionAccessPointRoutesRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v20180820/tags{/ResourceArn*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResult"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/v20180820/tags{/ResourceArn*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResult"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateAccessGrantsLocation",
            "config": {
                "http": {
                    "inject": [
                        {
                            "AccessGrantsLocationId": "route.AccessGrantsLocationId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateAccessGrantsLocationResult"
                    },
                    "inject": [
                        "param.0.AccessGrantsLocationId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateAccessGrantsLocationRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateJobPriority",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v20180820/jobs/{JobId}/priority"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateJobPriorityResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateJobPriorityRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateJobStatus",
            "config": {
                "http": {
                    "inject": [
                        {
                            "JobId": "route.JobId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/v20180820/jobs/{JobId}/status"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateJobStatusResult"
                    },
                    "inject": [
                        "param.0.JobId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateJobStatusRequest"
                        }
                    }
                }
            }
        },
        {
            "name": "UpdateStorageLensGroup",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/v20180820/storagelensgroup/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateStorageLensGroupRequest"
                        }
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "AssociateAccessGrantsIdentityCenterRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "IdentityCenterArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                }
            }
        },
        "AccountId": {
            "type": "string"
        },
        "IdentityCenterArn": {
            "type": "string"
        },
        "CreateAccessGrantResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantId": {
                    "$ref": "#/$defs/AccessGrantId"
                },
                "AccessGrantArn": {
                    "$ref": "#/$defs/AccessGrantArn"
                },
                "Grantee": {
                    "$ref": "#/$defs/Grantee"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationConfiguration": {
                    "$ref": "#/$defs/AccessGrantsLocationConfiguration"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                }
            }
        },
        "CreationTimestamp": {
            "type": "string",
            "format": "date-time"
        },
        "AccessGrantId": {
            "type": "string"
        },
        "AccessGrantArn": {
            "type": "string"
        },
        "Grantee": {
            "type": "object",
            "properties": {
                "GranteeType": {
                    "$ref": "#/$defs/GranteeType"
                },
                "GranteeIdentifier": {
                    "$ref": "#/$defs/GranteeIdentifier"
                }
            }
        },
        "GranteeType": {
            "enum": [
                "DIRECTORY_USER",
                "DIRECTORY_GROUP",
                "IAM"
            ]
        },
        "GranteeIdentifier": {
            "type": "string"
        },
        "AccessGrantsLocationId": {
            "type": "string"
        },
        "AccessGrantsLocationConfiguration": {
            "type": "object",
            "properties": {
                "S3SubPrefix": {
                    "$ref": "#/$defs/S3Prefix"
                }
            }
        },
        "S3Prefix": {
            "type": "string"
        },
        "Permission": {
            "enum": [
                "READ",
                "WRITE",
                "READWRITE"
            ]
        },
        "IdentityCenterApplicationArn": {
            "type": "string"
        },
        "CreateAccessGrantRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationConfiguration": {
                    "$ref": "#/$defs/AccessGrantsLocationConfiguration"
                },
                "Grantee": {
                    "$ref": "#/$defs/Grantee"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                },
                "S3PrefixType": {
                    "$ref": "#/$defs/S3PrefixType"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "S3PrefixType": {
            "enum": [
                "Object"
            ]
        },
        "TagList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Tag"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "Key": {
                    "$ref": "#/$defs/TagKeyString"
                },
                "Value": {
                    "$ref": "#/$defs/TagValueString"
                }
            }
        },
        "TagKeyString": {
            "type": "string"
        },
        "TagValueString": {
            "type": "string"
        },
        "CreateAccessGrantsInstanceResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantsInstanceId": {
                    "$ref": "#/$defs/AccessGrantsInstanceId"
                },
                "AccessGrantsInstanceArn": {
                    "$ref": "#/$defs/AccessGrantsInstanceArn"
                },
                "IdentityCenterArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterInstanceArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "AccessGrantsInstanceId": {
            "type": "string"
        },
        "AccessGrantsInstanceArn": {
            "type": "string"
        },
        "CreateAccessGrantsInstanceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "IdentityCenterArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "CreateAccessGrantsLocationResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationArn": {
                    "$ref": "#/$defs/AccessGrantsLocationArn"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                }
            }
        },
        "AccessGrantsLocationArn": {
            "type": "string"
        },
        "IAMRoleArn": {
            "type": "string"
        },
        "CreateAccessGrantsLocationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "CreateAccessPointResult": {
            "type": "object",
            "properties": {
                "AccessPointArn": {
                    "$ref": "#/$defs/S3AccessPointArn"
                },
                "Alias": {
                    "$ref": "#/$defs/Alias"
                }
            }
        },
        "S3AccessPointArn": {
            "type": "string"
        },
        "Alias": {
            "type": "string"
        },
        "CreateAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "VpcConfiguration": {
                    "$ref": "#/$defs/VpcConfiguration"
                },
                "PublicAccessBlockConfiguration": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "BucketAccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "AccessPointName": {
            "type": "string"
        },
        "BucketName": {
            "type": "string"
        },
        "VpcConfiguration": {
            "type": "object",
            "properties": {
                "VpcId": {
                    "$ref": "#/$defs/VpcId"
                }
            }
        },
        "VpcId": {
            "type": "string"
        },
        "PublicAccessBlockConfiguration": {
            "type": "object",
            "properties": {
                "BlockPublicAcls": {
                    "$ref": "#/$defs/Setting"
                },
                "IgnorePublicAcls": {
                    "$ref": "#/$defs/Setting"
                },
                "BlockPublicPolicy": {
                    "$ref": "#/$defs/Setting"
                },
                "RestrictPublicBuckets": {
                    "$ref": "#/$defs/Setting"
                }
            }
        },
        "Setting": {
            "type": "boolean"
        },
        "CreateAccessPointForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "ObjectLambdaAccessPointArn": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointArn"
                },
                "Alias": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointAlias"
                }
            }
        },
        "ObjectLambdaAccessPointArn": {
            "type": "string"
        },
        "ObjectLambdaAccessPointAlias": {
            "type": "object",
            "properties": {
                "Value": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointAliasValue"
                },
                "Status": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointAliasStatus"
                }
            }
        },
        "ObjectLambdaAccessPointAliasValue": {
            "type": "string"
        },
        "ObjectLambdaAccessPointAliasStatus": {
            "enum": [
                "PROVISIONING",
                "READY"
            ]
        },
        "CreateAccessPointForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                },
                "Configuration": {
                    "$ref": "#/$defs/ObjectLambdaConfiguration"
                }
            }
        },
        "ObjectLambdaAccessPointName": {
            "type": "string"
        },
        "ObjectLambdaConfiguration": {
            "type": "object",
            "properties": {
                "SupportingAccessPoint": {
                    "$ref": "#/$defs/ObjectLambdaSupportingAccessPointArn"
                },
                "CloudWatchMetricsEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "AllowedFeatures": {
                    "$ref": "#/$defs/ObjectLambdaAllowedFeaturesList"
                },
                "TransformationConfigurations": {
                    "$ref": "#/$defs/ObjectLambdaTransformationConfigurationsList"
                }
            }
        },
        "ObjectLambdaSupportingAccessPointArn": {
            "type": "string"
        },
        "Boolean": {
            "type": "boolean"
        },
        "ObjectLambdaAllowedFeaturesList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ObjectLambdaAllowedFeature"
            }
        },
        "ObjectLambdaAllowedFeature": {
            "enum": [
                "GetObjectRange",
                "GetObjectPartNumber",
                "HeadObjectRange",
                "HeadObjectPartNumber"
            ]
        },
        "ObjectLambdaTransformationConfigurationsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ObjectLambdaTransformationConfiguration"
            }
        },
        "ObjectLambdaTransformationConfiguration": {
            "type": "object",
            "properties": {
                "Actions": {
                    "$ref": "#/$defs/ObjectLambdaTransformationConfigurationActionsList"
                },
                "ContentTransformation": {
                    "$ref": "#/$defs/ObjectLambdaContentTransformation"
                }
            }
        },
        "ObjectLambdaTransformationConfigurationActionsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ObjectLambdaTransformationConfigurationAction"
            }
        },
        "ObjectLambdaTransformationConfigurationAction": {
            "enum": [
                "GetObject",
                "HeadObject",
                "ListObjects",
                "ListObjectsV2"
            ]
        },
        "ObjectLambdaContentTransformation": {
            "type": "object",
            "properties": {
                "AwsLambda": {
                    "$ref": "#/$defs/AwsLambdaTransformation"
                }
            }
        },
        "AwsLambdaTransformation": {
            "type": "object",
            "properties": {
                "FunctionArn": {
                    "$ref": "#/$defs/FunctionArnString"
                },
                "FunctionPayload": {
                    "$ref": "#/$defs/AwsLambdaTransformationPayload"
                }
            }
        },
        "FunctionArnString": {
            "type": "string"
        },
        "AwsLambdaTransformationPayload": {
            "type": "string"
        },
        "CreateBucketResult": {
            "type": "object",
            "properties": {
                "Location": {
                    "$ref": "#/$defs/Location"
                },
                "BucketArn": {
                    "$ref": "#/$defs/S3RegionalBucketArn"
                }
            }
        },
        "Location": {
            "type": "string"
        },
        "S3RegionalBucketArn": {
            "type": "string"
        },
        "CreateBucketRequest": {
            "type": "object",
            "properties": {
                "ACL": {
                    "$ref": "#/$defs/BucketCannedACL"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "CreateBucketConfiguration": {
                    "$ref": "#/$defs/CreateBucketConfiguration"
                },
                "GrantFullControl": {
                    "$ref": "#/$defs/GrantFullControl"
                },
                "GrantRead": {
                    "$ref": "#/$defs/GrantRead"
                },
                "GrantReadACP": {
                    "$ref": "#/$defs/GrantReadACP"
                },
                "GrantWrite": {
                    "$ref": "#/$defs/GrantWrite"
                },
                "GrantWriteACP": {
                    "$ref": "#/$defs/GrantWriteACP"
                },
                "ObjectLockEnabledForBucket": {
                    "$ref": "#/$defs/ObjectLockEnabledForBucket"
                },
                "OutpostId": {
                    "$ref": "#/$defs/NonEmptyMaxLength64String"
                }
            }
        },
        "BucketCannedACL": {
            "enum": [
                "private",
                "public_read",
                "public_read_write",
                "authenticated_read"
            ]
        },
        "CreateBucketConfiguration": {
            "type": "object",
            "properties": {
                "LocationConstraint": {
                    "$ref": "#/$defs/BucketLocationConstraint"
                }
            }
        },
        "BucketLocationConstraint": {
            "enum": [
                "EU",
                "eu_west_1",
                "us_west_1",
                "us_west_2",
                "ap_south_1",
                "ap_southeast_1",
                "ap_southeast_2",
                "ap_northeast_1",
                "sa_east_1",
                "cn_north_1",
                "eu_central_1"
            ]
        },
        "GrantFullControl": {
            "type": "string"
        },
        "GrantRead": {
            "type": "string"
        },
        "GrantReadACP": {
            "type": "string"
        },
        "GrantWrite": {
            "type": "string"
        },
        "GrantWriteACP": {
            "type": "string"
        },
        "ObjectLockEnabledForBucket": {
            "type": "boolean"
        },
        "NonEmptyMaxLength64String": {
            "type": "string"
        },
        "CreateJobResult": {
            "type": "object",
            "properties": {
                "JobId": {
                    "$ref": "#/$defs/JobId"
                }
            }
        },
        "JobId": {
            "type": "string"
        },
        "CreateJobRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ConfirmationRequired": {
                    "$ref": "#/$defs/ConfirmationRequired"
                },
                "Operation": {
                    "$ref": "#/$defs/JobOperation"
                },
                "Report": {
                    "$ref": "#/$defs/JobReport"
                },
                "ClientRequestToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength64String"
                },
                "Manifest": {
                    "$ref": "#/$defs/JobManifest"
                },
                "Description": {
                    "$ref": "#/$defs/NonEmptyMaxLength256String"
                },
                "Priority": {
                    "$ref": "#/$defs/JobPriority"
                },
                "RoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                },
                "Tags": {
                    "$ref": "#/$defs/S3TagSet"
                },
                "ManifestGenerator": {
                    "$ref": "#/$defs/JobManifestGenerator"
                }
            }
        },
        "ConfirmationRequired": {
            "type": "boolean"
        },
        "JobOperation": {
            "type": "object",
            "properties": {
                "LambdaInvoke": {
                    "$ref": "#/$defs/LambdaInvokeOperation"
                },
                "S3PutObjectCopy": {
                    "$ref": "#/$defs/S3CopyObjectOperation"
                },
                "S3PutObjectAcl": {
                    "$ref": "#/$defs/S3SetObjectAclOperation"
                },
                "S3PutObjectTagging": {
                    "$ref": "#/$defs/S3SetObjectTaggingOperation"
                },
                "S3DeleteObjectTagging": {
                    "$ref": "#/$defs/S3DeleteObjectTaggingOperation"
                },
                "S3InitiateRestoreObject": {
                    "$ref": "#/$defs/S3InitiateRestoreObjectOperation"
                },
                "S3PutObjectLegalHold": {
                    "$ref": "#/$defs/S3SetObjectLegalHoldOperation"
                },
                "S3PutObjectRetention": {
                    "$ref": "#/$defs/S3SetObjectRetentionOperation"
                },
                "S3ReplicateObject": {
                    "$ref": "#/$defs/S3ReplicateObjectOperation"
                }
            }
        },
        "LambdaInvokeOperation": {
            "type": "object",
            "properties": {
                "FunctionArn": {
                    "$ref": "#/$defs/FunctionArnString"
                },
                "InvocationSchemaVersion": {
                    "$ref": "#/$defs/NonEmptyMaxLength64String"
                },
                "UserArguments": {
                    "$ref": "#/$defs/UserArguments"
                }
            }
        },
        "UserArguments": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/MaxLength1024String"
            }
        },
        "MaxLength1024String": {
            "type": "string"
        },
        "S3CopyObjectOperation": {
            "type": "object",
            "properties": {
                "TargetResource": {
                    "$ref": "#/$defs/S3RegionalOrS3ExpressBucketArnString"
                },
                "CannedAccessControlList": {
                    "$ref": "#/$defs/S3CannedAccessControlList"
                },
                "AccessControlGrants": {
                    "$ref": "#/$defs/S3GrantList"
                },
                "MetadataDirective": {
                    "$ref": "#/$defs/S3MetadataDirective"
                },
                "ModifiedSinceConstraint": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "NewObjectMetadata": {
                    "$ref": "#/$defs/S3ObjectMetadata"
                },
                "NewObjectTagging": {
                    "$ref": "#/$defs/S3TagSet"
                },
                "RedirectLocation": {
                    "$ref": "#/$defs/NonEmptyMaxLength2048String"
                },
                "RequesterPays": {
                    "$ref": "#/$defs/Boolean"
                },
                "StorageClass": {
                    "$ref": "#/$defs/S3StorageClass"
                },
                "UnModifiedSinceConstraint": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "SSEAwsKmsKeyId": {
                    "$ref": "#/$defs/KmsKeyArnString"
                },
                "TargetKeyPrefix": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "ObjectLockLegalHoldStatus": {
                    "$ref": "#/$defs/S3ObjectLockLegalHoldStatus"
                },
                "ObjectLockMode": {
                    "$ref": "#/$defs/S3ObjectLockMode"
                },
                "ObjectLockRetainUntilDate": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "BucketKeyEnabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "ChecksumAlgorithm": {
                    "$ref": "#/$defs/S3ChecksumAlgorithm"
                }
            }
        },
        "S3RegionalOrS3ExpressBucketArnString": {
            "type": "string"
        },
        "S3CannedAccessControlList": {
            "enum": [
                "PRIVATE",
                "PUBLIC_READ",
                "PUBLIC_READ_WRITE",
                "AWS_EXEC_READ",
                "AUTHENTICATED_READ",
                "BUCKET_OWNER_READ",
                "BUCKET_OWNER_FULL_CONTROL"
            ]
        },
        "S3GrantList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3Grant"
            }
        },
        "S3Grant": {
            "type": "object",
            "properties": {
                "Grantee": {
                    "$ref": "#/$defs/S3Grantee"
                },
                "Permission": {
                    "$ref": "#/$defs/S3Permission"
                }
            }
        },
        "S3Grantee": {
            "type": "object",
            "properties": {
                "TypeIdentifier": {
                    "$ref": "#/$defs/S3GranteeTypeIdentifier"
                },
                "Identifier": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "DisplayName": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "S3GranteeTypeIdentifier": {
            "enum": [
                "CANONICAL",
                "EMAIL_ADDRESS",
                "GROUP"
            ]
        },
        "NonEmptyMaxLength1024String": {
            "type": "string"
        },
        "S3Permission": {
            "enum": [
                "FULL_CONTROL",
                "READ",
                "WRITE",
                "READ_ACP",
                "WRITE_ACP"
            ]
        },
        "S3MetadataDirective": {
            "enum": [
                "COPY",
                "REPLACE"
            ]
        },
        "TimeStamp": {
            "type": "string",
            "format": "date-time"
        },
        "S3ObjectMetadata": {
            "type": "object",
            "properties": {
                "CacheControl": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "ContentDisposition": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "ContentEncoding": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "ContentLanguage": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "UserMetadata": {
                    "$ref": "#/$defs/S3UserMetadata"
                },
                "ContentLength": {
                    "$ref": "#/$defs/S3ContentLength"
                },
                "ContentMD5": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "ContentType": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "HttpExpiresDate": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "RequesterCharged": {
                    "$ref": "#/$defs/Boolean"
                },
                "SSEAlgorithm": {
                    "$ref": "#/$defs/S3SSEAlgorithm"
                }
            }
        },
        "S3UserMetadata": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/MaxLength1024String"
            }
        },
        "S3ContentLength": {
            "type": "integer",
            "format": "int64"
        },
        "S3SSEAlgorithm": {
            "enum": [
                "AES256",
                "KMS"
            ]
        },
        "S3TagSet": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3Tag"
            }
        },
        "S3Tag": {
            "type": "object",
            "properties": {
                "Key": {
                    "$ref": "#/$defs/TagKeyString"
                },
                "Value": {
                    "$ref": "#/$defs/TagValueString"
                }
            }
        },
        "NonEmptyMaxLength2048String": {
            "type": "string"
        },
        "S3StorageClass": {
            "enum": [
                "STANDARD",
                "STANDARD_IA",
                "ONEZONE_IA",
                "GLACIER",
                "INTELLIGENT_TIERING",
                "DEEP_ARCHIVE",
                "GLACIER_IR"
            ]
        },
        "KmsKeyArnString": {
            "type": "string"
        },
        "S3ObjectLockLegalHoldStatus": {
            "enum": [
                "OFF",
                "ON"
            ]
        },
        "S3ObjectLockMode": {
            "enum": [
                "COMPLIANCE",
                "GOVERNANCE"
            ]
        },
        "S3ChecksumAlgorithm": {
            "enum": [
                "CRC32",
                "CRC32C",
                "SHA1",
                "SHA256"
            ]
        },
        "S3SetObjectAclOperation": {
            "type": "object",
            "properties": {
                "AccessControlPolicy": {
                    "$ref": "#/$defs/S3AccessControlPolicy"
                }
            }
        },
        "S3AccessControlPolicy": {
            "type": "object",
            "properties": {
                "AccessControlList": {
                    "$ref": "#/$defs/S3AccessControlList"
                },
                "CannedAccessControlList": {
                    "$ref": "#/$defs/S3CannedAccessControlList"
                }
            }
        },
        "S3AccessControlList": {
            "type": "object",
            "properties": {
                "Owner": {
                    "$ref": "#/$defs/S3ObjectOwner"
                },
                "Grants": {
                    "$ref": "#/$defs/S3GrantList"
                }
            }
        },
        "S3ObjectOwner": {
            "type": "object",
            "properties": {
                "ID": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "DisplayName": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "S3SetObjectTaggingOperation": {
            "type": "object",
            "properties": {
                "TagSet": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "S3DeleteObjectTaggingOperation": {
            "type": "object",
            "properties": {}
        },
        "S3InitiateRestoreObjectOperation": {
            "type": "object",
            "properties": {
                "ExpirationInDays": {
                    "$ref": "#/$defs/S3ExpirationInDays"
                },
                "GlacierJobTier": {
                    "$ref": "#/$defs/S3GlacierJobTier"
                }
            }
        },
        "S3ExpirationInDays": {
            "type": "integer",
            "format": "int32"
        },
        "S3GlacierJobTier": {
            "enum": [
                "BULK",
                "STANDARD"
            ]
        },
        "S3SetObjectLegalHoldOperation": {
            "type": "object",
            "properties": {
                "LegalHold": {
                    "$ref": "#/$defs/S3ObjectLockLegalHold"
                }
            }
        },
        "S3ObjectLockLegalHold": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/S3ObjectLockLegalHoldStatus"
                }
            }
        },
        "S3SetObjectRetentionOperation": {
            "type": "object",
            "properties": {
                "BypassGovernanceRetention": {
                    "$ref": "#/$defs/Boolean"
                },
                "Retention": {
                    "$ref": "#/$defs/S3Retention"
                }
            }
        },
        "S3Retention": {
            "type": "object",
            "properties": {
                "RetainUntilDate": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "Mode": {
                    "$ref": "#/$defs/S3ObjectLockRetentionMode"
                }
            }
        },
        "S3ObjectLockRetentionMode": {
            "enum": [
                "COMPLIANCE",
                "GOVERNANCE"
            ]
        },
        "S3ReplicateObjectOperation": {
            "type": "object",
            "properties": {}
        },
        "JobReport": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/S3BucketArnString"
                },
                "Format": {
                    "$ref": "#/$defs/JobReportFormat"
                },
                "Enabled": {
                    "$ref": "#/$defs/Boolean"
                },
                "Prefix": {
                    "$ref": "#/$defs/ReportPrefixString"
                },
                "ReportScope": {
                    "$ref": "#/$defs/JobReportScope"
                }
            }
        },
        "S3BucketArnString": {
            "type": "string"
        },
        "JobReportFormat": {
            "enum": [
                "Report_CSV_20180820"
            ]
        },
        "ReportPrefixString": {
            "type": "string"
        },
        "JobReportScope": {
            "enum": [
                "AllTasks",
                "FailedTasksOnly"
            ]
        },
        "JobManifest": {
            "type": "object",
            "properties": {
                "Spec": {
                    "$ref": "#/$defs/JobManifestSpec"
                },
                "Location": {
                    "$ref": "#/$defs/JobManifestLocation"
                }
            }
        },
        "JobManifestSpec": {
            "type": "object",
            "properties": {
                "Format": {
                    "$ref": "#/$defs/JobManifestFormat"
                },
                "Fields": {
                    "$ref": "#/$defs/JobManifestFieldList"
                }
            }
        },
        "JobManifestFormat": {
            "enum": [
                "S3BatchOperations_CSV_20180820",
                "S3InventoryReport_CSV_20161130"
            ]
        },
        "JobManifestFieldList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/JobManifestFieldName"
            }
        },
        "JobManifestFieldName": {
            "enum": [
                "Ignore",
                "Bucket",
                "Key",
                "VersionId"
            ]
        },
        "JobManifestLocation": {
            "type": "object",
            "properties": {
                "ObjectArn": {
                    "$ref": "#/$defs/S3KeyArnString"
                },
                "ObjectVersionId": {
                    "$ref": "#/$defs/S3ObjectVersionId"
                },
                "ETag": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "S3KeyArnString": {
            "type": "string"
        },
        "S3ObjectVersionId": {
            "type": "string"
        },
        "NonEmptyMaxLength256String": {
            "type": "string"
        },
        "JobPriority": {
            "type": "integer",
            "format": "int32"
        },
        "JobManifestGenerator": {
            "type": "object",
            "properties": {
                "S3JobManifestGenerator": {
                    "$ref": "#/$defs/S3JobManifestGenerator"
                }
            }
        },
        "S3JobManifestGenerator": {
            "type": "object",
            "properties": {
                "ExpectedBucketOwner": {
                    "$ref": "#/$defs/AccountId"
                },
                "SourceBucket": {
                    "$ref": "#/$defs/S3BucketArnString"
                },
                "ManifestOutputLocation": {
                    "$ref": "#/$defs/S3ManifestOutputLocation"
                },
                "Filter": {
                    "$ref": "#/$defs/JobManifestGeneratorFilter"
                },
                "EnableManifestOutput": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "S3ManifestOutputLocation": {
            "type": "object",
            "properties": {
                "ExpectedManifestBucketOwner": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/S3BucketArnString"
                },
                "ManifestPrefix": {
                    "$ref": "#/$defs/ManifestPrefixString"
                },
                "ManifestEncryption": {
                    "$ref": "#/$defs/GeneratedManifestEncryption"
                },
                "ManifestFormat": {
                    "$ref": "#/$defs/GeneratedManifestFormat"
                }
            }
        },
        "ManifestPrefixString": {
            "type": "string"
        },
        "GeneratedManifestEncryption": {
            "type": "object",
            "properties": {
                "SSES3": {
                    "$ref": "#/$defs/SSES3Encryption"
                },
                "SSEKMS": {
                    "$ref": "#/$defs/SSEKMSEncryption"
                }
            }
        },
        "SSES3Encryption": {
            "type": "object",
            "properties": {}
        },
        "SSEKMSEncryption": {
            "type": "object",
            "properties": {
                "KeyId": {
                    "$ref": "#/$defs/KmsKeyArnString"
                }
            }
        },
        "GeneratedManifestFormat": {
            "enum": [
                "S3InventoryReport_CSV_20211130"
            ]
        },
        "JobManifestGeneratorFilter": {
            "type": "object",
            "properties": {
                "EligibleForReplication": {
                    "$ref": "#/$defs/Boolean"
                },
                "CreatedAfter": {
                    "$ref": "#/$defs/ObjectCreationTime"
                },
                "CreatedBefore": {
                    "$ref": "#/$defs/ObjectCreationTime"
                },
                "ObjectReplicationStatuses": {
                    "$ref": "#/$defs/ReplicationStatusFilterList"
                },
                "KeyNameConstraint": {
                    "$ref": "#/$defs/KeyNameConstraint"
                },
                "ObjectSizeGreaterThanBytes": {
                    "$ref": "#/$defs/ObjectSizeGreaterThanBytes"
                },
                "ObjectSizeLessThanBytes": {
                    "$ref": "#/$defs/ObjectSizeLessThanBytes"
                },
                "MatchAnyStorageClass": {
                    "$ref": "#/$defs/StorageClassList"
                }
            }
        },
        "ObjectCreationTime": {
            "type": "string",
            "format": "date-time"
        },
        "ReplicationStatusFilterList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ReplicationStatus"
            }
        },
        "ReplicationStatus": {
            "enum": [
                "COMPLETED",
                "FAILED",
                "REPLICA",
                "NONE"
            ]
        },
        "KeyNameConstraint": {
            "type": "object",
            "properties": {
                "MatchAnyPrefix": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024StringList"
                },
                "MatchAnySuffix": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024StringList"
                },
                "MatchAnySubstring": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024StringList"
                }
            }
        },
        "NonEmptyMaxLength1024StringList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/NonEmptyMaxLength1024String"
            }
        },
        "ObjectSizeGreaterThanBytes": {
            "type": "integer",
            "format": "int64"
        },
        "ObjectSizeLessThanBytes": {
            "type": "integer",
            "format": "int64"
        },
        "StorageClassList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3StorageClass"
            }
        },
        "CreateMultiRegionAccessPointResult": {
            "type": "object",
            "properties": {
                "RequestTokenARN": {
                    "$ref": "#/$defs/AsyncRequestTokenARN"
                }
            }
        },
        "AsyncRequestTokenARN": {
            "type": "string"
        },
        "CreateMultiRegionAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ClientToken": {
                    "$ref": "#/$defs/MultiRegionAccessPointClientToken"
                },
                "Details": {
                    "$ref": "#/$defs/CreateMultiRegionAccessPointInput"
                }
            }
        },
        "MultiRegionAccessPointClientToken": {
            "type": "string"
        },
        "CreateMultiRegionAccessPointInput": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                },
                "PublicAccessBlock": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "Regions": {
                    "$ref": "#/$defs/RegionCreationList"
                }
            }
        },
        "MultiRegionAccessPointName": {
            "type": "string"
        },
        "RegionCreationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Region"
            }
        },
        "Region": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "BucketAccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "CreateStorageLensGroupRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "StorageLensGroup": {
                    "$ref": "#/$defs/StorageLensGroup"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "StorageLensGroup": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/StorageLensGroupName"
                },
                "Filter": {
                    "$ref": "#/$defs/StorageLensGroupFilter"
                },
                "StorageLensGroupArn": {
                    "$ref": "#/$defs/StorageLensGroupArn"
                }
            }
        },
        "StorageLensGroupName": {
            "type": "string"
        },
        "StorageLensGroupFilter": {
            "type": "object",
            "properties": {
                "MatchAnyPrefix": {
                    "$ref": "#/$defs/MatchAnyPrefix"
                },
                "MatchAnySuffix": {
                    "$ref": "#/$defs/MatchAnySuffix"
                },
                "MatchAnyTag": {
                    "$ref": "#/$defs/MatchAnyTag"
                },
                "MatchObjectAge": {
                    "$ref": "#/$defs/MatchObjectAge"
                },
                "MatchObjectSize": {
                    "$ref": "#/$defs/MatchObjectSize"
                },
                "And": {
                    "$ref": "#/$defs/StorageLensGroupAndOperator"
                },
                "Or": {
                    "$ref": "#/$defs/StorageLensGroupOrOperator"
                }
            }
        },
        "MatchAnyPrefix": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Prefix"
            }
        },
        "Prefix": {
            "type": "string"
        },
        "MatchAnySuffix": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Suffix"
            }
        },
        "Suffix": {
            "type": "string"
        },
        "MatchAnyTag": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3Tag"
            }
        },
        "MatchObjectAge": {
            "type": "object",
            "properties": {
                "DaysGreaterThan": {
                    "$ref": "#/$defs/ObjectAgeValue"
                },
                "DaysLessThan": {
                    "$ref": "#/$defs/ObjectAgeValue"
                }
            }
        },
        "ObjectAgeValue": {
            "type": "integer",
            "format": "int32"
        },
        "MatchObjectSize": {
            "type": "object",
            "properties": {
                "BytesGreaterThan": {
                    "$ref": "#/$defs/ObjectSizeValue"
                },
                "BytesLessThan": {
                    "$ref": "#/$defs/ObjectSizeValue"
                }
            }
        },
        "ObjectSizeValue": {
            "type": "integer",
            "format": "int64"
        },
        "StorageLensGroupAndOperator": {
            "type": "object",
            "properties": {
                "MatchAnyPrefix": {
                    "$ref": "#/$defs/MatchAnyPrefix"
                },
                "MatchAnySuffix": {
                    "$ref": "#/$defs/MatchAnySuffix"
                },
                "MatchAnyTag": {
                    "$ref": "#/$defs/MatchAnyTag"
                },
                "MatchObjectAge": {
                    "$ref": "#/$defs/MatchObjectAge"
                },
                "MatchObjectSize": {
                    "$ref": "#/$defs/MatchObjectSize"
                }
            }
        },
        "StorageLensGroupOrOperator": {
            "type": "object",
            "properties": {
                "MatchAnyPrefix": {
                    "$ref": "#/$defs/MatchAnyPrefix"
                },
                "MatchAnySuffix": {
                    "$ref": "#/$defs/MatchAnySuffix"
                },
                "MatchAnyTag": {
                    "$ref": "#/$defs/MatchAnyTag"
                },
                "MatchObjectAge": {
                    "$ref": "#/$defs/MatchObjectAge"
                },
                "MatchObjectSize": {
                    "$ref": "#/$defs/MatchObjectSize"
                }
            }
        },
        "StorageLensGroupArn": {
            "type": "string"
        },
        "DeleteAccessGrantRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantId": {
                    "$ref": "#/$defs/AccessGrantId"
                }
            }
        },
        "DeleteAccessGrantsInstanceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "DeleteAccessGrantsInstanceResourcePolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "DeleteAccessGrantsLocationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                }
            }
        },
        "DeleteAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                }
            }
        },
        "DeleteAccessPointForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "DeleteAccessPointPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                }
            }
        },
        "DeleteAccessPointPolicyForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "DeleteBucketRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "DeleteBucketLifecycleConfigurationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "DeleteBucketPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "DeleteBucketReplicationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "DeleteBucketTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "DeleteJobTaggingResult": {
            "type": "object",
            "properties": {}
        },
        "DeleteJobTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                }
            }
        },
        "DeleteMultiRegionAccessPointResult": {
            "type": "object",
            "properties": {
                "RequestTokenARN": {
                    "$ref": "#/$defs/AsyncRequestTokenARN"
                }
            }
        },
        "DeleteMultiRegionAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ClientToken": {
                    "$ref": "#/$defs/MultiRegionAccessPointClientToken"
                },
                "Details": {
                    "$ref": "#/$defs/DeleteMultiRegionAccessPointInput"
                }
            }
        },
        "DeleteMultiRegionAccessPointInput": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                }
            }
        },
        "DeletePublicAccessBlockRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "DeleteStorageLensConfigurationRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "ConfigId": {
            "type": "string"
        },
        "DeleteStorageLensConfigurationTaggingResult": {
            "type": "object",
            "properties": {}
        },
        "DeleteStorageLensConfigurationTaggingRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "DeleteStorageLensGroupRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/StorageLensGroupName"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "DescribeJobResult": {
            "type": "object",
            "properties": {
                "Job": {
                    "$ref": "#/$defs/JobDescriptor"
                }
            }
        },
        "JobDescriptor": {
            "type": "object",
            "properties": {
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "ConfirmationRequired": {
                    "$ref": "#/$defs/ConfirmationRequired"
                },
                "Description": {
                    "$ref": "#/$defs/NonEmptyMaxLength256String"
                },
                "JobArn": {
                    "$ref": "#/$defs/JobArn"
                },
                "Status": {
                    "$ref": "#/$defs/JobStatus"
                },
                "Manifest": {
                    "$ref": "#/$defs/JobManifest"
                },
                "Operation": {
                    "$ref": "#/$defs/JobOperation"
                },
                "Priority": {
                    "$ref": "#/$defs/JobPriority"
                },
                "ProgressSummary": {
                    "$ref": "#/$defs/JobProgressSummary"
                },
                "StatusUpdateReason": {
                    "$ref": "#/$defs/JobStatusUpdateReason"
                },
                "FailureReasons": {
                    "$ref": "#/$defs/JobFailureList"
                },
                "Report": {
                    "$ref": "#/$defs/JobReport"
                },
                "CreationTime": {
                    "$ref": "#/$defs/JobCreationTime"
                },
                "TerminationDate": {
                    "$ref": "#/$defs/JobTerminationDate"
                },
                "RoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                },
                "SuspendedDate": {
                    "$ref": "#/$defs/SuspendedDate"
                },
                "SuspendedCause": {
                    "$ref": "#/$defs/SuspendedCause"
                },
                "ManifestGenerator": {
                    "$ref": "#/$defs/JobManifestGenerator"
                },
                "GeneratedManifestDescriptor": {
                    "$ref": "#/$defs/S3GeneratedManifestDescriptor"
                }
            }
        },
        "JobArn": {
            "type": "string"
        },
        "JobStatus": {
            "enum": [
                "Active",
                "Cancelled",
                "Cancelling",
                "Complete",
                "Completing",
                "Failed",
                "Failing",
                "New",
                "Paused",
                "Pausing",
                "Preparing",
                "Ready",
                "Suspended"
            ]
        },
        "JobProgressSummary": {
            "type": "object",
            "properties": {
                "TotalNumberOfTasks": {
                    "$ref": "#/$defs/JobTotalNumberOfTasks"
                },
                "NumberOfTasksSucceeded": {
                    "$ref": "#/$defs/JobNumberOfTasksSucceeded"
                },
                "NumberOfTasksFailed": {
                    "$ref": "#/$defs/JobNumberOfTasksFailed"
                },
                "Timers": {
                    "$ref": "#/$defs/JobTimers"
                }
            }
        },
        "JobTotalNumberOfTasks": {
            "type": "integer",
            "format": "int64"
        },
        "JobNumberOfTasksSucceeded": {
            "type": "integer",
            "format": "int64"
        },
        "JobNumberOfTasksFailed": {
            "type": "integer",
            "format": "int64"
        },
        "JobTimers": {
            "type": "object",
            "properties": {
                "ElapsedTimeInActiveSeconds": {
                    "$ref": "#/$defs/JobTimeInStateSeconds"
                }
            }
        },
        "JobTimeInStateSeconds": {
            "type": "integer",
            "format": "int64"
        },
        "JobStatusUpdateReason": {
            "type": "string"
        },
        "JobFailureList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/JobFailure"
            }
        },
        "JobFailure": {
            "type": "object",
            "properties": {
                "FailureCode": {
                    "$ref": "#/$defs/JobFailureCode"
                },
                "FailureReason": {
                    "$ref": "#/$defs/JobFailureReason"
                }
            }
        },
        "JobFailureCode": {
            "type": "string"
        },
        "JobFailureReason": {
            "type": "string"
        },
        "JobCreationTime": {
            "type": "string",
            "format": "date-time"
        },
        "JobTerminationDate": {
            "type": "string",
            "format": "date-time"
        },
        "SuspendedDate": {
            "type": "string",
            "format": "date-time"
        },
        "SuspendedCause": {
            "type": "string"
        },
        "S3GeneratedManifestDescriptor": {
            "type": "object",
            "properties": {
                "Format": {
                    "$ref": "#/$defs/GeneratedManifestFormat"
                },
                "Location": {
                    "$ref": "#/$defs/JobManifestLocation"
                }
            }
        },
        "DescribeJobRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                }
            }
        },
        "DescribeMultiRegionAccessPointOperationResult": {
            "type": "object",
            "properties": {
                "AsyncOperation": {
                    "$ref": "#/$defs/AsyncOperation"
                }
            }
        },
        "AsyncOperation": {
            "type": "object",
            "properties": {
                "CreationTime": {
                    "$ref": "#/$defs/AsyncCreationTimestamp"
                },
                "Operation": {
                    "$ref": "#/$defs/AsyncOperationName"
                },
                "RequestTokenARN": {
                    "$ref": "#/$defs/AsyncRequestTokenARN"
                },
                "RequestParameters": {
                    "$ref": "#/$defs/AsyncRequestParameters"
                },
                "RequestStatus": {
                    "$ref": "#/$defs/AsyncRequestStatus"
                },
                "ResponseDetails": {
                    "$ref": "#/$defs/AsyncResponseDetails"
                }
            }
        },
        "AsyncCreationTimestamp": {
            "type": "string",
            "format": "date-time"
        },
        "AsyncOperationName": {
            "enum": [
                "CreateMultiRegionAccessPoint",
                "DeleteMultiRegionAccessPoint",
                "PutMultiRegionAccessPointPolicy"
            ]
        },
        "AsyncRequestParameters": {
            "type": "object",
            "properties": {
                "CreateMultiRegionAccessPointRequest": {
                    "$ref": "#/$defs/CreateMultiRegionAccessPointInput"
                },
                "DeleteMultiRegionAccessPointRequest": {
                    "$ref": "#/$defs/DeleteMultiRegionAccessPointInput"
                },
                "PutMultiRegionAccessPointPolicyRequest": {
                    "$ref": "#/$defs/PutMultiRegionAccessPointPolicyInput"
                }
            }
        },
        "PutMultiRegionAccessPointPolicyInput": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                },
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "Policy": {
            "type": "string"
        },
        "AsyncRequestStatus": {
            "type": "string"
        },
        "AsyncResponseDetails": {
            "type": "object",
            "properties": {
                "MultiRegionAccessPointDetails": {
                    "$ref": "#/$defs/MultiRegionAccessPointsAsyncResponse"
                },
                "ErrorDetails": {
                    "$ref": "#/$defs/AsyncErrorDetails"
                }
            }
        },
        "MultiRegionAccessPointsAsyncResponse": {
            "type": "object",
            "properties": {
                "Regions": {
                    "$ref": "#/$defs/MultiRegionAccessPointRegionalResponseList"
                }
            }
        },
        "MultiRegionAccessPointRegionalResponseList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MultiRegionAccessPointRegionalResponse"
            }
        },
        "MultiRegionAccessPointRegionalResponse": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/RegionName"
                },
                "RequestStatus": {
                    "$ref": "#/$defs/AsyncRequestStatus"
                }
            }
        },
        "RegionName": {
            "type": "string"
        },
        "AsyncErrorDetails": {
            "type": "object",
            "properties": {
                "Code": {
                    "$ref": "#/$defs/MaxLength1024String"
                },
                "Message": {
                    "$ref": "#/$defs/MaxLength1024String"
                },
                "Resource": {
                    "$ref": "#/$defs/MaxLength1024String"
                },
                "RequestId": {
                    "$ref": "#/$defs/MaxLength1024String"
                }
            }
        },
        "DescribeMultiRegionAccessPointOperationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "RequestTokenARN": {
                    "$ref": "#/$defs/AsyncRequestTokenARN"
                }
            }
        },
        "DissociateAccessGrantsIdentityCenterRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetAccessGrantResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantId": {
                    "$ref": "#/$defs/AccessGrantId"
                },
                "AccessGrantArn": {
                    "$ref": "#/$defs/AccessGrantArn"
                },
                "Grantee": {
                    "$ref": "#/$defs/Grantee"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationConfiguration": {
                    "$ref": "#/$defs/AccessGrantsLocationConfiguration"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "GetAccessGrantRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantId": {
                    "$ref": "#/$defs/AccessGrantId"
                }
            }
        },
        "GetAccessGrantsInstanceResult": {
            "type": "object",
            "properties": {
                "AccessGrantsInstanceArn": {
                    "$ref": "#/$defs/AccessGrantsInstanceArn"
                },
                "AccessGrantsInstanceId": {
                    "$ref": "#/$defs/AccessGrantsInstanceId"
                },
                "IdentityCenterArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterInstanceArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                },
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                }
            }
        },
        "GetAccessGrantsInstanceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetAccessGrantsInstanceForPrefixResult": {
            "type": "object",
            "properties": {
                "AccessGrantsInstanceArn": {
                    "$ref": "#/$defs/AccessGrantsInstanceArn"
                },
                "AccessGrantsInstanceId": {
                    "$ref": "#/$defs/AccessGrantsInstanceId"
                }
            }
        },
        "GetAccessGrantsInstanceForPrefixRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "S3Prefix": {
                    "$ref": "#/$defs/S3Prefix"
                }
            }
        },
        "GetAccessGrantsInstanceResourcePolicyResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/PolicyDocument"
                },
                "Organization": {
                    "$ref": "#/$defs/Organization"
                },
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                }
            }
        },
        "PolicyDocument": {
            "type": "string"
        },
        "Organization": {
            "type": "string"
        },
        "GetAccessGrantsInstanceResourcePolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetAccessGrantsLocationResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationArn": {
                    "$ref": "#/$defs/AccessGrantsLocationArn"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                }
            }
        },
        "GetAccessGrantsLocationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                }
            }
        },
        "GetAccessPointResult": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "NetworkOrigin": {
                    "$ref": "#/$defs/NetworkOrigin"
                },
                "VpcConfiguration": {
                    "$ref": "#/$defs/VpcConfiguration"
                },
                "PublicAccessBlockConfiguration": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "CreationDate": {
                    "$ref": "#/$defs/CreationDate"
                },
                "Alias": {
                    "$ref": "#/$defs/Alias"
                },
                "AccessPointArn": {
                    "$ref": "#/$defs/S3AccessPointArn"
                },
                "Endpoints": {
                    "$ref": "#/$defs/Endpoints"
                },
                "BucketAccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "NetworkOrigin": {
            "enum": [
                "Internet",
                "VPC"
            ]
        },
        "CreationDate": {
            "type": "string",
            "format": "date-time"
        },
        "Endpoints": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/NonEmptyMaxLength1024String"
            }
        },
        "GetAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                }
            }
        },
        "GetAccessPointConfigurationForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "Configuration": {
                    "$ref": "#/$defs/ObjectLambdaConfiguration"
                }
            }
        },
        "GetAccessPointConfigurationForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "GetAccessPointForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                },
                "PublicAccessBlockConfiguration": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "CreationDate": {
                    "$ref": "#/$defs/CreationDate"
                },
                "Alias": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointAlias"
                }
            }
        },
        "GetAccessPointForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "GetAccessPointPolicyResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "GetAccessPointPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                }
            }
        },
        "GetAccessPointPolicyForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/ObjectLambdaPolicy"
                }
            }
        },
        "ObjectLambdaPolicy": {
            "type": "string"
        },
        "GetAccessPointPolicyForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "GetAccessPointPolicyStatusResult": {
            "type": "object",
            "properties": {
                "PolicyStatus": {
                    "$ref": "#/$defs/PolicyStatus"
                }
            }
        },
        "PolicyStatus": {
            "type": "object",
            "properties": {
                "IsPublic": {
                    "$ref": "#/$defs/IsPublic"
                }
            }
        },
        "IsPublic": {
            "type": "boolean"
        },
        "GetAccessPointPolicyStatusRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                }
            }
        },
        "GetAccessPointPolicyStatusForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "PolicyStatus": {
                    "$ref": "#/$defs/PolicyStatus"
                }
            }
        },
        "GetAccessPointPolicyStatusForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                }
            }
        },
        "GetBucketResult": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "PublicAccessBlockEnabled": {
                    "$ref": "#/$defs/PublicAccessBlockEnabled"
                },
                "CreationDate": {
                    "$ref": "#/$defs/CreationDate"
                }
            }
        },
        "PublicAccessBlockEnabled": {
            "type": "boolean"
        },
        "GetBucketRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetBucketLifecycleConfigurationResult": {
            "type": "object",
            "properties": {
                "Rules": {
                    "$ref": "#/$defs/LifecycleRules"
                }
            }
        },
        "LifecycleRules": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/LifecycleRule"
            }
        },
        "LifecycleRule": {
            "type": "object",
            "properties": {
                "Expiration": {
                    "$ref": "#/$defs/LifecycleExpiration"
                },
                "ID": {
                    "$ref": "#/$defs/ID"
                },
                "Filter": {
                    "$ref": "#/$defs/LifecycleRuleFilter"
                },
                "Status": {
                    "$ref": "#/$defs/ExpirationStatus"
                },
                "Transitions": {
                    "$ref": "#/$defs/TransitionList"
                },
                "NoncurrentVersionTransitions": {
                    "$ref": "#/$defs/NoncurrentVersionTransitionList"
                },
                "NoncurrentVersionExpiration": {
                    "$ref": "#/$defs/NoncurrentVersionExpiration"
                },
                "AbortIncompleteMultipartUpload": {
                    "$ref": "#/$defs/AbortIncompleteMultipartUpload"
                }
            }
        },
        "LifecycleExpiration": {
            "type": "object",
            "properties": {
                "Date": {
                    "$ref": "#/$defs/Date"
                },
                "Days": {
                    "$ref": "#/$defs/Days"
                },
                "ExpiredObjectDeleteMarker": {
                    "$ref": "#/$defs/ExpiredObjectDeleteMarker"
                }
            }
        },
        "Date": {
            "type": "string",
            "format": "date-time"
        },
        "Days": {
            "type": "integer",
            "format": "int32"
        },
        "ExpiredObjectDeleteMarker": {
            "type": "boolean"
        },
        "ID": {
            "type": "string"
        },
        "LifecycleRuleFilter": {
            "type": "object",
            "properties": {
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Tag": {
                    "$ref": "#/$defs/S3Tag"
                },
                "And": {
                    "$ref": "#/$defs/LifecycleRuleAndOperator"
                },
                "ObjectSizeGreaterThan": {
                    "$ref": "#/$defs/ObjectSizeGreaterThanBytes"
                },
                "ObjectSizeLessThan": {
                    "$ref": "#/$defs/ObjectSizeLessThanBytes"
                }
            }
        },
        "LifecycleRuleAndOperator": {
            "type": "object",
            "properties": {
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Tags": {
                    "$ref": "#/$defs/S3TagSet"
                },
                "ObjectSizeGreaterThan": {
                    "$ref": "#/$defs/ObjectSizeGreaterThanBytes"
                },
                "ObjectSizeLessThan": {
                    "$ref": "#/$defs/ObjectSizeLessThanBytes"
                }
            }
        },
        "ExpirationStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "TransitionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Transition"
            }
        },
        "Transition": {
            "type": "object",
            "properties": {
                "Date": {
                    "$ref": "#/$defs/Date"
                },
                "Days": {
                    "$ref": "#/$defs/Days"
                },
                "StorageClass": {
                    "$ref": "#/$defs/TransitionStorageClass"
                }
            }
        },
        "TransitionStorageClass": {
            "enum": [
                "GLACIER",
                "STANDARD_IA",
                "ONEZONE_IA",
                "INTELLIGENT_TIERING",
                "DEEP_ARCHIVE"
            ]
        },
        "NoncurrentVersionTransitionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/NoncurrentVersionTransition"
            }
        },
        "NoncurrentVersionTransition": {
            "type": "object",
            "properties": {
                "NoncurrentDays": {
                    "$ref": "#/$defs/Days"
                },
                "StorageClass": {
                    "$ref": "#/$defs/TransitionStorageClass"
                }
            }
        },
        "NoncurrentVersionExpiration": {
            "type": "object",
            "properties": {
                "NoncurrentDays": {
                    "$ref": "#/$defs/Days"
                },
                "NewerNoncurrentVersions": {
                    "$ref": "#/$defs/NoncurrentVersionCount"
                }
            }
        },
        "NoncurrentVersionCount": {
            "type": "integer",
            "format": "int32"
        },
        "AbortIncompleteMultipartUpload": {
            "type": "object",
            "properties": {
                "DaysAfterInitiation": {
                    "$ref": "#/$defs/DaysAfterInitiation"
                }
            }
        },
        "DaysAfterInitiation": {
            "type": "integer",
            "format": "int32"
        },
        "GetBucketLifecycleConfigurationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetBucketPolicyResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "GetBucketPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetBucketReplicationResult": {
            "type": "object",
            "properties": {
                "ReplicationConfiguration": {
                    "$ref": "#/$defs/ReplicationConfiguration"
                }
            }
        },
        "ReplicationConfiguration": {
            "type": "object",
            "properties": {
                "Role": {
                    "$ref": "#/$defs/Role"
                },
                "Rules": {
                    "$ref": "#/$defs/ReplicationRules"
                }
            }
        },
        "Role": {
            "type": "string"
        },
        "ReplicationRules": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ReplicationRule"
            }
        },
        "ReplicationRule": {
            "type": "object",
            "properties": {
                "ID": {
                    "$ref": "#/$defs/ID"
                },
                "Priority": {
                    "$ref": "#/$defs/Priority"
                },
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Filter": {
                    "$ref": "#/$defs/ReplicationRuleFilter"
                },
                "Status": {
                    "$ref": "#/$defs/ReplicationRuleStatus"
                },
                "SourceSelectionCriteria": {
                    "$ref": "#/$defs/SourceSelectionCriteria"
                },
                "ExistingObjectReplication": {
                    "$ref": "#/$defs/ExistingObjectReplication"
                },
                "Destination": {
                    "$ref": "#/$defs/Destination"
                },
                "DeleteMarkerReplication": {
                    "$ref": "#/$defs/DeleteMarkerReplication"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketIdentifierString"
                }
            }
        },
        "Priority": {
            "type": "integer",
            "format": "int32"
        },
        "ReplicationRuleFilter": {
            "type": "object",
            "properties": {
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Tag": {
                    "$ref": "#/$defs/S3Tag"
                },
                "And": {
                    "$ref": "#/$defs/ReplicationRuleAndOperator"
                }
            }
        },
        "ReplicationRuleAndOperator": {
            "type": "object",
            "properties": {
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Tags": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "ReplicationRuleStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "SourceSelectionCriteria": {
            "type": "object",
            "properties": {
                "SseKmsEncryptedObjects": {
                    "$ref": "#/$defs/SseKmsEncryptedObjects"
                },
                "ReplicaModifications": {
                    "$ref": "#/$defs/ReplicaModifications"
                }
            }
        },
        "SseKmsEncryptedObjects": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/SseKmsEncryptedObjectsStatus"
                }
            }
        },
        "SseKmsEncryptedObjectsStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "ReplicaModifications": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/ReplicaModificationsStatus"
                }
            }
        },
        "ReplicaModificationsStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "ExistingObjectReplication": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/ExistingObjectReplicationStatus"
                }
            }
        },
        "ExistingObjectReplicationStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "Destination": {
            "type": "object",
            "properties": {
                "Account": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketIdentifierString"
                },
                "ReplicationTime": {
                    "$ref": "#/$defs/ReplicationTime"
                },
                "AccessControlTranslation": {
                    "$ref": "#/$defs/AccessControlTranslation"
                },
                "EncryptionConfiguration": {
                    "$ref": "#/$defs/EncryptionConfiguration"
                },
                "Metrics": {
                    "$ref": "#/$defs/Metrics"
                },
                "StorageClass": {
                    "$ref": "#/$defs/ReplicationStorageClass"
                }
            }
        },
        "BucketIdentifierString": {
            "type": "string"
        },
        "ReplicationTime": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/ReplicationTimeStatus"
                },
                "Time": {
                    "$ref": "#/$defs/ReplicationTimeValue"
                }
            }
        },
        "ReplicationTimeStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "ReplicationTimeValue": {
            "type": "object",
            "properties": {
                "Minutes": {
                    "$ref": "#/$defs/Minutes"
                }
            }
        },
        "Minutes": {
            "type": "integer",
            "format": "int32"
        },
        "AccessControlTranslation": {
            "type": "object",
            "properties": {
                "Owner": {
                    "$ref": "#/$defs/OwnerOverride"
                }
            }
        },
        "OwnerOverride": {
            "enum": [
                "Destination"
            ]
        },
        "EncryptionConfiguration": {
            "type": "object",
            "properties": {
                "ReplicaKmsKeyID": {
                    "$ref": "#/$defs/ReplicaKmsKeyID"
                }
            }
        },
        "ReplicaKmsKeyID": {
            "type": "string"
        },
        "Metrics": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/MetricsStatus"
                },
                "EventThreshold": {
                    "$ref": "#/$defs/ReplicationTimeValue"
                }
            }
        },
        "MetricsStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "ReplicationStorageClass": {
            "enum": [
                "STANDARD",
                "REDUCED_REDUNDANCY",
                "STANDARD_IA",
                "ONEZONE_IA",
                "INTELLIGENT_TIERING",
                "GLACIER",
                "DEEP_ARCHIVE",
                "OUTPOSTS",
                "GLACIER_IR"
            ]
        },
        "DeleteMarkerReplication": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/DeleteMarkerReplicationStatus"
                }
            }
        },
        "DeleteMarkerReplicationStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "GetBucketReplicationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetBucketTaggingResult": {
            "type": "object",
            "properties": {
                "TagSet": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "GetBucketTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetBucketVersioningResult": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/BucketVersioningStatus"
                },
                "MFADelete": {
                    "$ref": "#/$defs/MFADeleteStatus"
                }
            }
        },
        "BucketVersioningStatus": {
            "enum": [
                "Enabled",
                "Suspended"
            ]
        },
        "MFADeleteStatus": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "GetBucketVersioningRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                }
            }
        },
        "GetDataAccessResult": {
            "type": "object",
            "properties": {
                "Credentials": {
                    "$ref": "#/$defs/Credentials"
                },
                "MatchedGrantTarget": {
                    "$ref": "#/$defs/S3Prefix"
                }
            }
        },
        "Credentials": {
            "type": "object",
            "properties": {
                "AccessKeyId": {
                    "$ref": "#/$defs/AccessKeyId"
                },
                "SecretAccessKey": {
                    "$ref": "#/$defs/SecretAccessKey"
                },
                "SessionToken": {
                    "$ref": "#/$defs/SessionToken"
                },
                "Expiration": {
                    "$ref": "#/$defs/Expiration"
                }
            }
        },
        "AccessKeyId": {
            "type": "string"
        },
        "SecretAccessKey": {
            "type": "string"
        },
        "SessionToken": {
            "type": "string"
        },
        "Expiration": {
            "type": "string",
            "format": "date-time"
        },
        "GetDataAccessRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Target": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "DurationSeconds": {
                    "$ref": "#/$defs/DurationSeconds"
                },
                "Privilege": {
                    "$ref": "#/$defs/Privilege"
                },
                "TargetType": {
                    "$ref": "#/$defs/S3PrefixType"
                }
            }
        },
        "DurationSeconds": {
            "type": "integer",
            "format": "int32"
        },
        "Privilege": {
            "enum": [
                "Minimal",
                "Default"
            ]
        },
        "GetJobTaggingResult": {
            "type": "object",
            "properties": {
                "Tags": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "GetJobTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                }
            }
        },
        "GetMultiRegionAccessPointResult": {
            "type": "object",
            "properties": {
                "AccessPoint": {
                    "$ref": "#/$defs/MultiRegionAccessPointReport"
                }
            }
        },
        "MultiRegionAccessPointReport": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                },
                "Alias": {
                    "$ref": "#/$defs/MultiRegionAccessPointAlias"
                },
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "PublicAccessBlock": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "Status": {
                    "$ref": "#/$defs/MultiRegionAccessPointStatus"
                },
                "Regions": {
                    "$ref": "#/$defs/RegionReportList"
                }
            }
        },
        "MultiRegionAccessPointAlias": {
            "type": "string"
        },
        "MultiRegionAccessPointStatus": {
            "enum": [
                "READY",
                "INCONSISTENT_ACROSS_REGIONS",
                "CREATING",
                "PARTIALLY_CREATED",
                "PARTIALLY_DELETED",
                "DELETING"
            ]
        },
        "RegionReportList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RegionReport"
            }
        },
        "RegionReport": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "Region": {
                    "$ref": "#/$defs/RegionName"
                },
                "BucketAccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetMultiRegionAccessPointRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                }
            }
        },
        "GetMultiRegionAccessPointPolicyResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/MultiRegionAccessPointPolicyDocument"
                }
            }
        },
        "MultiRegionAccessPointPolicyDocument": {
            "type": "object",
            "properties": {
                "Established": {
                    "$ref": "#/$defs/EstablishedMultiRegionAccessPointPolicy"
                },
                "Proposed": {
                    "$ref": "#/$defs/ProposedMultiRegionAccessPointPolicy"
                }
            }
        },
        "EstablishedMultiRegionAccessPointPolicy": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "ProposedMultiRegionAccessPointPolicy": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "GetMultiRegionAccessPointPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                }
            }
        },
        "GetMultiRegionAccessPointPolicyStatusResult": {
            "type": "object",
            "properties": {
                "Established": {
                    "$ref": "#/$defs/PolicyStatus"
                }
            }
        },
        "GetMultiRegionAccessPointPolicyStatusRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/MultiRegionAccessPointName"
                }
            }
        },
        "GetMultiRegionAccessPointRoutesResult": {
            "type": "object",
            "properties": {
                "Mrap": {
                    "$ref": "#/$defs/MultiRegionAccessPointId"
                },
                "Routes": {
                    "$ref": "#/$defs/RouteList"
                }
            }
        },
        "MultiRegionAccessPointId": {
            "type": "string"
        },
        "RouteList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MultiRegionAccessPointRoute"
            }
        },
        "MultiRegionAccessPointRoute": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "Region": {
                    "$ref": "#/$defs/RegionName"
                },
                "TrafficDialPercentage": {
                    "$ref": "#/$defs/TrafficDialPercentage"
                }
            }
        },
        "TrafficDialPercentage": {
            "type": "integer",
            "format": "int32"
        },
        "GetMultiRegionAccessPointRoutesRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Mrap": {
                    "$ref": "#/$defs/MultiRegionAccessPointId"
                }
            }
        },
        "GetPublicAccessBlockOutput": {
            "type": "object",
            "properties": {
                "PublicAccessBlockConfiguration": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                }
            }
        },
        "GetPublicAccessBlockRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetStorageLensConfigurationResult": {
            "type": "object",
            "properties": {
                "StorageLensConfiguration": {
                    "$ref": "#/$defs/StorageLensConfiguration"
                }
            }
        },
        "StorageLensConfiguration": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountLevel": {
                    "$ref": "#/$defs/AccountLevel"
                },
                "Include": {
                    "$ref": "#/$defs/Include"
                },
                "Exclude": {
                    "$ref": "#/$defs/Exclude"
                },
                "DataExport": {
                    "$ref": "#/$defs/StorageLensDataExport"
                },
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                },
                "AwsOrg": {
                    "$ref": "#/$defs/StorageLensAwsOrg"
                },
                "StorageLensArn": {
                    "$ref": "#/$defs/StorageLensArn"
                }
            }
        },
        "AccountLevel": {
            "type": "object",
            "properties": {
                "ActivityMetrics": {
                    "$ref": "#/$defs/ActivityMetrics"
                },
                "BucketLevel": {
                    "$ref": "#/$defs/BucketLevel"
                },
                "AdvancedCostOptimizationMetrics": {
                    "$ref": "#/$defs/AdvancedCostOptimizationMetrics"
                },
                "AdvancedDataProtectionMetrics": {
                    "$ref": "#/$defs/AdvancedDataProtectionMetrics"
                },
                "DetailedStatusCodesMetrics": {
                    "$ref": "#/$defs/DetailedStatusCodesMetrics"
                },
                "StorageLensGroupLevel": {
                    "$ref": "#/$defs/StorageLensGroupLevel"
                }
            }
        },
        "ActivityMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "IsEnabled": {
            "type": "boolean"
        },
        "BucketLevel": {
            "type": "object",
            "properties": {
                "ActivityMetrics": {
                    "$ref": "#/$defs/ActivityMetrics"
                },
                "PrefixLevel": {
                    "$ref": "#/$defs/PrefixLevel"
                },
                "AdvancedCostOptimizationMetrics": {
                    "$ref": "#/$defs/AdvancedCostOptimizationMetrics"
                },
                "AdvancedDataProtectionMetrics": {
                    "$ref": "#/$defs/AdvancedDataProtectionMetrics"
                },
                "DetailedStatusCodesMetrics": {
                    "$ref": "#/$defs/DetailedStatusCodesMetrics"
                }
            }
        },
        "PrefixLevel": {
            "type": "object",
            "properties": {
                "StorageMetrics": {
                    "$ref": "#/$defs/PrefixLevelStorageMetrics"
                }
            }
        },
        "PrefixLevelStorageMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                },
                "SelectionCriteria": {
                    "$ref": "#/$defs/SelectionCriteria"
                }
            }
        },
        "SelectionCriteria": {
            "type": "object",
            "properties": {
                "Delimiter": {
                    "$ref": "#/$defs/StorageLensPrefixLevelDelimiter"
                },
                "MaxDepth": {
                    "$ref": "#/$defs/StorageLensPrefixLevelMaxDepth"
                },
                "MinStorageBytesPercentage": {
                    "$ref": "#/$defs/MinStorageBytesPercentage"
                }
            }
        },
        "StorageLensPrefixLevelDelimiter": {
            "type": "string"
        },
        "StorageLensPrefixLevelMaxDepth": {
            "type": "integer",
            "format": "int32"
        },
        "MinStorageBytesPercentage": {
            "type": "number",
            "format": "double"
        },
        "AdvancedCostOptimizationMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "AdvancedDataProtectionMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "DetailedStatusCodesMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "StorageLensGroupLevel": {
            "type": "object",
            "properties": {
                "SelectionCriteria": {
                    "$ref": "#/$defs/StorageLensGroupLevelSelectionCriteria"
                }
            }
        },
        "StorageLensGroupLevelSelectionCriteria": {
            "type": "object",
            "properties": {
                "Include": {
                    "$ref": "#/$defs/StorageLensGroupLevelInclude"
                },
                "Exclude": {
                    "$ref": "#/$defs/StorageLensGroupLevelExclude"
                }
            }
        },
        "StorageLensGroupLevelInclude": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StorageLensGroupArn"
            }
        },
        "StorageLensGroupLevelExclude": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StorageLensGroupArn"
            }
        },
        "Include": {
            "type": "object",
            "properties": {
                "Buckets": {
                    "$ref": "#/$defs/Buckets"
                },
                "Regions": {
                    "$ref": "#/$defs/Regions"
                }
            }
        },
        "Buckets": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3BucketArnString"
            }
        },
        "Regions": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/S3AWSRegion"
            }
        },
        "S3AWSRegion": {
            "type": "string"
        },
        "Exclude": {
            "type": "object",
            "properties": {
                "Buckets": {
                    "$ref": "#/$defs/Buckets"
                },
                "Regions": {
                    "$ref": "#/$defs/Regions"
                }
            }
        },
        "StorageLensDataExport": {
            "type": "object",
            "properties": {
                "S3BucketDestination": {
                    "$ref": "#/$defs/S3BucketDestination"
                },
                "CloudWatchMetrics": {
                    "$ref": "#/$defs/CloudWatchMetrics"
                }
            }
        },
        "S3BucketDestination": {
            "type": "object",
            "properties": {
                "Format": {
                    "$ref": "#/$defs/Format"
                },
                "OutputSchemaVersion": {
                    "$ref": "#/$defs/OutputSchemaVersion"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Arn": {
                    "$ref": "#/$defs/S3BucketArnString"
                },
                "Prefix": {
                    "$ref": "#/$defs/Prefix"
                },
                "Encryption": {
                    "$ref": "#/$defs/StorageLensDataExportEncryption"
                }
            }
        },
        "Format": {
            "enum": [
                "CSV",
                "Parquet"
            ]
        },
        "OutputSchemaVersion": {
            "enum": [
                "V_1"
            ]
        },
        "StorageLensDataExportEncryption": {
            "type": "object",
            "properties": {
                "SSES3": {
                    "$ref": "#/$defs/SSES3"
                },
                "SSEKMS": {
                    "$ref": "#/$defs/SSEKMS"
                }
            }
        },
        "SSES3": {
            "type": "object",
            "properties": {}
        },
        "SSEKMS": {
            "type": "object",
            "properties": {
                "KeyId": {
                    "$ref": "#/$defs/SSEKMSKeyId"
                }
            }
        },
        "SSEKMSKeyId": {
            "type": "string"
        },
        "CloudWatchMetrics": {
            "type": "object",
            "properties": {
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "StorageLensAwsOrg": {
            "type": "object",
            "properties": {
                "Arn": {
                    "$ref": "#/$defs/AwsOrgArn"
                }
            }
        },
        "AwsOrgArn": {
            "type": "string"
        },
        "StorageLensArn": {
            "type": "string"
        },
        "GetStorageLensConfigurationRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetStorageLensConfigurationTaggingResult": {
            "type": "object",
            "properties": {
                "Tags": {
                    "$ref": "#/$defs/StorageLensTags"
                }
            }
        },
        "StorageLensTags": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StorageLensTag"
            }
        },
        "StorageLensTag": {
            "type": "object",
            "properties": {
                "Key": {
                    "$ref": "#/$defs/TagKeyString"
                },
                "Value": {
                    "$ref": "#/$defs/TagValueString"
                }
            }
        },
        "GetStorageLensConfigurationTaggingRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "GetStorageLensGroupResult": {
            "type": "object",
            "properties": {
                "StorageLensGroup": {
                    "$ref": "#/$defs/StorageLensGroup"
                }
            }
        },
        "GetStorageLensGroupRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/StorageLensGroupName"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "ListAccessGrantsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "AccessGrantsList": {
                    "$ref": "#/$defs/AccessGrantsList"
                }
            }
        },
        "ContinuationToken": {
            "type": "string"
        },
        "AccessGrantsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListAccessGrantEntry"
            }
        },
        "ListAccessGrantEntry": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantId": {
                    "$ref": "#/$defs/AccessGrantId"
                },
                "AccessGrantArn": {
                    "$ref": "#/$defs/AccessGrantArn"
                },
                "Grantee": {
                    "$ref": "#/$defs/Grantee"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationConfiguration": {
                    "$ref": "#/$defs/AccessGrantsLocationConfiguration"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "ListAccessGrantsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                },
                "GranteeType": {
                    "$ref": "#/$defs/GranteeType"
                },
                "GranteeIdentifier": {
                    "$ref": "#/$defs/GranteeIdentifier"
                },
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "MaxResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListAccessGrantsInstancesResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "AccessGrantsInstancesList": {
                    "$ref": "#/$defs/AccessGrantsInstancesList"
                }
            }
        },
        "AccessGrantsInstancesList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListAccessGrantsInstanceEntry"
            }
        },
        "ListAccessGrantsInstanceEntry": {
            "type": "object",
            "properties": {
                "AccessGrantsInstanceId": {
                    "$ref": "#/$defs/AccessGrantsInstanceId"
                },
                "AccessGrantsInstanceArn": {
                    "$ref": "#/$defs/AccessGrantsInstanceArn"
                },
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "IdentityCenterArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterInstanceArn": {
                    "$ref": "#/$defs/IdentityCenterArn"
                },
                "IdentityCenterApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "ListAccessGrantsInstancesRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListAccessGrantsLocationsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "AccessGrantsLocationsList": {
                    "$ref": "#/$defs/AccessGrantsLocationsList"
                }
            }
        },
        "AccessGrantsLocationsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListAccessGrantsLocationsEntry"
            }
        },
        "ListAccessGrantsLocationsEntry": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationArn": {
                    "$ref": "#/$defs/AccessGrantsLocationArn"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                }
            }
        },
        "ListAccessGrantsLocationsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                }
            }
        },
        "ListAccessPointsResult": {
            "type": "object",
            "properties": {
                "AccessPointList": {
                    "$ref": "#/$defs/AccessPointList"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "AccessPointList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AccessPoint"
            }
        },
        "AccessPoint": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                },
                "NetworkOrigin": {
                    "$ref": "#/$defs/NetworkOrigin"
                },
                "VpcConfiguration": {
                    "$ref": "#/$defs/VpcConfiguration"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "AccessPointArn": {
                    "$ref": "#/$defs/S3AccessPointArn"
                },
                "Alias": {
                    "$ref": "#/$defs/Alias"
                },
                "BucketAccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "ListAccessPointsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListAccessPointsForObjectLambdaResult": {
            "type": "object",
            "properties": {
                "ObjectLambdaAccessPointList": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointList"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "ObjectLambdaAccessPointList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ObjectLambdaAccessPoint"
            }
        },
        "ObjectLambdaAccessPoint": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                },
                "ObjectLambdaAccessPointArn": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointArn"
                },
                "Alias": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointAlias"
                }
            }
        },
        "ListAccessPointsForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListCallerAccessGrantsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "CallerAccessGrantsList": {
                    "$ref": "#/$defs/CallerAccessGrantsList"
                }
            }
        },
        "CallerAccessGrantsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListCallerAccessGrantsEntry"
            }
        },
        "ListCallerAccessGrantsEntry": {
            "type": "object",
            "properties": {
                "Permission": {
                    "$ref": "#/$defs/Permission"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "ApplicationArn": {
                    "$ref": "#/$defs/IdentityCenterApplicationArn"
                }
            }
        },
        "ListCallerAccessGrantsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "GrantScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                },
                "AllowedByApplication": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "ListJobsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/StringForNextToken"
                },
                "Jobs": {
                    "$ref": "#/$defs/JobListDescriptorList"
                }
            }
        },
        "StringForNextToken": {
            "type": "string"
        },
        "JobListDescriptorList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/JobListDescriptor"
            }
        },
        "JobListDescriptor": {
            "type": "object",
            "properties": {
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "Description": {
                    "$ref": "#/$defs/NonEmptyMaxLength256String"
                },
                "Operation": {
                    "$ref": "#/$defs/OperationName"
                },
                "Priority": {
                    "$ref": "#/$defs/JobPriority"
                },
                "Status": {
                    "$ref": "#/$defs/JobStatus"
                },
                "CreationTime": {
                    "$ref": "#/$defs/JobCreationTime"
                },
                "TerminationDate": {
                    "$ref": "#/$defs/JobTerminationDate"
                },
                "ProgressSummary": {
                    "$ref": "#/$defs/JobProgressSummary"
                }
            }
        },
        "OperationName": {
            "enum": [
                "LambdaInvoke",
                "S3PutObjectCopy",
                "S3PutObjectAcl",
                "S3PutObjectTagging",
                "S3DeleteObjectTagging",
                "S3InitiateRestoreObject",
                "S3PutObjectLegalHold",
                "S3PutObjectRetention",
                "S3ReplicateObject"
            ]
        },
        "ListJobsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobStatuses": {
                    "$ref": "#/$defs/JobStatusList"
                },
                "NextToken": {
                    "$ref": "#/$defs/StringForNextToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "JobStatusList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/JobStatus"
            }
        },
        "ListMultiRegionAccessPointsResult": {
            "type": "object",
            "properties": {
                "AccessPoints": {
                    "$ref": "#/$defs/MultiRegionAccessPointReportList"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "MultiRegionAccessPointReportList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MultiRegionAccessPointReport"
            }
        },
        "ListMultiRegionAccessPointsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                }
            }
        },
        "ListRegionalBucketsResult": {
            "type": "object",
            "properties": {
                "RegionalBucketList": {
                    "$ref": "#/$defs/RegionalBucketList"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                }
            }
        },
        "RegionalBucketList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RegionalBucket"
            }
        },
        "RegionalBucket": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "BucketArn": {
                    "$ref": "#/$defs/S3RegionalBucketArn"
                },
                "PublicAccessBlockEnabled": {
                    "$ref": "#/$defs/PublicAccessBlockEnabled"
                },
                "CreationDate": {
                    "$ref": "#/$defs/CreationDate"
                },
                "OutpostId": {
                    "$ref": "#/$defs/NonEmptyMaxLength64String"
                }
            }
        },
        "ListRegionalBucketsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/NonEmptyMaxLength1024String"
                },
                "MaxResults": {
                    "$ref": "#/$defs/MaxResults"
                },
                "OutpostId": {
                    "$ref": "#/$defs/NonEmptyMaxLength64String"
                }
            }
        },
        "ListStorageLensConfigurationsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "StorageLensConfigurationList": {
                    "$ref": "#/$defs/StorageLensConfigurationList"
                }
            }
        },
        "StorageLensConfigurationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListStorageLensConfigurationEntry"
            }
        },
        "ListStorageLensConfigurationEntry": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ConfigId"
                },
                "StorageLensArn": {
                    "$ref": "#/$defs/StorageLensArn"
                },
                "HomeRegion": {
                    "$ref": "#/$defs/S3AWSRegion"
                },
                "IsEnabled": {
                    "$ref": "#/$defs/IsEnabled"
                }
            }
        },
        "ListStorageLensConfigurationsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                }
            }
        },
        "ListStorageLensGroupsResult": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                },
                "StorageLensGroupList": {
                    "$ref": "#/$defs/StorageLensGroupList"
                }
            }
        },
        "StorageLensGroupList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ListStorageLensGroupEntry"
            }
        },
        "ListStorageLensGroupEntry": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/StorageLensGroupName"
                },
                "StorageLensGroupArn": {
                    "$ref": "#/$defs/StorageLensGroupArn"
                },
                "HomeRegion": {
                    "$ref": "#/$defs/S3AWSRegion"
                }
            }
        },
        "ListStorageLensGroupsRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "NextToken": {
                    "$ref": "#/$defs/ContinuationToken"
                }
            }
        },
        "ListTagsForResourceResult": {
            "type": "object",
            "properties": {
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ResourceArn": {
                    "$ref": "#/$defs/S3ResourceArn"
                }
            }
        },
        "S3ResourceArn": {
            "type": "string"
        },
        "PutAccessGrantsInstanceResourcePolicyResult": {
            "type": "object",
            "properties": {
                "Policy": {
                    "$ref": "#/$defs/PolicyDocument"
                },
                "Organization": {
                    "$ref": "#/$defs/Organization"
                },
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                }
            }
        },
        "PutAccessGrantsInstanceResourcePolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Policy": {
                    "$ref": "#/$defs/PolicyDocument"
                },
                "Organization": {
                    "$ref": "#/$defs/Organization"
                }
            }
        },
        "PutAccessPointConfigurationForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                },
                "Configuration": {
                    "$ref": "#/$defs/ObjectLambdaConfiguration"
                }
            }
        },
        "PutAccessPointPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/AccessPointName"
                },
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "PutAccessPointPolicyForObjectLambdaRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Name": {
                    "$ref": "#/$defs/ObjectLambdaAccessPointName"
                },
                "Policy": {
                    "$ref": "#/$defs/ObjectLambdaPolicy"
                }
            }
        },
        "PutBucketLifecycleConfigurationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "LifecycleConfiguration": {
                    "$ref": "#/$defs/LifecycleConfiguration"
                }
            }
        },
        "LifecycleConfiguration": {
            "type": "object",
            "properties": {
                "Rules": {
                    "$ref": "#/$defs/LifecycleRules"
                }
            }
        },
        "PutBucketPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "ConfirmRemoveSelfBucketAccess": {
                    "$ref": "#/$defs/ConfirmRemoveSelfBucketAccess"
                },
                "Policy": {
                    "$ref": "#/$defs/Policy"
                }
            }
        },
        "ConfirmRemoveSelfBucketAccess": {
            "type": "boolean"
        },
        "PutBucketReplicationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "ReplicationConfiguration": {
                    "$ref": "#/$defs/ReplicationConfiguration"
                }
            }
        },
        "PutBucketTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "Tagging": {
                    "$ref": "#/$defs/Tagging"
                }
            }
        },
        "Tagging": {
            "type": "object",
            "properties": {
                "TagSet": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "PutBucketVersioningRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Bucket": {
                    "$ref": "#/$defs/BucketName"
                },
                "MFA": {
                    "$ref": "#/$defs/MFA"
                },
                "VersioningConfiguration": {
                    "$ref": "#/$defs/VersioningConfiguration"
                }
            }
        },
        "MFA": {
            "type": "string"
        },
        "VersioningConfiguration": {
            "type": "object",
            "properties": {
                "MFADelete": {
                    "$ref": "#/$defs/MFADelete"
                },
                "Status": {
                    "$ref": "#/$defs/BucketVersioningStatus"
                }
            }
        },
        "MFADelete": {
            "enum": [
                "Enabled",
                "Disabled"
            ]
        },
        "PutJobTaggingResult": {
            "type": "object",
            "properties": {}
        },
        "PutJobTaggingRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "Tags": {
                    "$ref": "#/$defs/S3TagSet"
                }
            }
        },
        "PutMultiRegionAccessPointPolicyResult": {
            "type": "object",
            "properties": {
                "RequestTokenARN": {
                    "$ref": "#/$defs/AsyncRequestTokenARN"
                }
            }
        },
        "PutMultiRegionAccessPointPolicyRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ClientToken": {
                    "$ref": "#/$defs/MultiRegionAccessPointClientToken"
                },
                "Details": {
                    "$ref": "#/$defs/PutMultiRegionAccessPointPolicyInput"
                }
            }
        },
        "PutPublicAccessBlockRequest": {
            "type": "object",
            "properties": {
                "PublicAccessBlockConfiguration": {
                    "$ref": "#/$defs/PublicAccessBlockConfiguration"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                }
            }
        },
        "PutStorageLensConfigurationRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "StorageLensConfiguration": {
                    "$ref": "#/$defs/StorageLensConfiguration"
                },
                "Tags": {
                    "$ref": "#/$defs/StorageLensTags"
                }
            }
        },
        "PutStorageLensConfigurationTaggingResult": {
            "type": "object",
            "properties": {}
        },
        "PutStorageLensConfigurationTaggingRequest": {
            "type": "object",
            "properties": {
                "ConfigId": {
                    "$ref": "#/$defs/ConfigId"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Tags": {
                    "$ref": "#/$defs/StorageLensTags"
                }
            }
        },
        "SubmitMultiRegionAccessPointRoutesResult": {
            "type": "object",
            "properties": {}
        },
        "SubmitMultiRegionAccessPointRoutesRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "Mrap": {
                    "$ref": "#/$defs/MultiRegionAccessPointId"
                },
                "RouteUpdates": {
                    "$ref": "#/$defs/RouteList"
                }
            }
        },
        "TagResourceResult": {
            "type": "object",
            "properties": {}
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ResourceArn": {
                    "$ref": "#/$defs/S3ResourceArn"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "UntagResourceResult": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "ResourceArn": {
                    "$ref": "#/$defs/S3ResourceArn"
                },
                "TagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKeyString"
            }
        },
        "UpdateAccessGrantsLocationResult": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "$ref": "#/$defs/CreationTimestamp"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "AccessGrantsLocationArn": {
                    "$ref": "#/$defs/AccessGrantsLocationArn"
                },
                "LocationScope": {
                    "$ref": "#/$defs/S3Prefix"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                }
            }
        },
        "UpdateAccessGrantsLocationRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "AccessGrantsLocationId": {
                    "$ref": "#/$defs/AccessGrantsLocationId"
                },
                "IAMRoleArn": {
                    "$ref": "#/$defs/IAMRoleArn"
                }
            }
        },
        "UpdateJobPriorityResult": {
            "type": "object",
            "properties": {
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "Priority": {
                    "$ref": "#/$defs/JobPriority"
                }
            }
        },
        "UpdateJobPriorityRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "Priority": {
                    "$ref": "#/$defs/JobPriority"
                }
            }
        },
        "UpdateJobStatusResult": {
            "type": "object",
            "properties": {
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "Status": {
                    "$ref": "#/$defs/JobStatus"
                },
                "StatusUpdateReason": {
                    "$ref": "#/$defs/JobStatusUpdateReason"
                }
            }
        },
        "UpdateJobStatusRequest": {
            "type": "object",
            "properties": {
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "JobId": {
                    "$ref": "#/$defs/JobId"
                },
                "RequestedJobStatus": {
                    "$ref": "#/$defs/RequestedJobStatus"
                },
                "StatusUpdateReason": {
                    "$ref": "#/$defs/JobStatusUpdateReason"
                }
            }
        },
        "RequestedJobStatus": {
            "enum": [
                "Cancelled",
                "Ready"
            ]
        },
        "UpdateStorageLensGroupRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/StorageLensGroupName"
                },
                "AccountId": {
                    "$ref": "#/$defs/AccountId"
                },
                "StorageLensGroup": {
                    "$ref": "#/$defs/StorageLensGroup"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                },
                "AccountId": {
                    "required": false,
                    "documentation": "The Account ID used to send the request. This is an optional parameter that will be set automatically for operations that require it.",
                    "type": "String"
                },
                "RequiresAccountId": {
                    "required": false,
                    "documentation": "Internal parameter for operations that require account id host prefix.",
                    "type": "Boolean"
                },
                "OutpostId": {
                    "required": false,
                    "documentation": "The Outpost ID.  Some operations have an optional OutpostId which should be used in endpoint construction.",
                    "type": "String"
                },
                "Bucket": {
                    "required": false,
                    "documentation": "The S3 bucket used to send the request. This is an optional parameter that will be set automatically for operations that are scoped to an S3 bucket.",
                    "type": "String"
                },
                "AccessPointName": {
                    "required": false,
                    "documentation": "The S3 AccessPointName used to send the request. This is an optional parameter that will be set automatically for operations that are scoped to an S3 AccessPoint.",
                    "type": "String"
                },
                "UseArnRegion": {
                    "builtIn": "AWS::S3Control::UseArnRegion",
                    "required": false,
                    "documentation": "When an Access Point ARN is provided and this flag is enabled, the SDK MUST use the ARN's region when constructing the endpoint instead of the client's configured region.",
                    "type": "Boolean"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "stringEquals",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        },
                                        "snow"
                                    ]
                                },
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "Endpoint"
                                        }
                                    ]
                                },
                                {
                                    "fn": "parseURL",
                                    "argv": [
                                        {
                                            "ref": "Endpoint"
                                        }
                                    ],
                                    "assign": "url"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "aws.partition",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                }
                                            ],
                                            "assign": "partitionResult"
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "error": "S3 Snow does not support DualStack",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "error": "S3 Snow does not support FIPS",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [],
                                            "endpoint": {
                                                "url": "{url#scheme}://{url#authority}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        }
                                    ],
                                    "type": "tree"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "OutpostId"
                                        }
                                    ]
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "aws.partition",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                }
                                            ],
                                            "assign": "partitionResult"
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "partitionResult"
                                                                },
                                                                "name"
                                                            ]
                                                        },
                                                        "aws-cn"
                                                    ]
                                                }
                                            ],
                                            "error": "Partition does not support FIPS",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "not",
                                                    "argv": [
                                                        {
                                                            "fn": "isSet",
                                                            "argv": [
                                                                {
                                                                    "ref": "AccountId"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "error": "AccountId is required but not set",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "not",
                                                    "argv": [
                                                        {
                                                            "fn": "isValidHostLabel",
                                                            "argv": [
                                                                {
                                                                    "ref": "AccountId"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "error": "AccountId must only contain a-z, A-Z, 0-9 and `-`.",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "not",
                                                    "argv": [
                                                        {
                                                            "fn": "isValidHostLabel",
                                                            "argv": [
                                                                {
                                                                    "ref": "OutpostId"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "error": "OutpostId must only contain a-z, A-Z, 0-9 and `-`.",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "Endpoint"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "error": "Invalid Configuration: DualStack and custom endpoint are not supported",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isValidHostLabel",
                                                    "argv": [
                                                        {
                                                            "ref": "Region"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "isSet",
                                                            "argv": [
                                                                {
                                                                    "ref": "Endpoint"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "fn": "parseURL",
                                                            "argv": [
                                                                {
                                                                    "ref": "Endpoint"
                                                                }
                                                            ],
                                                            "assign": "url"
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "{url#scheme}://{url#authority}{url#path}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3-outposts",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "https://s3-outposts-fips.{Region}.{partitionResult#dualStackDnsSuffix}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3-outposts",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "UseFIPS"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "https://s3-outposts-fips.{Region}.{partitionResult#dnsSuffix}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3-outposts",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "https://s3-outposts.{Region}.{partitionResult#dualStackDnsSuffix}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3-outposts",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://s3-outposts.{Region}.{partitionResult#dnsSuffix}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3-outposts",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "Invalid region: region was not a valid DNS name.",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "AccessPointName"
                                        }
                                    ]
                                },
                                {
                                    "fn": "aws.parseArn",
                                    "argv": [
                                        {
                                            "ref": "AccessPointName"
                                        }
                                    ],
                                    "assign": "accessPointArn"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "getAttr",
                                            "argv": [
                                                {
                                                    "ref": "accessPointArn"
                                                },
                                                "resourceId[0]"
                                            ],
                                            "assign": "arnType"
                                        },
                                        {
                                            "fn": "not",
                                            "argv": [
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "arnType"
                                                        },
                                                        ""
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "accessPointArn"
                                                                },
                                                                "service"
                                                            ]
                                                        },
                                                        "s3-outposts"
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "accessPointArn"
                                                                },
                                                                "resourceId[1]"
                                                            ],
                                                            "assign": "outpostId"
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [
                                                                {
                                                                    "fn": "isValidHostLabel",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "outpostId"
                                                                        },
                                                                        false
                                                                    ]
                                                                }
                                                            ],
                                                            "rules": [
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "isSet",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "Endpoint"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "booleanEquals",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseDualStack"
                                                                                },
                                                                                true
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "error": "Invalid Configuration: DualStack and custom endpoint are not supported",
                                                                    "type": "error"
                                                                },
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "isSet",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseArnRegion"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "booleanEquals",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseArnRegion"
                                                                                },
                                                                                false
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "not",
                                                                            "argv": [
                                                                                {
                                                                                    "fn": "stringEquals",
                                                                                    "argv": [
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": [
                                                                                                {
                                                                                                    "ref": "accessPointArn"
                                                                                                },
                                                                                                "region"
                                                                                            ]
                                                                                        },
                                                                                        "{Region}"
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "error": "Invalid configuration: region from ARN `{accessPointArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
                                                                    "type": "error"
                                                                },
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "aws.partition",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "Region"
                                                                                }
                                                                            ],
                                                                            "assign": "partitionResult"
                                                                        }
                                                                    ],
                                                                    "rules": [
                                                                        {
                                                                            "conditions": [
                                                                                {
                                                                                    "fn": "aws.partition",
                                                                                    "argv": [
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": [
                                                                                                {
                                                                                                    "ref": "accessPointArn"
                                                                                                },
                                                                                                "region"
                                                                                            ]
                                                                                        }
                                                                                    ],
                                                                                    "assign": "arnPartition"
                                                                                }
                                                                            ],
                                                                            "rules": [
                                                                                {
                                                                                    "conditions": [
                                                                                        {
                                                                                            "fn": "stringEquals",
                                                                                            "argv": [
                                                                                                {
                                                                                                    "fn": "getAttr",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "ref": "arnPartition"
                                                                                                        },
                                                                                                        "name"
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "fn": "getAttr",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "ref": "partitionResult"
                                                                                                        },
                                                                                                        "name"
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ],
                                                                                    "rules": [
                                                                                        {
                                                                                            "conditions": [
                                                                                                {
                                                                                                    "fn": "isValidHostLabel",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "fn": "getAttr",
                                                                                                            "argv": [
                                                                                                                {
                                                                                                                    "ref": "accessPointArn"
                                                                                                                },
                                                                                                                "region"
                                                                                                            ]
                                                                                                        },
                                                                                                        true
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "rules": [
                                                                                                {
                                                                                                    "conditions": [
                                                                                                        {
                                                                                                            "fn": "not",
                                                                                                            "argv": [
                                                                                                                {
                                                                                                                    "fn": "stringEquals",
                                                                                                                    "argv": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "accessPointArn"
                                                                                                                                },
                                                                                                                                "accountId"
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        ""
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ],
                                                                                                    "rules": [
                                                                                                        {
                                                                                                            "conditions": [
                                                                                                                {
                                                                                                                    "fn": "isValidHostLabel",
                                                                                                                    "argv": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "accessPointArn"
                                                                                                                                },
                                                                                                                                "accountId"
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        false
                                                                                                                    ]
                                                                                                                }
                                                                                                            ],
                                                                                                            "rules": [
                                                                                                                {
                                                                                                                    "conditions": [
                                                                                                                        {
                                                                                                                            "fn": "isSet",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "AccountId"
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "fn": "not",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "fn": "stringEquals",
                                                                                                                                    "argv": [
                                                                                                                                        {
                                                                                                                                            "ref": "AccountId"
                                                                                                                                        },
                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "error": "Invalid ARN: the accountId specified in the ARN (`{accessPointArn#accountId}`) does not match the parameter (`{AccountId}`)",
                                                                                                                    "type": "error"
                                                                                                                },
                                                                                                                {
                                                                                                                    "conditions": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "accessPointArn"
                                                                                                                                },
                                                                                                                                "resourceId[2]"
                                                                                                                            ],
                                                                                                                            "assign": "outpostType"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "rules": [
                                                                                                                        {
                                                                                                                            "conditions": [
                                                                                                                                {
                                                                                                                                    "fn": "getAttr",
                                                                                                                                    "argv": [
                                                                                                                                        {
                                                                                                                                            "ref": "accessPointArn"
                                                                                                                                        },
                                                                                                                                        "resourceId[3]"
                                                                                                                                    ],
                                                                                                                                    "assign": "accessPointName"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "rules": [
                                                                                                                                {
                                                                                                                                    "conditions": [
                                                                                                                                        {
                                                                                                                                            "fn": "stringEquals",
                                                                                                                                            "argv": [
                                                                                                                                                {
                                                                                                                                                    "ref": "outpostType"
                                                                                                                                                },
                                                                                                                                                "accesspoint"
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "rules": [
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseFIPS"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseDualStack"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts-fips.{accessPointArn#region}.{arnPartition#dualStackDnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{accessPointArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseFIPS"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts-fips.{accessPointArn#region}.{arnPartition#dnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{accessPointArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseDualStack"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts.{accessPointArn#region}.{arnPartition#dualStackDnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{accessPointArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "isSet",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "Endpoint"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "fn": "parseURL",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "Endpoint"
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "assign": "url"
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "{url#scheme}://{url#authority}{url#path}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{accessPointArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts.{accessPointArn#region}.{arnPartition#dnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{accessPointArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{accessPointArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "type": "tree"
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "conditions": [],
                                                                                                                                    "error": "Expected an outpost type `accesspoint`, found `{outpostType}`",
                                                                                                                                    "type": "error"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "type": "tree"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "conditions": [],
                                                                                                                            "error": "Invalid ARN: expected an access point name",
                                                                                                                            "type": "error"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "type": "tree"
                                                                                                                },
                                                                                                                {
                                                                                                                    "conditions": [],
                                                                                                                    "error": "Invalid ARN: Expected a 4-component resource",
                                                                                                                    "type": "error"
                                                                                                                }
                                                                                                            ],
                                                                                                            "type": "tree"
                                                                                                        },
                                                                                                        {
                                                                                                            "conditions": [],
                                                                                                            "error": "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointArn#accountId}`",
                                                                                                            "type": "error"
                                                                                                        }
                                                                                                    ],
                                                                                                    "type": "tree"
                                                                                                },
                                                                                                {
                                                                                                    "conditions": [],
                                                                                                    "error": "Invalid ARN: missing account ID",
                                                                                                    "type": "error"
                                                                                                }
                                                                                            ],
                                                                                            "type": "tree"
                                                                                        },
                                                                                        {
                                                                                            "conditions": [],
                                                                                            "error": "Invalid region in ARN: `{accessPointArn#region}` (invalid DNS name)",
                                                                                            "type": "error"
                                                                                        }
                                                                                    ],
                                                                                    "type": "tree"
                                                                                },
                                                                                {
                                                                                    "conditions": [],
                                                                                    "error": "Client was configured for partition `{partitionResult#name}` but ARN has `{arnPartition#name}`",
                                                                                    "type": "error"
                                                                                }
                                                                            ],
                                                                            "type": "tree"
                                                                        }
                                                                    ],
                                                                    "type": "tree"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        },
                                                        {
                                                            "conditions": [],
                                                            "error": "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`., found: `{outpostId}`",
                                                            "type": "error"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "Invalid ARN: The Outpost Id was not set",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "error": "Invalid ARN: No ARN type specified",
                                    "type": "error"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "Bucket"
                                        }
                                    ]
                                },
                                {
                                    "fn": "aws.parseArn",
                                    "argv": [
                                        {
                                            "ref": "Bucket"
                                        }
                                    ],
                                    "assign": "bucketArn"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "getAttr",
                                            "argv": [
                                                {
                                                    "ref": "bucketArn"
                                                },
                                                "resourceId[0]"
                                            ],
                                            "assign": "arnType"
                                        },
                                        {
                                            "fn": "not",
                                            "argv": [
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "arnType"
                                                        },
                                                        ""
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "bucketArn"
                                                                },
                                                                "service"
                                                            ]
                                                        },
                                                        "s3-outposts"
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "bucketArn"
                                                                },
                                                                "resourceId[1]"
                                                            ],
                                                            "assign": "outpostId"
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [
                                                                {
                                                                    "fn": "isValidHostLabel",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "outpostId"
                                                                        },
                                                                        false
                                                                    ]
                                                                }
                                                            ],
                                                            "rules": [
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "isSet",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "Endpoint"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "booleanEquals",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseDualStack"
                                                                                },
                                                                                true
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "error": "Invalid Configuration: DualStack and custom endpoint are not supported",
                                                                    "type": "error"
                                                                },
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "isSet",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseArnRegion"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "booleanEquals",
                                                                            "argv": [
                                                                                {
                                                                                    "ref": "UseArnRegion"
                                                                                },
                                                                                false
                                                                            ]
                                                                        },
                                                                        {
                                                                            "fn": "not",
                                                                            "argv": [
                                                                                {
                                                                                    "fn": "stringEquals",
                                                                                    "argv": [
                                                                                        {
                                                                                            "fn": "getAttr",
                                                                                            "argv": [
                                                                                                {
                                                                                                    "ref": "bucketArn"
                                                                                                },
                                                                                                "region"
                                                                                            ]
                                                                                        },
                                                                                        "{Region}"
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "error": "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
                                                                    "type": "error"
                                                                },
                                                                {
                                                                    "conditions": [
                                                                        {
                                                                            "fn": "aws.partition",
                                                                            "argv": [
                                                                                {
                                                                                    "fn": "getAttr",
                                                                                    "argv": [
                                                                                        {
                                                                                            "ref": "bucketArn"
                                                                                        },
                                                                                        "region"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "assign": "arnPartition"
                                                                        }
                                                                    ],
                                                                    "rules": [
                                                                        {
                                                                            "conditions": [
                                                                                {
                                                                                    "fn": "aws.partition",
                                                                                    "argv": [
                                                                                        {
                                                                                            "ref": "Region"
                                                                                        }
                                                                                    ],
                                                                                    "assign": "partitionResult"
                                                                                }
                                                                            ],
                                                                            "rules": [
                                                                                {
                                                                                    "conditions": [
                                                                                        {
                                                                                            "fn": "stringEquals",
                                                                                            "argv": [
                                                                                                {
                                                                                                    "fn": "getAttr",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "ref": "arnPartition"
                                                                                                        },
                                                                                                        "name"
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "fn": "getAttr",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "ref": "partitionResult"
                                                                                                        },
                                                                                                        "name"
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ],
                                                                                    "rules": [
                                                                                        {
                                                                                            "conditions": [
                                                                                                {
                                                                                                    "fn": "isValidHostLabel",
                                                                                                    "argv": [
                                                                                                        {
                                                                                                            "fn": "getAttr",
                                                                                                            "argv": [
                                                                                                                {
                                                                                                                    "ref": "bucketArn"
                                                                                                                },
                                                                                                                "region"
                                                                                                            ]
                                                                                                        },
                                                                                                        true
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "rules": [
                                                                                                {
                                                                                                    "conditions": [
                                                                                                        {
                                                                                                            "fn": "not",
                                                                                                            "argv": [
                                                                                                                {
                                                                                                                    "fn": "stringEquals",
                                                                                                                    "argv": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "bucketArn"
                                                                                                                                },
                                                                                                                                "accountId"
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        ""
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ],
                                                                                                    "rules": [
                                                                                                        {
                                                                                                            "conditions": [
                                                                                                                {
                                                                                                                    "fn": "isValidHostLabel",
                                                                                                                    "argv": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "bucketArn"
                                                                                                                                },
                                                                                                                                "accountId"
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        false
                                                                                                                    ]
                                                                                                                }
                                                                                                            ],
                                                                                                            "rules": [
                                                                                                                {
                                                                                                                    "conditions": [
                                                                                                                        {
                                                                                                                            "fn": "isSet",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "AccountId"
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "fn": "not",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "fn": "stringEquals",
                                                                                                                                    "argv": [
                                                                                                                                        {
                                                                                                                                            "ref": "AccountId"
                                                                                                                                        },
                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "error": "Invalid ARN: the accountId specified in the ARN (`{bucketArn#accountId}`) does not match the parameter (`{AccountId}`)",
                                                                                                                    "type": "error"
                                                                                                                },
                                                                                                                {
                                                                                                                    "conditions": [
                                                                                                                        {
                                                                                                                            "fn": "getAttr",
                                                                                                                            "argv": [
                                                                                                                                {
                                                                                                                                    "ref": "bucketArn"
                                                                                                                                },
                                                                                                                                "resourceId[2]"
                                                                                                                            ],
                                                                                                                            "assign": "outpostType"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "rules": [
                                                                                                                        {
                                                                                                                            "conditions": [
                                                                                                                                {
                                                                                                                                    "fn": "getAttr",
                                                                                                                                    "argv": [
                                                                                                                                        {
                                                                                                                                            "ref": "bucketArn"
                                                                                                                                        },
                                                                                                                                        "resourceId[3]"
                                                                                                                                    ],
                                                                                                                                    "assign": "bucketName"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "rules": [
                                                                                                                                {
                                                                                                                                    "conditions": [
                                                                                                                                        {
                                                                                                                                            "fn": "stringEquals",
                                                                                                                                            "argv": [
                                                                                                                                                {
                                                                                                                                                    "ref": "outpostType"
                                                                                                                                                },
                                                                                                                                                "bucket"
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "rules": [
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseFIPS"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseDualStack"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts-fips.{bucketArn#region}.{arnPartition#dualStackDnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{bucketArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseFIPS"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts-fips.{bucketArn#region}.{arnPartition#dnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{bucketArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "booleanEquals",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "UseDualStack"
                                                                                                                                                        },
                                                                                                                                                        true
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts.{bucketArn#region}.{arnPartition#dualStackDnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{bucketArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [
                                                                                                                                                {
                                                                                                                                                    "fn": "isSet",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "Endpoint"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "fn": "parseURL",
                                                                                                                                                    "argv": [
                                                                                                                                                        {
                                                                                                                                                            "ref": "Endpoint"
                                                                                                                                                        }
                                                                                                                                                    ],
                                                                                                                                                    "assign": "url"
                                                                                                                                                }
                                                                                                                                            ],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "{url#scheme}://{url#authority}{url#path}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{bucketArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "conditions": [],
                                                                                                                                            "endpoint": {
                                                                                                                                                "url": "https://s3-outposts.{bucketArn#region}.{arnPartition#dnsSuffix}",
                                                                                                                                                "properties": {
                                                                                                                                                    "authSchemes": [
                                                                                                                                                        {
                                                                                                                                                            "disableDoubleEncoding": true,
                                                                                                                                                            "name": "sigv4",
                                                                                                                                                            "signingName": "s3-outposts",
                                                                                                                                                            "signingRegion": "{bucketArn#region}"
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                "headers": {
                                                                                                                                                    "x-amz-account-id": [
                                                                                                                                                        "{bucketArn#accountId}"
                                                                                                                                                    ],
                                                                                                                                                    "x-amz-outpost-id": [
                                                                                                                                                        "{outpostId}"
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            },
                                                                                                                                            "type": "endpoint"
                                                                                                                                        }
                                                                                                                                    ],
                                                                                                                                    "type": "tree"
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "conditions": [],
                                                                                                                                    "error": "Invalid ARN: Expected an outpost type `bucket`, found `{outpostType}`",
                                                                                                                                    "type": "error"
                                                                                                                                }
                                                                                                                            ],
                                                                                                                            "type": "tree"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "conditions": [],
                                                                                                                            "error": "Invalid ARN: expected a bucket name",
                                                                                                                            "type": "error"
                                                                                                                        }
                                                                                                                    ],
                                                                                                                    "type": "tree"
                                                                                                                },
                                                                                                                {
                                                                                                                    "conditions": [],
                                                                                                                    "error": "Invalid ARN: Expected a 4-component resource",
                                                                                                                    "type": "error"
                                                                                                                }
                                                                                                            ],
                                                                                                            "type": "tree"
                                                                                                        },
                                                                                                        {
                                                                                                            "conditions": [],
                                                                                                            "error": "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
                                                                                                            "type": "error"
                                                                                                        }
                                                                                                    ],
                                                                                                    "type": "tree"
                                                                                                },
                                                                                                {
                                                                                                    "conditions": [],
                                                                                                    "error": "Invalid ARN: missing account ID",
                                                                                                    "type": "error"
                                                                                                }
                                                                                            ],
                                                                                            "type": "tree"
                                                                                        },
                                                                                        {
                                                                                            "conditions": [],
                                                                                            "error": "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
                                                                                            "type": "error"
                                                                                        }
                                                                                    ],
                                                                                    "type": "tree"
                                                                                },
                                                                                {
                                                                                    "conditions": [],
                                                                                    "error": "Client was configured for partition `{partitionResult#name}` but ARN has `{arnPartition#name}`",
                                                                                    "type": "error"
                                                                                }
                                                                            ],
                                                                            "type": "tree"
                                                                        }
                                                                    ],
                                                                    "type": "tree"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        },
                                                        {
                                                            "conditions": [],
                                                            "error": "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`., found: `{outpostId}`",
                                                            "type": "error"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "Invalid ARN: The Outpost Id was not set",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "error": "Invalid ARN: No ARN type specified",
                                    "type": "error"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "partitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "isValidHostLabel",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "stringEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "partitionResult"
                                                                },
                                                                "name"
                                                            ]
                                                        },
                                                        "aws-cn"
                                                    ]
                                                }
                                            ],
                                            "error": "Partition does not support FIPS",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "not",
                                                    "argv": [
                                                        {
                                                            "fn": "isSet",
                                                            "argv": [
                                                                {
                                                                    "ref": "AccountId"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "error": "AccountId is required but not set",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "not",
                                                    "argv": [
                                                        {
                                                            "fn": "isValidHostLabel",
                                                            "argv": [
                                                                {
                                                                    "ref": "AccountId"
                                                                },
                                                                false
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "error": "AccountId must only contain a-z, A-Z, 0-9 and `-`.",
                                            "type": "error"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "Endpoint"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "parseURL",
                                                    "argv": [
                                                        {
                                                            "ref": "Endpoint"
                                                        }
                                                    ],
                                                    "assign": "url"
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "UseDualStack"
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "error": "Invalid Configuration: DualStack and custom endpoint are not supported",
                                                    "type": "error"
                                                },
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "isSet",
                                                            "argv": [
                                                                {
                                                                    "ref": "RequiresAccountId"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "ref": "RequiresAccountId"
                                                                },
                                                                true
                                                            ]
                                                        },
                                                        {
                                                            "fn": "isSet",
                                                            "argv": [
                                                                {
                                                                    "ref": "AccountId"
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "endpoint": {
                                                        "url": "{url#scheme}://{AccountId}.{url#authority}{url#path}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                },
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "{url#scheme}://{url#authority}{url#path}",
                                                        "properties": {
                                                            "authSchemes": [
                                                                {
                                                                    "disableDoubleEncoding": true,
                                                                    "name": "sigv4",
                                                                    "signingName": "s3",
                                                                    "signingRegion": "{Region}"
                                                                }
                                                            ]
                                                        },
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://{AccountId}.s3-control-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://s3-control-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://{AccountId}.s3-control-fips.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        false
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://s3-control-fips.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://{AccountId}.s3-control.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://s3-control.dualstack.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "RequiresAccountId"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "isSet",
                                                    "argv": [
                                                        {
                                                            "ref": "AccountId"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://{AccountId}.s3-control.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        false
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        false
                                                    ]
                                                }
                                            ],
                                            "endpoint": {
                                                "url": "https://s3-control.{Region}.{partitionResult#dnsSuffix}",
                                                "properties": {
                                                    "authSchemes": [
                                                        {
                                                            "disableDoubleEncoding": true,
                                                            "name": "sigv4",
                                                            "signingName": "s3",
                                                            "signingRegion": "{Region}"
                                                        }
                                                    ]
                                                },
                                                "headers": {}
                                            },
                                            "type": "endpoint"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "error": "Invalid region: region was not a valid DNS name.",
                                    "type": "error"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Region must be set",
                    "type": "error"
                }
            ]
        }
    }
}