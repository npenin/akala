{
    "name": "ivs",
    "commands": [
        {
            "name": "CreateEncoderConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/CreateEncoderConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateEncoderConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateEncoderConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "CreateIngestConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/CreateIngestConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateIngestConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateIngestConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "CreateParticipantToken",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/CreateParticipantToken"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateParticipantTokenResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateParticipantTokenRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "CreateStage",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/CreateStage"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateStageResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateStageRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "CreateStorageConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/CreateStorageConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateStorageConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateStorageConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeleteEncoderConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DeleteEncoderConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteEncoderConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteEncoderConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeleteIngestConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DeleteIngestConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteIngestConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteIngestConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeletePublicKey",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DeletePublicKey"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeletePublicKeyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeletePublicKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeleteStage",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DeleteStage"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteStageResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteStageRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "DeleteStorageConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DeleteStorageConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteStorageConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteStorageConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DisconnectParticipant",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/DisconnectParticipant"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisconnectParticipantResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DisconnectParticipantRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "GetComposition",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetComposition"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetCompositionResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetCompositionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetEncoderConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetEncoderConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetEncoderConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetEncoderConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetIngestConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetIngestConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetIngestConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetIngestConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetParticipant",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetParticipant"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetParticipantResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetParticipantRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetPublicKey",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetPublicKey"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetPublicKeyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetPublicKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetStage",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetStage"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStageResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStageRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "GetStageSession",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetStageSession"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStageSessionResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStageSessionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetStorageConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/GetStorageConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetStorageConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetStorageConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ImportPublicKey",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ImportPublicKey"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ImportPublicKeyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ImportPublicKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListCompositions",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListCompositions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListCompositionsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListCompositionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListEncoderConfigurations",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListEncoderConfigurations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListEncoderConfigurationsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListEncoderConfigurationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListIngestConfigurations",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListIngestConfigurations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListIngestConfigurationsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListIngestConfigurationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListParticipantEvents",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListParticipantEvents"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListParticipantEventsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListParticipantEventsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListParticipants",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListParticipants"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListParticipantsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListParticipantsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListPublicKeys",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListPublicKeys"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListPublicKeysResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListPublicKeysRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListStages",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListStages"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListStagesResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListStagesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "ListStageSessions",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListStageSessions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListStageSessionsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListStageSessionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListStorageConfigurations",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/ListStorageConfigurations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListStorageConfigurationsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListStorageConfigurationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "StartComposition",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/StartComposition"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartCompositionResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartCompositionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "StopComposition",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/StopComposition"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StopCompositionResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StopCompositionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        },
        {
            "name": "UpdateIngestConfiguration",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/UpdateIngestConfiguration"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateIngestConfigurationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateIngestConfigurationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "UpdateStage",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/UpdateStage"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateStageResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateStageRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "CreateEncoderConfigurationResponse": {
            "type": "object",
            "properties": {
                "encoderConfiguration": {
                    "$ref": "#/$defs/EncoderConfiguration"
                }
            }
        },
        "EncoderConfiguration": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                },
                "name": {
                    "$ref": "#/$defs/EncoderConfigurationName"
                },
                "video": {
                    "$ref": "#/$defs/Video"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "EncoderConfigurationArn": {
            "type": "string"
        },
        "EncoderConfigurationName": {
            "type": "string"
        },
        "Video": {
            "type": "object",
            "properties": {
                "width": {
                    "$ref": "#/$defs/Width"
                },
                "height": {
                    "$ref": "#/$defs/Height"
                },
                "framerate": {
                    "$ref": "#/$defs/Framerate"
                },
                "bitrate": {
                    "$ref": "#/$defs/Bitrate"
                }
            }
        },
        "Width": {
            "type": "integer",
            "format": "int32"
        },
        "Height": {
            "type": "integer",
            "format": "int32"
        },
        "Framerate": {
            "type": "number",
            "format": "float"
        },
        "Bitrate": {
            "type": "integer",
            "format": "int32"
        },
        "Tags": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "TagValue": {
            "type": "string"
        },
        "CreateEncoderConfigurationRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/EncoderConfigurationName"
                },
                "video": {
                    "$ref": "#/$defs/Video"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "CreateIngestConfigurationResponse": {
            "type": "object",
            "properties": {
                "ingestConfiguration": {
                    "$ref": "#/$defs/IngestConfiguration"
                }
            }
        },
        "IngestConfiguration": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/IngestConfigurationName"
                },
                "arn": {
                    "$ref": "#/$defs/IngestConfigurationArn"
                },
                "ingestProtocol": {
                    "$ref": "#/$defs/IngestProtocol"
                },
                "streamKey": {
                    "$ref": "#/$defs/StreamKey"
                },
                "stageArn": {
                    "$ref": "#/$defs/IngestConfigurationStageArn"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "state": {
                    "$ref": "#/$defs/IngestConfigurationState"
                },
                "userId": {
                    "$ref": "#/$defs/UserId"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantAttributes"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "IngestConfigurationName": {
            "type": "string"
        },
        "IngestConfigurationArn": {
            "type": "string"
        },
        "IngestProtocol": {
            "enum": [
                "RTMP",
                "RTMPS"
            ]
        },
        "StreamKey": {
            "type": "string"
        },
        "IngestConfigurationStageArn": {
            "type": "string"
        },
        "ParticipantId": {
            "type": "string"
        },
        "IngestConfigurationState": {
            "type": "string"
        },
        "UserId": {
            "type": "string"
        },
        "ParticipantAttributes": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/String"
            }
        },
        "String": {
            "type": "string"
        },
        "CreateIngestConfigurationRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/IngestConfigurationName"
                },
                "stageArn": {
                    "$ref": "#/$defs/IngestConfigurationStageArn"
                },
                "userId": {
                    "$ref": "#/$defs/UserId"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantAttributes"
                },
                "ingestProtocol": {
                    "$ref": "#/$defs/IngestProtocol"
                },
                "insecureIngest": {
                    "$ref": "#/$defs/InsecureIngest"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "InsecureIngest": {
            "type": "boolean"
        },
        "CreateParticipantTokenResponse": {
            "type": "object",
            "properties": {
                "participantToken": {
                    "$ref": "#/$defs/ParticipantToken"
                }
            }
        },
        "ParticipantToken": {
            "type": "object",
            "properties": {
                "participantId": {
                    "$ref": "#/$defs/ParticipantTokenId"
                },
                "token": {
                    "$ref": "#/$defs/ParticipantTokenString"
                },
                "userId": {
                    "$ref": "#/$defs/ParticipantTokenUserId"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantTokenAttributes"
                },
                "duration": {
                    "$ref": "#/$defs/ParticipantTokenDurationMinutes"
                },
                "capabilities": {
                    "$ref": "#/$defs/ParticipantTokenCapabilities"
                },
                "expirationTime": {
                    "$ref": "#/$defs/ParticipantTokenExpirationTime"
                }
            }
        },
        "ParticipantTokenId": {
            "type": "string"
        },
        "ParticipantTokenString": {
            "type": "string"
        },
        "ParticipantTokenUserId": {
            "type": "string"
        },
        "ParticipantTokenAttributes": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/String"
            }
        },
        "ParticipantTokenDurationMinutes": {
            "type": "integer",
            "format": "int32"
        },
        "ParticipantTokenCapabilities": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ParticipantTokenCapability"
            }
        },
        "ParticipantTokenCapability": {
            "type": "string"
        },
        "ParticipantTokenExpirationTime": {
            "type": "string",
            "format": "date-time"
        },
        "CreateParticipantTokenRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "duration": {
                    "$ref": "#/$defs/ParticipantTokenDurationMinutes"
                },
                "userId": {
                    "$ref": "#/$defs/ParticipantTokenUserId"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantTokenAttributes"
                },
                "capabilities": {
                    "$ref": "#/$defs/ParticipantTokenCapabilities"
                }
            }
        },
        "StageArn": {
            "type": "string"
        },
        "CreateStageResponse": {
            "type": "object",
            "properties": {
                "stage": {
                    "$ref": "#/$defs/Stage"
                },
                "participantTokens": {
                    "$ref": "#/$defs/ParticipantTokenList"
                }
            }
        },
        "Stage": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StageArn"
                },
                "name": {
                    "$ref": "#/$defs/StageName"
                },
                "activeSessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                },
                "autoParticipantRecordingConfiguration": {
                    "$ref": "#/$defs/AutoParticipantRecordingConfiguration"
                },
                "endpoints": {
                    "$ref": "#/$defs/StageEndpoints"
                }
            }
        },
        "StageName": {
            "type": "string"
        },
        "StageSessionId": {
            "type": "string"
        },
        "AutoParticipantRecordingConfiguration": {
            "type": "object",
            "properties": {
                "storageConfigurationArn": {
                    "$ref": "#/$defs/AutoParticipantRecordingStorageConfigurationArn"
                },
                "mediaTypes": {
                    "$ref": "#/$defs/ParticipantRecordingMediaTypeList"
                },
                "thumbnailConfiguration": {
                    "$ref": "#/$defs/ParticipantThumbnailConfiguration"
                },
                "recordingReconnectWindowSeconds": {
                    "$ref": "#/$defs/ParticipantRecordingReconnectWindowSeconds"
                }
            }
        },
        "AutoParticipantRecordingStorageConfigurationArn": {
            "type": "string"
        },
        "ParticipantRecordingMediaTypeList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ParticipantRecordingMediaType"
            }
        },
        "ParticipantRecordingMediaType": {
            "enum": [
                "AUDIO_VIDEO",
                "AUDIO_ONLY",
                "NONE"
            ]
        },
        "ParticipantThumbnailConfiguration": {
            "type": "object",
            "properties": {
                "targetIntervalSeconds": {
                    "$ref": "#/$defs/ThumbnailIntervalSeconds"
                },
                "storage": {
                    "$ref": "#/$defs/ThumbnailStorageTypeList"
                },
                "recordingMode": {
                    "$ref": "#/$defs/ThumbnailRecordingMode"
                }
            }
        },
        "ThumbnailIntervalSeconds": {
            "type": "integer",
            "format": "int32"
        },
        "ThumbnailStorageTypeList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ThumbnailStorageType"
            }
        },
        "ThumbnailStorageType": {
            "enum": [
                "SEQUENTIAL",
                "LATEST"
            ]
        },
        "ThumbnailRecordingMode": {
            "enum": [
                "INTERVAL",
                "DISABLED"
            ]
        },
        "ParticipantRecordingReconnectWindowSeconds": {
            "type": "integer",
            "format": "int32"
        },
        "StageEndpoints": {
            "type": "object",
            "properties": {
                "events": {
                    "$ref": "#/$defs/StageEndpoint"
                },
                "whip": {
                    "$ref": "#/$defs/StageEndpoint"
                },
                "rtmp": {
                    "$ref": "#/$defs/StageEndpoint"
                },
                "rtmps": {
                    "$ref": "#/$defs/StageEndpoint"
                }
            }
        },
        "StageEndpoint": {
            "type": "string"
        },
        "ParticipantTokenList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ParticipantToken"
            }
        },
        "CreateStageRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/StageName"
                },
                "participantTokenConfigurations": {
                    "$ref": "#/$defs/ParticipantTokenConfigurations"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                },
                "autoParticipantRecordingConfiguration": {
                    "$ref": "#/$defs/AutoParticipantRecordingConfiguration"
                }
            }
        },
        "ParticipantTokenConfigurations": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ParticipantTokenConfiguration"
            }
        },
        "ParticipantTokenConfiguration": {
            "type": "object",
            "properties": {
                "duration": {
                    "$ref": "#/$defs/ParticipantTokenDurationMinutes"
                },
                "userId": {
                    "$ref": "#/$defs/ParticipantTokenUserId"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantTokenAttributes"
                },
                "capabilities": {
                    "$ref": "#/$defs/ParticipantTokenCapabilities"
                }
            }
        },
        "CreateStorageConfigurationResponse": {
            "type": "object",
            "properties": {
                "storageConfiguration": {
                    "$ref": "#/$defs/StorageConfiguration"
                }
            }
        },
        "StorageConfiguration": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StorageConfigurationArn"
                },
                "name": {
                    "$ref": "#/$defs/StorageConfigurationName"
                },
                "s3": {
                    "$ref": "#/$defs/S3StorageConfiguration"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "StorageConfigurationArn": {
            "type": "string"
        },
        "StorageConfigurationName": {
            "type": "string"
        },
        "S3StorageConfiguration": {
            "type": "object",
            "properties": {
                "bucketName": {
                    "$ref": "#/$defs/S3BucketName"
                }
            }
        },
        "S3BucketName": {
            "type": "string"
        },
        "CreateStorageConfigurationRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/StorageConfigurationName"
                },
                "s3": {
                    "$ref": "#/$defs/S3StorageConfiguration"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "DeleteEncoderConfigurationResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteEncoderConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                }
            }
        },
        "DeleteIngestConfigurationResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteIngestConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/IngestConfigurationArn"
                },
                "force": {
                    "$ref": "#/$defs/Boolean"
                }
            }
        },
        "Boolean": {
            "type": "boolean"
        },
        "DeletePublicKeyResponse": {
            "type": "object",
            "properties": {}
        },
        "DeletePublicKeyRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/PublicKeyArn"
                }
            }
        },
        "PublicKeyArn": {
            "type": "string"
        },
        "DeleteStageResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteStageRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StageArn"
                }
            }
        },
        "DeleteStorageConfigurationResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteStorageConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StorageConfigurationArn"
                }
            }
        },
        "DisconnectParticipantResponse": {
            "type": "object",
            "properties": {}
        },
        "DisconnectParticipantRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantTokenId"
                },
                "reason": {
                    "$ref": "#/$defs/DisconnectParticipantReason"
                }
            }
        },
        "DisconnectParticipantReason": {
            "type": "string"
        },
        "GetCompositionResponse": {
            "type": "object",
            "properties": {
                "composition": {
                    "$ref": "#/$defs/Composition"
                }
            }
        },
        "Composition": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/CompositionArn"
                },
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "state": {
                    "$ref": "#/$defs/CompositionState"
                },
                "layout": {
                    "$ref": "#/$defs/LayoutConfiguration"
                },
                "destinations": {
                    "$ref": "#/$defs/DestinationList"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                }
            }
        },
        "CompositionArn": {
            "type": "string"
        },
        "CompositionState": {
            "type": "string"
        },
        "LayoutConfiguration": {
            "type": "object",
            "properties": {
                "grid": {
                    "$ref": "#/$defs/GridConfiguration"
                },
                "pip": {
                    "$ref": "#/$defs/PipConfiguration"
                }
            }
        },
        "GridConfiguration": {
            "type": "object",
            "properties": {
                "featuredParticipantAttribute": {
                    "$ref": "#/$defs/AttributeKey"
                },
                "omitStoppedVideo": {
                    "$ref": "#/$defs/OmitStoppedVideo"
                },
                "videoAspectRatio": {
                    "$ref": "#/$defs/VideoAspectRatio"
                },
                "videoFillMode": {
                    "$ref": "#/$defs/VideoFillMode"
                },
                "gridGap": {
                    "$ref": "#/$defs/GridGap"
                }
            }
        },
        "AttributeKey": {
            "type": "string"
        },
        "OmitStoppedVideo": {
            "type": "boolean"
        },
        "VideoAspectRatio": {
            "enum": [
                "AUTO",
                "VIDEO",
                "SQUARE",
                "PORTRAIT"
            ]
        },
        "VideoFillMode": {
            "enum": [
                "FILL",
                "COVER",
                "CONTAIN"
            ]
        },
        "GridGap": {
            "type": "integer",
            "format": "int32"
        },
        "PipConfiguration": {
            "type": "object",
            "properties": {
                "featuredParticipantAttribute": {
                    "$ref": "#/$defs/AttributeKey"
                },
                "omitStoppedVideo": {
                    "$ref": "#/$defs/OmitStoppedVideo"
                },
                "videoFillMode": {
                    "$ref": "#/$defs/VideoFillMode"
                },
                "gridGap": {
                    "$ref": "#/$defs/GridGap"
                },
                "pipParticipantAttribute": {
                    "$ref": "#/$defs/AttributeKey"
                },
                "pipBehavior": {
                    "$ref": "#/$defs/PipBehavior"
                },
                "pipOffset": {
                    "$ref": "#/$defs/PipOffset"
                },
                "pipPosition": {
                    "$ref": "#/$defs/PipPosition"
                },
                "pipWidth": {
                    "$ref": "#/$defs/PipWidth"
                },
                "pipHeight": {
                    "$ref": "#/$defs/PipHeight"
                }
            }
        },
        "PipBehavior": {
            "enum": [
                "STATIC",
                "DYNAMIC"
            ]
        },
        "PipOffset": {
            "type": "integer",
            "format": "int32"
        },
        "PipPosition": {
            "enum": [
                "TOP_LEFT",
                "TOP_RIGHT",
                "BOTTOM_LEFT",
                "BOTTOM_RIGHT"
            ]
        },
        "PipWidth": {
            "type": "integer",
            "format": "int32"
        },
        "PipHeight": {
            "type": "integer",
            "format": "int32"
        },
        "DestinationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Destination"
            }
        },
        "Destination": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "state": {
                    "$ref": "#/$defs/DestinationState"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                },
                "configuration": {
                    "$ref": "#/$defs/DestinationConfiguration"
                },
                "detail": {
                    "$ref": "#/$defs/DestinationDetail"
                }
            }
        },
        "DestinationState": {
            "type": "string"
        },
        "Time": {
            "type": "string",
            "format": "date-time"
        },
        "DestinationConfiguration": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/DestinationConfigurationName"
                },
                "channel": {
                    "$ref": "#/$defs/ChannelDestinationConfiguration"
                },
                "s3": {
                    "$ref": "#/$defs/S3DestinationConfiguration"
                }
            }
        },
        "DestinationConfigurationName": {
            "type": "string"
        },
        "ChannelDestinationConfiguration": {
            "type": "object",
            "properties": {
                "channelArn": {
                    "$ref": "#/$defs/ChannelArn"
                },
                "encoderConfigurationArn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                }
            }
        },
        "ChannelArn": {
            "type": "string"
        },
        "S3DestinationConfiguration": {
            "type": "object",
            "properties": {
                "storageConfigurationArn": {
                    "$ref": "#/$defs/StorageConfigurationArn"
                },
                "encoderConfigurationArns": {
                    "$ref": "#/$defs/EncoderConfigurationArnList"
                },
                "recordingConfiguration": {
                    "$ref": "#/$defs/RecordingConfiguration"
                },
                "thumbnailConfigurations": {
                    "$ref": "#/$defs/CompositionThumbnailConfigurationList"
                }
            }
        },
        "EncoderConfigurationArnList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EncoderConfigurationArn"
            }
        },
        "RecordingConfiguration": {
            "type": "object",
            "properties": {
                "format": {
                    "$ref": "#/$defs/RecordingConfigurationFormat"
                }
            }
        },
        "RecordingConfigurationFormat": {
            "type": "string"
        },
        "CompositionThumbnailConfigurationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CompositionThumbnailConfiguration"
            }
        },
        "CompositionThumbnailConfiguration": {
            "type": "object",
            "properties": {
                "targetIntervalSeconds": {
                    "$ref": "#/$defs/ThumbnailIntervalSeconds"
                },
                "storage": {
                    "$ref": "#/$defs/ThumbnailStorageTypeList"
                }
            }
        },
        "DestinationDetail": {
            "type": "object",
            "properties": {
                "s3": {
                    "$ref": "#/$defs/S3Detail"
                }
            }
        },
        "S3Detail": {
            "type": "object",
            "properties": {
                "recordingPrefix": {
                    "$ref": "#/$defs/String"
                }
            }
        },
        "GetCompositionRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/CompositionArn"
                }
            }
        },
        "GetEncoderConfigurationResponse": {
            "type": "object",
            "properties": {
                "encoderConfiguration": {
                    "$ref": "#/$defs/EncoderConfiguration"
                }
            }
        },
        "GetEncoderConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                }
            }
        },
        "GetIngestConfigurationResponse": {
            "type": "object",
            "properties": {
                "ingestConfiguration": {
                    "$ref": "#/$defs/IngestConfiguration"
                }
            }
        },
        "GetIngestConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/IngestConfigurationArn"
                }
            }
        },
        "GetParticipantResponse": {
            "type": "object",
            "properties": {
                "participant": {
                    "$ref": "#/$defs/Participant"
                }
            }
        },
        "Participant": {
            "type": "object",
            "properties": {
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "userId": {
                    "$ref": "#/$defs/UserId"
                },
                "state": {
                    "$ref": "#/$defs/ParticipantState"
                },
                "firstJoinTime": {
                    "$ref": "#/$defs/Time"
                },
                "attributes": {
                    "$ref": "#/$defs/ParticipantAttributes"
                },
                "published": {
                    "$ref": "#/$defs/Published"
                },
                "ispName": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "osName": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "osVersion": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "browserName": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "browserVersion": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "sdkVersion": {
                    "$ref": "#/$defs/ParticipantClientAttribute"
                },
                "recordingS3BucketName": {
                    "$ref": "#/$defs/ParticipantRecordingS3BucketName"
                },
                "recordingS3Prefix": {
                    "$ref": "#/$defs/ParticipantRecordingS3Prefix"
                },
                "recordingState": {
                    "$ref": "#/$defs/ParticipantRecordingState"
                },
                "protocol": {
                    "$ref": "#/$defs/ParticipantProtocol"
                }
            }
        },
        "ParticipantState": {
            "type": "string"
        },
        "Published": {
            "type": "boolean"
        },
        "ParticipantClientAttribute": {
            "type": "string"
        },
        "ParticipantRecordingS3BucketName": {
            "type": "string"
        },
        "ParticipantRecordingS3Prefix": {
            "type": "string"
        },
        "ParticipantRecordingState": {
            "type": "string"
        },
        "ParticipantProtocol": {
            "enum": [
                "UNKNOWN",
                "WHIP",
                "RTMP",
                "RTMPS"
            ]
        },
        "GetParticipantRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                }
            }
        },
        "GetPublicKeyResponse": {
            "type": "object",
            "properties": {
                "publicKey": {
                    "$ref": "#/$defs/PublicKey"
                }
            }
        },
        "PublicKey": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/PublicKeyArn"
                },
                "name": {
                    "$ref": "#/$defs/PublicKeyName"
                },
                "publicKeyMaterial": {
                    "$ref": "#/$defs/PublicKeyMaterial"
                },
                "fingerprint": {
                    "$ref": "#/$defs/PublicKeyFingerprint"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "PublicKeyName": {
            "type": "string"
        },
        "PublicKeyMaterial": {
            "type": "string"
        },
        "PublicKeyFingerprint": {
            "type": "string"
        },
        "GetPublicKeyRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/PublicKeyArn"
                }
            }
        },
        "GetStageResponse": {
            "type": "object",
            "properties": {
                "stage": {
                    "$ref": "#/$defs/Stage"
                }
            }
        },
        "GetStageRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StageArn"
                }
            }
        },
        "GetStageSessionResponse": {
            "type": "object",
            "properties": {
                "stageSession": {
                    "$ref": "#/$defs/StageSession"
                }
            }
        },
        "StageSession": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                }
            }
        },
        "GetStageSessionRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                }
            }
        },
        "GetStorageConfigurationResponse": {
            "type": "object",
            "properties": {
                "storageConfiguration": {
                    "$ref": "#/$defs/StorageConfiguration"
                }
            }
        },
        "GetStorageConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StorageConfigurationArn"
                }
            }
        },
        "ImportPublicKeyResponse": {
            "type": "object",
            "properties": {
                "publicKey": {
                    "$ref": "#/$defs/PublicKey"
                }
            }
        },
        "ImportPublicKeyRequest": {
            "type": "object",
            "properties": {
                "publicKeyMaterial": {
                    "$ref": "#/$defs/PublicKeyMaterial"
                },
                "name": {
                    "$ref": "#/$defs/PublicKeyName"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListCompositionsResponse": {
            "type": "object",
            "properties": {
                "compositions": {
                    "$ref": "#/$defs/CompositionSummaryList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "CompositionSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CompositionSummary"
            }
        },
        "CompositionSummary": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/CompositionArn"
                },
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "destinations": {
                    "$ref": "#/$defs/DestinationSummaryList"
                },
                "state": {
                    "$ref": "#/$defs/CompositionState"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                }
            }
        },
        "DestinationSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DestinationSummary"
            }
        },
        "DestinationSummary": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/String"
                },
                "state": {
                    "$ref": "#/$defs/DestinationState"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                }
            }
        },
        "PaginationToken": {
            "type": "string"
        },
        "ListCompositionsRequest": {
            "type": "object",
            "properties": {
                "filterByStageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "filterByEncoderConfigurationArn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxCompositionResults"
                }
            }
        },
        "MaxCompositionResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListEncoderConfigurationsResponse": {
            "type": "object",
            "properties": {
                "encoderConfigurations": {
                    "$ref": "#/$defs/EncoderConfigurationSummaryList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "EncoderConfigurationSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EncoderConfigurationSummary"
            }
        },
        "EncoderConfigurationSummary": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/EncoderConfigurationArn"
                },
                "name": {
                    "$ref": "#/$defs/EncoderConfigurationName"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListEncoderConfigurationsRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxEncoderConfigurationResults"
                }
            }
        },
        "MaxEncoderConfigurationResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListIngestConfigurationsResponse": {
            "type": "object",
            "properties": {
                "ingestConfigurations": {
                    "$ref": "#/$defs/IngestConfigurationList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "IngestConfigurationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/IngestConfigurationSummary"
            }
        },
        "IngestConfigurationSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/IngestConfigurationName"
                },
                "arn": {
                    "$ref": "#/$defs/IngestConfigurationArn"
                },
                "ingestProtocol": {
                    "$ref": "#/$defs/IngestProtocol"
                },
                "stageArn": {
                    "$ref": "#/$defs/IngestConfigurationStageArn"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "state": {
                    "$ref": "#/$defs/IngestConfigurationState"
                },
                "userId": {
                    "$ref": "#/$defs/UserId"
                }
            }
        },
        "ListIngestConfigurationsRequest": {
            "type": "object",
            "properties": {
                "filterByStageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "filterByState": {
                    "$ref": "#/$defs/IngestConfigurationState"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxIngestConfigurationResults"
                }
            }
        },
        "MaxIngestConfigurationResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListParticipantEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "$ref": "#/$defs/EventList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "EventList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Event"
            }
        },
        "Event": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/EventName"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "eventTime": {
                    "$ref": "#/$defs/Time"
                },
                "remoteParticipantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "errorCode": {
                    "$ref": "#/$defs/EventErrorCode"
                }
            }
        },
        "EventName": {
            "type": "string"
        },
        "EventErrorCode": {
            "enum": [
                "INSUFFICIENT_CAPABILITIES",
                "QUOTA_EXCEEDED",
                "PUBLISHER_NOT_FOUND",
                "BITRATE_EXCEEDED",
                "RESOLUTION_EXCEEDED",
                "STREAM_DURATION_EXCEEDED",
                "INVALID_AUDIO_CODEC",
                "INVALID_VIDEO_CODEC",
                "INVALID_PROTOCOL",
                "INVALID_STREAM_KEY",
                "REUSE_OF_STREAM_KEY",
                "B_FRAME_PRESENT",
                "INVALID_INPUT",
                "INTERNAL_SERVER_EXCEPTION"
            ]
        },
        "ListParticipantEventsRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxParticipantEventResults"
                }
            }
        },
        "MaxParticipantEventResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListParticipantsResponse": {
            "type": "object",
            "properties": {
                "participants": {
                    "$ref": "#/$defs/ParticipantList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ParticipantList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ParticipantSummary"
            }
        },
        "ParticipantSummary": {
            "type": "object",
            "properties": {
                "participantId": {
                    "$ref": "#/$defs/ParticipantId"
                },
                "userId": {
                    "$ref": "#/$defs/UserId"
                },
                "state": {
                    "$ref": "#/$defs/ParticipantState"
                },
                "firstJoinTime": {
                    "$ref": "#/$defs/Time"
                },
                "published": {
                    "$ref": "#/$defs/Published"
                },
                "recordingState": {
                    "$ref": "#/$defs/ParticipantRecordingState"
                }
            }
        },
        "ListParticipantsRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "filterByUserId": {
                    "$ref": "#/$defs/UserId"
                },
                "filterByPublished": {
                    "$ref": "#/$defs/Published"
                },
                "filterByState": {
                    "$ref": "#/$defs/ParticipantState"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxParticipantResults"
                },
                "filterByRecordingState": {
                    "$ref": "#/$defs/ParticipantRecordingFilterByRecordingState"
                }
            }
        },
        "MaxParticipantResults": {
            "type": "integer",
            "format": "int32"
        },
        "ParticipantRecordingFilterByRecordingState": {
            "type": "string"
        },
        "ListPublicKeysResponse": {
            "type": "object",
            "properties": {
                "publicKeys": {
                    "$ref": "#/$defs/PublicKeyList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "PublicKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/PublicKeySummary"
            }
        },
        "PublicKeySummary": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/PublicKeyArn"
                },
                "name": {
                    "$ref": "#/$defs/PublicKeyName"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListPublicKeysRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxPublicKeyResults"
                }
            }
        },
        "MaxPublicKeyResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListStagesResponse": {
            "type": "object",
            "properties": {
                "stages": {
                    "$ref": "#/$defs/StageSummaryList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "StageSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StageSummary"
            }
        },
        "StageSummary": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StageArn"
                },
                "name": {
                    "$ref": "#/$defs/StageName"
                },
                "activeSessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListStagesRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxStageResults"
                }
            }
        },
        "MaxStageResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListStageSessionsResponse": {
            "type": "object",
            "properties": {
                "stageSessions": {
                    "$ref": "#/$defs/StageSessionList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "StageSessionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StageSessionSummary"
            }
        },
        "StageSessionSummary": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "$ref": "#/$defs/StageSessionId"
                },
                "startTime": {
                    "$ref": "#/$defs/Time"
                },
                "endTime": {
                    "$ref": "#/$defs/Time"
                }
            }
        },
        "ListStageSessionsRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxStageSessionResults"
                }
            }
        },
        "MaxStageSessionResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListStorageConfigurationsResponse": {
            "type": "object",
            "properties": {
                "storageConfigurations": {
                    "$ref": "#/$defs/StorageConfigurationSummaryList"
                },
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "StorageConfigurationSummaryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/StorageConfigurationSummary"
            }
        },
        "StorageConfigurationSummary": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StorageConfigurationArn"
                },
                "name": {
                    "$ref": "#/$defs/StorageConfigurationName"
                },
                "s3": {
                    "$ref": "#/$defs/S3StorageConfiguration"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListStorageConfigurationsRequest": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "maxResults": {
                    "$ref": "#/$defs/MaxStorageConfigurationResults"
                }
            }
        },
        "MaxStorageConfigurationResults": {
            "type": "integer",
            "format": "int32"
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                }
            }
        },
        "ResourceArn": {
            "type": "string"
        },
        "StartCompositionResponse": {
            "type": "object",
            "properties": {
                "composition": {
                    "$ref": "#/$defs/Composition"
                }
            }
        },
        "StartCompositionRequest": {
            "type": "object",
            "properties": {
                "stageArn": {
                    "$ref": "#/$defs/StageArn"
                },
                "idempotencyToken": {
                    "$ref": "#/$defs/CompositionClientToken"
                },
                "layout": {
                    "$ref": "#/$defs/LayoutConfiguration"
                },
                "destinations": {
                    "$ref": "#/$defs/DestinationConfigurationList"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "CompositionClientToken": {
            "type": "string"
        },
        "DestinationConfigurationList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DestinationConfiguration"
            }
        },
        "StopCompositionResponse": {
            "type": "object",
            "properties": {}
        },
        "StopCompositionRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/CompositionArn"
                }
            }
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/ResourceArn"
                },
                "tagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "TagKey": {
            "type": "string"
        },
        "UpdateIngestConfigurationResponse": {
            "type": "object",
            "properties": {
                "ingestConfiguration": {
                    "$ref": "#/$defs/IngestConfiguration"
                }
            }
        },
        "UpdateIngestConfigurationRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/IngestConfigurationArn"
                },
                "stageArn": {
                    "$ref": "#/$defs/IngestConfigurationStageArn"
                }
            }
        },
        "UpdateStageResponse": {
            "type": "object",
            "properties": {
                "stage": {
                    "$ref": "#/$defs/Stage"
                }
            }
        },
        "UpdateStageRequest": {
            "type": "object",
            "properties": {
                "arn": {
                    "$ref": "#/$defs/StageArn"
                },
                "name": {
                    "$ref": "#/$defs/StageName"
                },
                "autoParticipantRecordingConfiguration": {
                    "$ref": "#/$defs/AutoParticipantRecordingConfiguration"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    "type": "error"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": {
                                            "ref": "Endpoint"
                                        },
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ]
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "aws.partition",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                }
                                            ],
                                            "assign": "PartitionResult"
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://ivsrealtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://ivsrealtime-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS is enabled but this partition does not support FIPS",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://ivsrealtime.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "DualStack is enabled but this partition does not support DualStack",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://ivsrealtime.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        }
                                    ],
                                    "type": "tree"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [],
                            "error": "Invalid Configuration: Missing Region",
                            "type": "error"
                        }
                    ],
                    "type": "tree"
                }
            ]
        }
    }
}