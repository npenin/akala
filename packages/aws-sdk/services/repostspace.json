{
    "name": "repostspace",
    "commands": [
        {
            "name": "BatchAddRole",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/spaces/{spaceId}/roles"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/BatchAddRoleOutput"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/BatchAddRoleInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "BatchRemoveRole",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "body"
                        }
                    ],
                    "method": "PATCH",
                    "route": "/spaces/{spaceId}/roles"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/BatchRemoveRoleOutput"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/BatchRemoveRoleInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "CreateSpace",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/spaces"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateSpaceOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateSpaceInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeleteSpace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/spaces/{spaceId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteSpaceInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "DeregisterAdmin",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "adminId": "route.adminId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/spaces/{spaceId}/admins/{adminId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0.adminId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeregisterAdminInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GetSpace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/spaces/{spaceId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetSpaceOutput"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetSpaceInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListSpaces",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/spaces"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListSpacesOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListSpacesInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "RegisterAdmin",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "adminId": "route.adminId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/spaces/{spaceId}/admins/{adminId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0.adminId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/RegisterAdminInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "SendInvites",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/spaces/{spaceId}/invite"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/SendInvitesInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "resourceArn": "route.resourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/tags/{resourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "param.0.resourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "UpdateSpace",
            "config": {
                "http": {
                    "inject": [
                        {
                            "spaceId": "route.spaceId",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "/spaces/{spaceId}"
                },
                "schema": {
                    "resultSchema": {
                        "type": "object"
                    },
                    "inject": [
                        "param.0.spaceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateSpaceInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "BatchAddRoleOutput": {
            "type": "object",
            "properties": {
                "addedAccessorIds": {
                    "$ref": "#/$defs/AccessorIdList"
                },
                "errors": {
                    "$ref": "#/$defs/BatchErrorList"
                }
            }
        },
        "AccessorIdList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AccessorId"
            }
        },
        "AccessorId": {
            "type": "string"
        },
        "BatchErrorList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/BatchError"
            }
        },
        "BatchError": {
            "type": "object",
            "properties": {
                "accessorId": {
                    "$ref": "#/$defs/AccessorId"
                },
                "error": {
                    "$ref": "#/$defs/ErrorCode"
                },
                "message": {
                    "$ref": "#/$defs/ErrorMessage"
                }
            }
        },
        "ErrorCode": {
            "type": "integer",
            "format": "int32"
        },
        "ErrorMessage": {
            "type": "string"
        },
        "BatchAddRoleInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "accessorIds": {
                    "$ref": "#/$defs/AccessorIdList"
                },
                "role": {
                    "$ref": "#/$defs/Role"
                }
            }
        },
        "SpaceId": {
            "type": "string"
        },
        "Role": {
            "enum": [
                "EXPERT",
                "MODERATOR",
                "ADMINISTRATOR",
                "SUPPORTREQUESTOR"
            ]
        },
        "BatchRemoveRoleOutput": {
            "type": "object",
            "properties": {
                "removedAccessorIds": {
                    "$ref": "#/$defs/AccessorIdList"
                },
                "errors": {
                    "$ref": "#/$defs/BatchErrorList"
                }
            }
        },
        "BatchRemoveRoleInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "accessorIds": {
                    "$ref": "#/$defs/AccessorIdList"
                },
                "role": {
                    "$ref": "#/$defs/Role"
                }
            }
        },
        "CreateSpaceOutput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                }
            }
        },
        "CreateSpaceInput": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/SpaceName"
                },
                "subdomain": {
                    "$ref": "#/$defs/SpaceSubdomain"
                },
                "tier": {
                    "$ref": "#/$defs/TierLevel"
                },
                "description": {
                    "$ref": "#/$defs/SpaceDescription"
                },
                "userKMSKey": {
                    "$ref": "#/$defs/KMSKey"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                },
                "roleArn": {
                    "$ref": "#/$defs/Arn"
                }
            }
        },
        "SpaceName": {
            "type": "string"
        },
        "SpaceSubdomain": {
            "type": "string"
        },
        "TierLevel": {
            "enum": [
                "BASIC",
                "STANDARD"
            ]
        },
        "SpaceDescription": {
            "type": "string"
        },
        "KMSKey": {
            "type": "string"
        },
        "Tags": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/TagValue"
            }
        },
        "TagValue": {
            "type": "string"
        },
        "Arn": {
            "type": "string"
        },
        "DeleteSpaceInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                }
            }
        },
        "DeregisterAdminInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "adminId": {
                    "$ref": "#/$defs/AdminId"
                }
            }
        },
        "AdminId": {
            "type": "string"
        },
        "GetSpaceOutput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "arn": {
                    "$ref": "#/$defs/Arn"
                },
                "name": {
                    "$ref": "#/$defs/SpaceName"
                },
                "status": {
                    "$ref": "#/$defs/ProvisioningStatus"
                },
                "configurationStatus": {
                    "$ref": "#/$defs/ConfigurationStatus"
                },
                "clientId": {
                    "$ref": "#/$defs/ClientId"
                },
                "description": {
                    "$ref": "#/$defs/SpaceDescription"
                },
                "vanityDomainStatus": {
                    "$ref": "#/$defs/VanityDomainStatus"
                },
                "vanityDomain": {
                    "$ref": "#/$defs/Url"
                },
                "randomDomain": {
                    "$ref": "#/$defs/Url"
                },
                "customerRoleArn": {
                    "$ref": "#/$defs/Arn"
                },
                "createDateTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "deleteDateTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "tier": {
                    "$ref": "#/$defs/TierLevel"
                },
                "storageLimit": {
                    "$ref": "#/$defs/StorageLimit"
                },
                "userAdmins": {
                    "$ref": "#/$defs/UserAdmins"
                },
                "groupAdmins": {
                    "$ref": "#/$defs/GroupAdmins"
                },
                "roles": {
                    "$ref": "#/$defs/Roles"
                },
                "userKMSKey": {
                    "$ref": "#/$defs/KMSKey"
                },
                "userCount": {
                    "$ref": "#/$defs/UserCount"
                },
                "contentSize": {
                    "$ref": "#/$defs/ContentSize"
                }
            }
        },
        "ProvisioningStatus": {
            "type": "string"
        },
        "ConfigurationStatus": {
            "enum": [
                "CONFIGURED",
                "UNCONFIGURED"
            ]
        },
        "ClientId": {
            "type": "string"
        },
        "VanityDomainStatus": {
            "enum": [
                "PENDING",
                "APPROVED",
                "UNAPPROVED"
            ]
        },
        "Url": {
            "type": "string"
        },
        "StorageLimit": {
            "type": "integer",
            "format": "int64"
        },
        "UserAdmins": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AdminId"
            }
        },
        "GroupAdmins": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/AdminId"
            }
        },
        "Roles": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/RoleList"
            }
        },
        "RoleList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Role"
            }
        },
        "UserCount": {
            "type": "integer",
            "format": "int32"
        },
        "ContentSize": {
            "type": "integer",
            "format": "int64"
        },
        "GetSpaceInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                }
            }
        },
        "ListSpacesOutput": {
            "type": "object",
            "properties": {
                "spaces": {
                    "$ref": "#/$defs/SpacesList"
                },
                "nextToken": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "SpacesList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/SpaceData"
            }
        },
        "SpaceData": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "arn": {
                    "$ref": "#/$defs/Arn"
                },
                "name": {
                    "$ref": "#/$defs/SpaceName"
                },
                "description": {
                    "$ref": "#/$defs/SpaceDescription"
                },
                "status": {
                    "$ref": "#/$defs/ProvisioningStatus"
                },
                "configurationStatus": {
                    "$ref": "#/$defs/ConfigurationStatus"
                },
                "vanityDomainStatus": {
                    "$ref": "#/$defs/VanityDomainStatus"
                },
                "vanityDomain": {
                    "$ref": "#/$defs/Url"
                },
                "randomDomain": {
                    "$ref": "#/$defs/Url"
                },
                "tier": {
                    "$ref": "#/$defs/TierLevel"
                },
                "storageLimit": {
                    "$ref": "#/$defs/StorageLimit"
                },
                "createDateTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "deleteDateTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "userKMSKey": {
                    "$ref": "#/$defs/KMSKey"
                },
                "userCount": {
                    "$ref": "#/$defs/UserCount"
                },
                "contentSize": {
                    "$ref": "#/$defs/ContentSize"
                }
            }
        },
        "ListSpacesInput": {
            "type": "object",
            "properties": {
                "nextToken": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "maxResults": {
                    "$ref": "#/$defs/ListSpacesLimit"
                }
            }
        },
        "ListSpacesLimit": {
            "type": "integer",
            "format": "int32"
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/Arn"
                }
            }
        },
        "RegisterAdminInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "adminId": {
                    "$ref": "#/$defs/AdminId"
                }
            }
        },
        "SendInvitesInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "accessorIds": {
                    "$ref": "#/$defs/AccessorIdList"
                },
                "title": {
                    "$ref": "#/$defs/InviteTitle"
                },
                "body": {
                    "$ref": "#/$defs/InviteBody"
                }
            }
        },
        "InviteTitle": {
            "type": "string"
        },
        "InviteBody": {
            "type": "string"
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/Arn"
                },
                "tags": {
                    "$ref": "#/$defs/Tags"
                }
            }
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "resourceArn": {
                    "$ref": "#/$defs/Arn"
                },
                "tagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "TagKey": {
            "type": "string"
        },
        "UpdateSpaceInput": {
            "type": "object",
            "properties": {
                "spaceId": {
                    "$ref": "#/$defs/SpaceId"
                },
                "description": {
                    "$ref": "#/$defs/SpaceDescription"
                },
                "tier": {
                    "$ref": "#/$defs/TierLevel"
                },
                "roleArn": {
                    "$ref": "#/$defs/Arn"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    "type": "error"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": {
                                            "ref": "Endpoint"
                                        },
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ]
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "aws.partition",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                }
                                            ],
                                            "assign": "PartitionResult"
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://repostspace-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://repostspace-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS is enabled but this partition does not support FIPS",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://repostspace.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "DualStack is enabled but this partition does not support DualStack",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://repostspace.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        }
                                    ],
                                    "type": "tree"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [],
                            "error": "Invalid Configuration: Missing Region",
                            "type": "error"
                        }
                    ],
                    "type": "tree"
                }
            ]
        }
    }
}