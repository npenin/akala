{
    "name": "neptune-db",
    "commands": [
        {
            "name": "CancelGremlinQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelGremlinQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelGremlinQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelGremlinQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CancelLoaderJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelLoaderJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelLoaderJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelLoaderJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CancelMLDataProcessingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelMLDataProcessingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelMLDataProcessingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelMLDataProcessingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CancelMLModelTrainingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelMLModelTrainingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelMLModelTrainingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelMLModelTrainingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CancelMLModelTransformJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelMLModelTransformJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelMLModelTransformJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelMLModelTransformJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CancelOpenCypherQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CancelOpenCypherQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CancelOpenCypherQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CancelOpenCypherQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "CreateMLEndpoint",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "CreateMLEndpoint"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateMLEndpointOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateMLEndpointInput"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteMLEndpoint",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "DeleteMLEndpoint"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteMLEndpointOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteMLEndpointInput"
                        }
                    }
                }
            }
        },
        {
            "name": "DeletePropertygraphStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "DeletePropertygraphStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeletePropertygraphStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "DeleteSparqlStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "DeleteSparqlStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteSparqlStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteFastReset",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteFastReset"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteFastResetOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteFastResetInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteGremlinExplainQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteGremlinExplainQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteGremlinExplainQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteGremlinExplainQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteGremlinProfileQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteGremlinProfileQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteGremlinProfileQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteGremlinProfileQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteGremlinQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteGremlinQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteGremlinQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteGremlinQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteOpenCypherExplainQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteOpenCypherExplainQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteOpenCypherExplainQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteOpenCypherExplainQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ExecuteOpenCypherQuery",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ExecuteOpenCypherQuery"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ExecuteOpenCypherQueryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ExecuteOpenCypherQueryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetEngineStatus",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetEngineStatus"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetEngineStatusOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "GetGremlinQueryStatus",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetGremlinQueryStatus"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetGremlinQueryStatusOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetGremlinQueryStatusInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetLoaderJobStatus",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetLoaderJobStatus"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetLoaderJobStatusOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetLoaderJobStatusInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMLDataProcessingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetMLDataProcessingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMLDataProcessingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMLDataProcessingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMLEndpoint",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetMLEndpoint"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMLEndpointOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMLEndpointInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMLModelTrainingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetMLModelTrainingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMLModelTrainingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMLModelTrainingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetMLModelTransformJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetMLModelTransformJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetMLModelTransformJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetMLModelTransformJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetOpenCypherQueryStatus",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetOpenCypherQueryStatus"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetOpenCypherQueryStatusOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetOpenCypherQueryStatusInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetPropertygraphStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetPropertygraphStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetPropertygraphStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "GetPropertygraphStream",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetPropertygraphStream"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetPropertygraphStreamOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetPropertygraphStreamInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetPropertygraphSummary",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetPropertygraphSummary"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetPropertygraphSummaryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetPropertygraphSummaryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetRDFGraphSummary",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetRDFGraphSummary"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetRDFGraphSummaryOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetRDFGraphSummaryInput"
                        }
                    }
                }
            }
        },
        {
            "name": "GetSparqlStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetSparqlStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetSparqlStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        {
            "name": "GetSparqlStream",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "GetSparqlStream"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetSparqlStreamOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetSparqlStreamInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListGremlinQueries",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListGremlinQueries"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListGremlinQueriesOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListGremlinQueriesInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListLoaderJobs",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListLoaderJobs"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListLoaderJobsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListLoaderJobsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMLDataProcessingJobs",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListMLDataProcessingJobs"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMLDataProcessingJobsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMLDataProcessingJobsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMLEndpoints",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListMLEndpoints"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMLEndpointsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMLEndpointsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMLModelTrainingJobs",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListMLModelTrainingJobs"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMLModelTrainingJobsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMLModelTrainingJobsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListMLModelTransformJobs",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListMLModelTransformJobs"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListMLModelTransformJobsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListMLModelTransformJobsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ListOpenCypherQueries",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ListOpenCypherQueries"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListOpenCypherQueriesOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListOpenCypherQueriesInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ManagePropertygraphStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ManagePropertygraphStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ManagePropertygraphStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ManagePropertygraphStatisticsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "ManageSparqlStatistics",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "ManageSparqlStatistics"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ManageSparqlStatisticsOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ManageSparqlStatisticsInput"
                        }
                    }
                }
            }
        },
        {
            "name": "StartLoaderJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "StartLoaderJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartLoaderJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartLoaderJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "StartMLDataProcessingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "StartMLDataProcessingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartMLDataProcessingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartMLDataProcessingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "StartMLModelTrainingJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "StartMLModelTrainingJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartMLModelTrainingJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartMLModelTrainingJobInput"
                        }
                    }
                }
            }
        },
        {
            "name": "StartMLModelTransformJob",
            "config": {
                "http": {
                    "inject": [
                        "param.0"
                    ],
                    "method": "POST",
                    "route": "/",
                    "type": "json",
                    "headers": {
                        "X-Amz-Target": "StartMLModelTransformJob"
                    }
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartMLModelTransformJobOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartMLModelTransformJobInput"
                        }
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "CancelGremlinQueryOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelGremlinQueryInput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelLoaderJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelLoaderJobInput": {
            "type": "object",
            "properties": {
                "loadId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelMLDataProcessingJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelMLDataProcessingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "clean": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "CancelMLModelTrainingJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelMLModelTrainingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "clean": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "CancelMLModelTransformJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CancelMLModelTransformJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "clean": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "CancelOpenCypherQueryOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "CancelOpenCypherQueryInput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "silent": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "CreateMLEndpointOutput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "creationTimeInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                }
            }
        },
        "CreateMLEndpointInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "mlModelTrainingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "mlModelTransformJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "update": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "modelName": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "instanceType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "instanceCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "volumeEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "DeleteMLEndpointOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "DeleteMLEndpointInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "clean": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "DeletePropertygraphStatisticsOutput": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/DeleteStatisticsValueMap"
                }
            }
        },
        "DeleteStatisticsValueMap": {
            "type": "object",
            "properties": {
                "active": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "statisticsId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "DeleteSparqlStatisticsOutput": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/DeleteStatisticsValueMap"
                }
            }
        },
        "ExecuteFastResetOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/FastResetToken"
                }
            }
        },
        "FastResetToken": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ExecuteFastResetInput": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/$defs/Action"
                },
                "token": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "Action": {
            "enum": [
                "INITIALIZE_RESET",
                "PERFORM_RESET"
            ]
        },
        "ExecuteGremlinExplainQueryOutput": {
            "type": "object",
            "properties": {
                "output": {
                    "$ref": "#/$defs/ReportAsText"
                }
            }
        },
        "ReportAsText": {
            "type": "string",
            "format": "binary"
        },
        "ExecuteGremlinExplainQueryInput": {
            "type": "object",
            "properties": {
                "gremlinQuery": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ExecuteGremlinProfileQueryOutput": {
            "type": "object",
            "properties": {
                "output": {
                    "$ref": "#/$defs/ReportAsText"
                }
            }
        },
        "ExecuteGremlinProfileQueryInput": {
            "type": "object",
            "properties": {
                "gremlinQuery": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "results": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "chop": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "serializer": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "indexOps": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "ExecuteGremlinQueryOutput": {
            "type": "object",
            "properties": {
                "requestId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "status": {
                    "$ref": "#/$defs/GremlinQueryStatusAttributes"
                },
                "result": {
                    "$ref": "#/$defs/smithy.api#Document"
                },
                "meta": {
                    "$ref": "#/$defs/smithy.api#Document"
                }
            }
        },
        "GremlinQueryStatusAttributes": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "code": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "attributes": {
                    "$ref": "#/$defs/smithy.api#Document"
                }
            }
        },
        "ExecuteGremlinQueryInput": {
            "type": "object",
            "properties": {
                "gremlinQuery": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "serializer": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ExecuteOpenCypherExplainQueryOutput": {
            "type": "object",
            "properties": {
                "results": {
                    "$ref": "#/$defs/smithy.api#Blob"
                }
            }
        },
        "ExecuteOpenCypherExplainQueryInput": {
            "type": "object",
            "properties": {
                "openCypherQuery": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "parameters": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "explainMode": {
                    "$ref": "#/$defs/OpenCypherExplainMode"
                }
            }
        },
        "OpenCypherExplainMode": {
            "enum": [
                "STATIC",
                "DYNAMIC",
                "DETAILS"
            ]
        },
        "ExecuteOpenCypherQueryOutput": {
            "type": "object",
            "properties": {
                "results": {
                    "$ref": "#/$defs/smithy.api#Document"
                }
            }
        },
        "ExecuteOpenCypherQueryInput": {
            "type": "object",
            "properties": {
                "openCypherQuery": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "parameters": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetEngineStatusOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "startTime": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "dbEngineVersion": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "role": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "dfeQueryEngine": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "gremlin": {
                    "$ref": "#/$defs/QueryLanguageVersion"
                },
                "sparql": {
                    "$ref": "#/$defs/QueryLanguageVersion"
                },
                "opencypher": {
                    "$ref": "#/$defs/QueryLanguageVersion"
                },
                "labMode": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "rollingBackTrxCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "rollingBackTrxEarliestStartTime": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "features": {
                    "$ref": "#/$defs/DocumentValuedMap"
                },
                "settings": {
                    "$ref": "#/$defs/StringValuedMap"
                }
            }
        },
        "QueryLanguageVersion": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "StringValuedMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "DocumentValuedMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/smithy.api#Document"
            }
        },
        "GetGremlinQueryStatusOutput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryString": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryEvalStats": {
                    "$ref": "#/$defs/QueryEvalStats"
                }
            }
        },
        "QueryEvalStats": {
            "type": "object",
            "properties": {
                "waited": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "elapsed": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "cancelled": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "subqueries": {
                    "$ref": "#/$defs/smithy.api#Document"
                }
            }
        },
        "GetGremlinQueryStatusInput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetLoaderJobStatusOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/smithy.api#Document"
                }
            }
        },
        "GetLoaderJobStatusInput": {
            "type": "object",
            "properties": {
                "loadId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "details": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "errors": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "page": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "errorsPerPage": {
                    "$ref": "#/$defs/PositiveInteger"
                }
            }
        },
        "PositiveInteger": {
            "type": "integer",
            "format": "int32"
        },
        "GetMLDataProcessingJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "processingJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                }
            }
        },
        "MlResourceDefinition": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "outputLocation": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "failureReason": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "cloudwatchLogUrl": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetMLDataProcessingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetMLEndpointOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "endpoint": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "endpointConfig": {
                    "$ref": "#/$defs/MlConfigDefinition"
                }
            }
        },
        "MlConfigDefinition": {
            "type": "object",
            "properties": {
                "name": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetMLEndpointInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetMLModelTrainingJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "processingJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "hpoJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "modelTransformJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "mlModels": {
                    "$ref": "#/$defs/MlModels"
                }
            }
        },
        "MlModels": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MlConfigDefinition"
            }
        },
        "GetMLModelTrainingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetMLModelTransformJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "baseProcessingJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "remoteModelTransformJob": {
                    "$ref": "#/$defs/MlResourceDefinition"
                },
                "models": {
                    "$ref": "#/$defs/Models"
                }
            }
        },
        "Models": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/MlConfigDefinition"
            }
        },
        "GetMLModelTransformJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetOpenCypherQueryStatusOutput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryString": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryEvalStats": {
                    "$ref": "#/$defs/QueryEvalStats"
                }
            }
        },
        "GetOpenCypherQueryStatusInput": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetPropertygraphStatisticsOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/Statistics"
                }
            }
        },
        "Statistics": {
            "type": "object",
            "properties": {
                "autoCompute": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "active": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "statisticsId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "date": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "note": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "signatureInfo": {
                    "$ref": "#/$defs/StatisticsSummary"
                }
            }
        },
        "StatisticsSummary": {
            "type": "object",
            "properties": {
                "signatureCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "instanceCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "predicateCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "GetPropertygraphStreamOutput": {
            "type": "object",
            "properties": {
                "lastEventId": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "lastTrxTimestampInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "format": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "records": {
                    "$ref": "#/$defs/PropertygraphRecordsList"
                },
                "totalRecords": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "PropertygraphRecordsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/PropertygraphRecord"
            }
        },
        "PropertygraphRecord": {
            "type": "object",
            "properties": {
                "commitTimestampInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "eventId": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "data": {
                    "$ref": "#/$defs/PropertygraphData"
                },
                "op": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "isLastOp": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "PropertygraphData": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "type": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "key": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "value": {
                    "$ref": "#/$defs/smithy.api#Document"
                },
                "from": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "to": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetPropertygraphStreamInput": {
            "type": "object",
            "properties": {
                "limit": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "iteratorType": {
                    "$ref": "#/$defs/IteratorType"
                },
                "commitNum": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "opNum": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "encoding": {
                    "$ref": "#/$defs/Encoding"
                }
            }
        },
        "IteratorType": {
            "enum": [
                "AT_SEQUENCE_NUMBER",
                "AFTER_SEQUENCE_NUMBER",
                "TRIM_HORIZON",
                "LATEST"
            ]
        },
        "Encoding": {
            "enum": [
                "GZIP"
            ]
        },
        "GetPropertygraphSummaryOutput": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "payload": {
                    "$ref": "#/$defs/PropertygraphSummaryValueMap"
                }
            }
        },
        "PropertygraphSummaryValueMap": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "lastStatisticsComputationTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "graphSummary": {
                    "$ref": "#/$defs/PropertygraphSummary"
                }
            }
        },
        "PropertygraphSummary": {
            "type": "object",
            "properties": {
                "numNodes": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numEdges": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numNodeLabels": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numEdgeLabels": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "nodeLabels": {
                    "$ref": "#/$defs/NodeLabels"
                },
                "edgeLabels": {
                    "$ref": "#/$defs/EdgeLabels"
                },
                "numNodeProperties": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numEdgeProperties": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "nodeProperties": {
                    "$ref": "#/$defs/LongValuedMapList"
                },
                "edgeProperties": {
                    "$ref": "#/$defs/LongValuedMapList"
                },
                "totalNodePropertyValues": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "totalEdgePropertyValues": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "nodeStructures": {
                    "$ref": "#/$defs/NodeStructures"
                },
                "edgeStructures": {
                    "$ref": "#/$defs/EdgeStructures"
                }
            }
        },
        "NodeLabels": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "EdgeLabels": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "LongValuedMapList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/LongValuedMap"
            }
        },
        "LongValuedMap": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/$defs/smithy.api#Long"
            }
        },
        "NodeStructures": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/NodeStructure"
            }
        },
        "NodeStructure": {
            "type": "object",
            "properties": {
                "count": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "nodeProperties": {
                    "$ref": "#/$defs/NodeProperties"
                },
                "distinctOutgoingEdgeLabels": {
                    "$ref": "#/$defs/OutgoingEdgeLabels"
                }
            }
        },
        "NodeProperties": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "OutgoingEdgeLabels": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "EdgeStructures": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/EdgeStructure"
            }
        },
        "EdgeStructure": {
            "type": "object",
            "properties": {
                "count": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "edgeProperties": {
                    "$ref": "#/$defs/EdgeProperties"
                }
            }
        },
        "EdgeProperties": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "GetPropertygraphSummaryInput": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/$defs/GraphSummaryType"
                }
            }
        },
        "GraphSummaryType": {
            "enum": [
                "BASIC",
                "DETAILED"
            ]
        },
        "GetRDFGraphSummaryOutput": {
            "type": "object",
            "properties": {
                "statusCode": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "payload": {
                    "$ref": "#/$defs/RDFGraphSummaryValueMap"
                }
            }
        },
        "RDFGraphSummaryValueMap": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "lastStatisticsComputationTime": {
                    "$ref": "#/$defs/smithy.api#Timestamp"
                },
                "graphSummary": {
                    "$ref": "#/$defs/RDFGraphSummary"
                }
            }
        },
        "RDFGraphSummary": {
            "type": "object",
            "properties": {
                "numDistinctSubjects": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numDistinctPredicates": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numQuads": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "numClasses": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "classes": {
                    "$ref": "#/$defs/Classes"
                },
                "predicates": {
                    "$ref": "#/$defs/LongValuedMapList"
                },
                "subjectStructures": {
                    "$ref": "#/$defs/SubjectStructures"
                }
            }
        },
        "Classes": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "SubjectStructures": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/SubjectStructure"
            }
        },
        "SubjectStructure": {
            "type": "object",
            "properties": {
                "count": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "predicates": {
                    "$ref": "#/$defs/Predicates"
                }
            }
        },
        "Predicates": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "GetRDFGraphSummaryInput": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/$defs/GraphSummaryType"
                }
            }
        },
        "GetSparqlStatisticsOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/Statistics"
                }
            }
        },
        "GetSparqlStreamOutput": {
            "type": "object",
            "properties": {
                "lastEventId": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "lastTrxTimestampInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "format": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "records": {
                    "$ref": "#/$defs/SparqlRecordsList"
                },
                "totalRecords": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "SparqlRecordsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/SparqlRecord"
            }
        },
        "SparqlRecord": {
            "type": "object",
            "properties": {
                "commitTimestampInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "eventId": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "data": {
                    "$ref": "#/$defs/SparqlData"
                },
                "op": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "isLastOp": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "SparqlData": {
            "type": "object",
            "properties": {
                "stmt": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "GetSparqlStreamInput": {
            "type": "object",
            "properties": {
                "limit": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "iteratorType": {
                    "$ref": "#/$defs/IteratorType"
                },
                "commitNum": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "opNum": {
                    "$ref": "#/$defs/smithy.api#Long"
                },
                "encoding": {
                    "$ref": "#/$defs/Encoding"
                }
            }
        },
        "ListGremlinQueriesOutput": {
            "type": "object",
            "properties": {
                "acceptedQueryCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "runningQueryCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "queries": {
                    "$ref": "#/$defs/GremlinQueries"
                }
            }
        },
        "GremlinQueries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/GremlinQueryStatus"
            }
        },
        "GremlinQueryStatus": {
            "type": "object",
            "properties": {
                "queryId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryString": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "queryEvalStats": {
                    "$ref": "#/$defs/QueryEvalStats"
                }
            }
        },
        "ListGremlinQueriesInput": {
            "type": "object",
            "properties": {
                "includeWaiting": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "ListLoaderJobsOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/LoaderIdResult"
                }
            }
        },
        "LoaderIdResult": {
            "type": "object",
            "properties": {
                "loadIds": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "StringList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/smithy.api#String"
            }
        },
        "ListLoaderJobsInput": {
            "type": "object",
            "properties": {
                "limit": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "includeQueuedLoads": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "ListMLDataProcessingJobsOutput": {
            "type": "object",
            "properties": {
                "ids": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ListMLDataProcessingJobsInput": {
            "type": "object",
            "properties": {
                "maxItems": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ListMLEndpointsOutput": {
            "type": "object",
            "properties": {
                "ids": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ListMLEndpointsInput": {
            "type": "object",
            "properties": {
                "maxItems": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ListMLModelTrainingJobsOutput": {
            "type": "object",
            "properties": {
                "ids": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ListMLModelTrainingJobsInput": {
            "type": "object",
            "properties": {
                "maxItems": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ListMLModelTransformJobsOutput": {
            "type": "object",
            "properties": {
                "ids": {
                    "$ref": "#/$defs/StringList"
                }
            }
        },
        "ListMLModelTransformJobsInput": {
            "type": "object",
            "properties": {
                "maxItems": {
                    "$ref": "#/$defs/PositiveInteger"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ListOpenCypherQueriesOutput": {
            "type": "object",
            "properties": {
                "acceptedQueryCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "runningQueryCount": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "queries": {
                    "$ref": "#/$defs/OpenCypherQueries"
                }
            }
        },
        "OpenCypherQueries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/GremlinQueryStatus"
            }
        },
        "ListOpenCypherQueriesInput": {
            "type": "object",
            "properties": {
                "includeWaiting": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "ManagePropertygraphStatisticsOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/RefreshStatisticsIdMap"
                }
            }
        },
        "RefreshStatisticsIdMap": {
            "type": "object",
            "properties": {
                "statisticsId": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "ManagePropertygraphStatisticsInput": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/$defs/StatisticsAutoGenerationMode"
                }
            }
        },
        "StatisticsAutoGenerationMode": {
            "enum": [
                "DISABLE_AUTOCOMPUTE",
                "ENABLE_AUTOCOMPUTE",
                "REFRESH"
            ]
        },
        "ManageSparqlStatisticsOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/RefreshStatisticsIdMap"
                }
            }
        },
        "ManageSparqlStatisticsInput": {
            "type": "object",
            "properties": {
                "mode": {
                    "$ref": "#/$defs/StatisticsAutoGenerationMode"
                }
            }
        },
        "StartLoaderJobOutput": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "payload": {
                    "$ref": "#/$defs/StringValuedMap"
                }
            }
        },
        "StartLoaderJobInput": {
            "type": "object",
            "properties": {
                "source": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "format": {
                    "$ref": "#/$defs/Format"
                },
                "s3BucketRegion": {
                    "$ref": "#/$defs/S3BucketRegion"
                },
                "iamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "mode": {
                    "$ref": "#/$defs/Mode"
                },
                "failOnError": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "parallelism": {
                    "$ref": "#/$defs/Parallelism"
                },
                "parserConfiguration": {
                    "$ref": "#/$defs/StringValuedMap"
                },
                "updateSingleCardinalityProperties": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "queueRequest": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "dependencies": {
                    "$ref": "#/$defs/StringList"
                },
                "userProvidedEdgeIds": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                }
            }
        },
        "Format": {
            "enum": [
                "CSV",
                "OPENCYPHER",
                "NTRIPLES",
                "NQUADS",
                "RDFXML",
                "TURTLE"
            ]
        },
        "S3BucketRegion": {
            "enum": [
                "US_EAST_1",
                "US_EAST_2",
                "US_WEST_1",
                "US_WEST_2",
                "CA_CENTRAL_1",
                "SA_EAST_1",
                "EU_NORTH_1",
                "EU_WEST_1",
                "EU_WEST_2",
                "EU_WEST_3",
                "EU_CENTRAL_1",
                "ME_SOUTH_1",
                "AF_SOUTH_1",
                "AP_EAST_1",
                "AP_NORTHEAST_1",
                "AP_NORTHEAST_2",
                "AP_SOUTHEAST_1",
                "AP_SOUTHEAST_2",
                "AP_SOUTH_1",
                "CN_NORTH_1",
                "CN_NORTHWEST_1",
                "US_GOV_WEST_1",
                "US_GOV_EAST_1"
            ]
        },
        "Mode": {
            "enum": [
                "RESUME",
                "NEW",
                "AUTO"
            ]
        },
        "Parallelism": {
            "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "OVERSUBSCRIBE"
            ]
        },
        "StartMLDataProcessingJobOutput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "creationTimeInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                }
            }
        },
        "StartMLDataProcessingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "previousDataProcessingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "inputDataS3Location": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "processedDataS3Location": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "sagemakerIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "processingInstanceType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "processingInstanceVolumeSizeInGB": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "processingTimeOutInSeconds": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "modelType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "configFileName": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "securityGroupIds": {
                    "$ref": "#/$defs/StringList"
                },
                "volumeEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "s3OutputEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "StartMLModelTrainingJobOutput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "creationTimeInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                }
            }
        },
        "StartMLModelTrainingJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "previousModelTrainingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "dataProcessingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "trainModelS3Location": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "sagemakerIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "baseProcessingInstanceType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "trainingInstanceType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "trainingInstanceVolumeSizeInGB": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "trainingTimeOutInSeconds": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "maxHPONumberOfTrainingJobs": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "maxHPOParallelTrainingJobs": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "securityGroupIds": {
                    "$ref": "#/$defs/StringList"
                },
                "volumeEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "s3OutputEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "enableManagedSpotTraining": {
                    "$ref": "#/$defs/smithy.api#Boolean"
                },
                "customModelTrainingParameters": {
                    "$ref": "#/$defs/CustomModelTrainingParameters"
                }
            }
        },
        "CustomModelTrainingParameters": {
            "type": "object",
            "properties": {
                "sourceS3DirectoryPath": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "trainingEntryPointScript": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "transformEntryPointScript": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "StartMLModelTransformJobOutput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "arn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "creationTimeInMillis": {
                    "$ref": "#/$defs/smithy.api#Long"
                }
            }
        },
        "StartMLModelTransformJobInput": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "dataProcessingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "mlModelTrainingJobId": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "trainingJobName": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "modelTransformOutputS3Location": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "sagemakerIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "neptuneIamRoleArn": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "customModelTransformParameters": {
                    "$ref": "#/$defs/CustomModelTransformParameters"
                },
                "baseProcessingInstanceType": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "baseProcessingInstanceVolumeSizeInGB": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "subnets": {
                    "$ref": "#/$defs/StringList"
                },
                "securityGroupIds": {
                    "$ref": "#/$defs/StringList"
                },
                "volumeEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "s3OutputEncryptionKMSKey": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        },
        "CustomModelTransformParameters": {
            "type": "object",
            "properties": {
                "sourceS3DirectoryPath": {
                    "$ref": "#/$defs/smithy.api#String"
                },
                "transformEntryPointScript": {
                    "$ref": "#/$defs/smithy.api#String"
                }
            }
        }
    },
    "state": {
        "version": "1.0",
        "parameters": {
            "Region": {
                "builtIn": "AWS::Region",
                "required": false,
                "documentation": "The AWS region used to dispatch the request.",
                "type": "String"
            },
            "UseDualStack": {
                "builtIn": "AWS::UseDualStack",
                "required": true,
                "default": false,
                "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                "type": "Boolean"
            },
            "UseFIPS": {
                "builtIn": "AWS::UseFIPS",
                "required": true,
                "default": false,
                "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                "type": "Boolean"
            },
            "Endpoint": {
                "builtIn": "SDK::Endpoint",
                "required": false,
                "documentation": "Override the endpoint used to send this request",
                "type": "String"
            }
        },
        "rules": [
            {
                "conditions": [
                    {
                        "fn": "isSet",
                        "argv": [
                            {
                                "ref": "Endpoint"
                            }
                        ]
                    }
                ],
                "rules": [
                    {
                        "conditions": [
                            {
                                "fn": "booleanEquals",
                                "argv": [
                                    {
                                        "ref": "UseFIPS"
                                    },
                                    true
                                ]
                            }
                        ],
                        "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                        "type": "error"
                    },
                    {
                        "conditions": [],
                        "rules": [
                            {
                                "conditions": [
                                    {
                                        "fn": "booleanEquals",
                                        "argv": [
                                            {
                                                "ref": "UseDualStack"
                                            },
                                            true
                                        ]
                                    }
                                ],
                                "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                "type": "error"
                            },
                            {
                                "conditions": [],
                                "endpoint": {
                                    "url": {
                                        "ref": "Endpoint"
                                    },
                                    "properties": {},
                                    "headers": {}
                                },
                                "type": "endpoint"
                            }
                        ],
                        "type": "tree"
                    }
                ],
                "type": "tree"
            },
            {
                "conditions": [],
                "rules": [
                    {
                        "conditions": [
                            {
                                "fn": "isSet",
                                "argv": [
                                    {
                                        "ref": "Region"
                                    }
                                ]
                            }
                        ],
                        "rules": [
                            {
                                "conditions": [
                                    {
                                        "fn": "aws.partition",
                                        "argv": [
                                            {
                                                "ref": "Region"
                                            }
                                        ],
                                        "assign": "PartitionResult"
                                    }
                                ],
                                "rules": [
                                    {
                                        "conditions": [
                                            {
                                                "fn": "booleanEquals",
                                                "argv": [
                                                    {
                                                        "ref": "UseFIPS"
                                                    },
                                                    true
                                                ]
                                            },
                                            {
                                                "fn": "booleanEquals",
                                                "argv": [
                                                    {
                                                        "ref": "UseDualStack"
                                                    },
                                                    true
                                                ]
                                            }
                                        ],
                                        "rules": [
                                            {
                                                "conditions": [
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": [
                                                            true,
                                                            {
                                                                "fn": "getAttr",
                                                                "argv": [
                                                                    {
                                                                        "ref": "PartitionResult"
                                                                    },
                                                                    "supportsFIPS"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": [
                                                            true,
                                                            {
                                                                "fn": "getAttr",
                                                                "argv": [
                                                                    {
                                                                        "ref": "PartitionResult"
                                                                    },
                                                                    "supportsDualStack"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "rules": [
                                                    {
                                                        "conditions": [],
                                                        "rules": [
                                                            {
                                                                "conditions": [],
                                                                "endpoint": {
                                                                    "url": "https://neptune-db-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                    "properties": {},
                                                                    "headers": {}
                                                                },
                                                                "type": "endpoint"
                                                            }
                                                        ],
                                                        "type": "tree"
                                                    }
                                                ],
                                                "type": "tree"
                                            },
                                            {
                                                "conditions": [],
                                                "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                                "type": "error"
                                            }
                                        ],
                                        "type": "tree"
                                    },
                                    {
                                        "conditions": [
                                            {
                                                "fn": "booleanEquals",
                                                "argv": [
                                                    {
                                                        "ref": "UseFIPS"
                                                    },
                                                    true
                                                ]
                                            }
                                        ],
                                        "rules": [
                                            {
                                                "conditions": [
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": [
                                                            {
                                                                "fn": "getAttr",
                                                                "argv": [
                                                                    {
                                                                        "ref": "PartitionResult"
                                                                    },
                                                                    "supportsFIPS"
                                                                ]
                                                            },
                                                            true
                                                        ]
                                                    }
                                                ],
                                                "rules": [
                                                    {
                                                        "conditions": [],
                                                        "rules": [
                                                            {
                                                                "conditions": [],
                                                                "endpoint": {
                                                                    "url": "https://neptune-db-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                    "properties": {},
                                                                    "headers": {}
                                                                },
                                                                "type": "endpoint"
                                                            }
                                                        ],
                                                        "type": "tree"
                                                    }
                                                ],
                                                "type": "tree"
                                            },
                                            {
                                                "conditions": [],
                                                "error": "FIPS is enabled but this partition does not support FIPS",
                                                "type": "error"
                                            }
                                        ],
                                        "type": "tree"
                                    },
                                    {
                                        "conditions": [
                                            {
                                                "fn": "booleanEquals",
                                                "argv": [
                                                    {
                                                        "ref": "UseDualStack"
                                                    },
                                                    true
                                                ]
                                            }
                                        ],
                                        "rules": [
                                            {
                                                "conditions": [
                                                    {
                                                        "fn": "booleanEquals",
                                                        "argv": [
                                                            true,
                                                            {
                                                                "fn": "getAttr",
                                                                "argv": [
                                                                    {
                                                                        "ref": "PartitionResult"
                                                                    },
                                                                    "supportsDualStack"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "rules": [
                                                    {
                                                        "conditions": [],
                                                        "rules": [
                                                            {
                                                                "conditions": [],
                                                                "endpoint": {
                                                                    "url": "https://neptune-db.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                    "properties": {},
                                                                    "headers": {}
                                                                },
                                                                "type": "endpoint"
                                                            }
                                                        ],
                                                        "type": "tree"
                                                    }
                                                ],
                                                "type": "tree"
                                            },
                                            {
                                                "conditions": [],
                                                "error": "DualStack is enabled but this partition does not support DualStack",
                                                "type": "error"
                                            }
                                        ],
                                        "type": "tree"
                                    },
                                    {
                                        "conditions": [],
                                        "rules": [
                                            {
                                                "conditions": [],
                                                "endpoint": {
                                                    "url": "https://neptune-db.{Region}.{PartitionResult#dnsSuffix}",
                                                    "properties": {},
                                                    "headers": {}
                                                },
                                                "type": "endpoint"
                                            }
                                        ],
                                        "type": "tree"
                                    }
                                ],
                                "type": "tree"
                            }
                        ],
                        "type": "tree"
                    },
                    {
                        "conditions": [],
                        "error": "Invalid Configuration: Missing Region",
                        "type": "error"
                    }
                ],
                "type": "tree"
            }
        ]
    }
}