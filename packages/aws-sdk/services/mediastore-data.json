{
    "name": "mediastore",
    "commands": [
        {
            "name": "DeleteObject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Path": "route.Path",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "{/Path*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteObjectResponse"
                    },
                    "inject": [
                        "param.0.Path",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteObjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Path": {}
                    }
                }
            }
        },
        {
            "name": "DescribeObject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Path": "route.Path",
                            "...": "body"
                        }
                    ],
                    "method": "HEAD",
                    "route": "{/Path*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeObjectResponse"
                    },
                    "inject": [
                        "param.0.Path",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeObjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Path": {}
                    }
                }
            }
        },
        {
            "name": "GetObject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Path": "route.Path",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "{/Path*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetObjectResponse"
                    },
                    "inject": [
                        "param.0.Path",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetObjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Path": {},
                        "Range": {}
                    }
                }
            }
        },
        {
            "name": "ListItems",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListItemsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListItemsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Path": {},
                        "MaxResults": {},
                        "NextToken": {}
                    }
                }
            }
        },
        {
            "name": "PutObject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Path": "route.Path",
                            "...": "body"
                        }
                    ],
                    "method": "PUT",
                    "route": "{/Path*}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/PutObjectResponse"
                    },
                    "inject": [
                        "param.0.Path",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/PutObjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Body": {},
                        "Path": {},
                        "ContentType": {},
                        "CacheControl": {},
                        "StorageClass": {},
                        "UploadAvailability": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "DeleteObjectRequest": {
            "type": "object",
            "properties": {
                "Path": {
                    "$ref": "#/$defs/PathNaming"
                }
            }
        },
        "PathNaming": {
            "type": "string"
        },
        "DeleteObjectResponse": {
            "type": "object",
            "properties": {}
        },
        "DescribeObjectRequest": {
            "type": "object",
            "properties": {
                "Path": {
                    "$ref": "#/$defs/PathNaming"
                }
            }
        },
        "DescribeObjectResponse": {
            "type": "object",
            "properties": {
                "ETag": {
                    "$ref": "#/$defs/ETag"
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType"
                },
                "ContentLength": {
                    "$ref": "#/$defs/NonNegativeLong"
                },
                "CacheControl": {
                    "$ref": "#/$defs/StringPrimitive"
                },
                "LastModified": {
                    "$ref": "#/$defs/TimeStamp"
                }
            }
        },
        "ETag": {
            "type": "string"
        },
        "ContentType": {
            "type": "string"
        },
        "NonNegativeLong": {
            "type": "integer",
            "format": "int64"
        },
        "StringPrimitive": {
            "type": "string"
        },
        "TimeStamp": {
            "type": "string",
            "format": "date-time"
        },
        "GetObjectRequest": {
            "type": "object",
            "properties": {
                "Path": {
                    "$ref": "#/$defs/PathNaming"
                },
                "Range": {
                    "$ref": "#/$defs/RangePattern"
                }
            }
        },
        "RangePattern": {
            "type": "string"
        },
        "GetObjectResponse": {
            "type": "object",
            "properties": {
                "Body": {
                    "$ref": "#/$defs/PayloadBlob"
                },
                "CacheControl": {
                    "$ref": "#/$defs/StringPrimitive"
                },
                "ContentRange": {
                    "$ref": "#/$defs/ContentRangePattern"
                },
                "ContentLength": {
                    "$ref": "#/$defs/NonNegativeLong"
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType"
                },
                "ETag": {
                    "$ref": "#/$defs/ETag"
                },
                "LastModified": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "StatusCode": {
                    "$ref": "#/$defs/statusCode"
                }
            }
        },
        "PayloadBlob": {
            "type": "string",
            "format": "binary"
        },
        "ContentRangePattern": {
            "type": "string"
        },
        "statusCode": {
            "type": "integer",
            "format": "int32"
        },
        "ListItemsRequest": {
            "type": "object",
            "properties": {
                "Path": {
                    "$ref": "#/$defs/ListPathNaming"
                },
                "MaxResults": {
                    "$ref": "#/$defs/ListLimit"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ListPathNaming": {
            "type": "string"
        },
        "ListLimit": {
            "type": "integer",
            "format": "int32"
        },
        "PaginationToken": {
            "type": "string"
        },
        "ListItemsResponse": {
            "type": "object",
            "properties": {
                "Items": {
                    "$ref": "#/$defs/ItemList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ItemList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Item"
            }
        },
        "Item": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/ItemName"
                },
                "Type": {
                    "$ref": "#/$defs/ItemType"
                },
                "ETag": {
                    "$ref": "#/$defs/ETag"
                },
                "LastModified": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType"
                },
                "ContentLength": {
                    "$ref": "#/$defs/NonNegativeLong"
                }
            }
        },
        "ItemName": {
            "type": "string"
        },
        "ItemType": {
            "enum": [
                "OBJECT",
                "FOLDER"
            ]
        },
        "PutObjectRequest": {
            "type": "object",
            "properties": {
                "Body": {
                    "$ref": "#/$defs/PayloadBlob"
                },
                "Path": {
                    "$ref": "#/$defs/PathNaming"
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType"
                },
                "CacheControl": {
                    "$ref": "#/$defs/StringPrimitive"
                },
                "StorageClass": {
                    "$ref": "#/$defs/StorageClass"
                },
                "UploadAvailability": {
                    "$ref": "#/$defs/UploadAvailability"
                }
            }
        },
        "StorageClass": {
            "enum": [
                "TEMPORAL"
            ]
        },
        "UploadAvailability": {
            "enum": [
                "STANDARD",
                "STREAMING"
            ]
        },
        "PutObjectResponse": {
            "type": "object",
            "properties": {
                "ContentSHA256": {
                    "$ref": "#/$defs/SHA256Hash"
                },
                "ETag": {
                    "$ref": "#/$defs/ETag"
                },
                "StorageClass": {
                    "$ref": "#/$defs/StorageClass"
                }
            }
        },
        "SHA256Hash": {
            "type": "string"
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://data.mediastore-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://data.mediastore-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://data.mediastore.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://data.mediastore.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}