{
    "name": "lookoutvision",
    "commands": [
        {
            "name": "CreateDataset",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/datasets"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateDatasetResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateDatasetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "DatasetType": {},
                        "DatasetSource": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "CreateModel",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/models"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateModelResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateModelRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "Description": {},
                        "ClientToken": {},
                        "OutputConfig": {},
                        "KmsKeyId": {},
                        "Tags": {}
                    }
                }
            }
        },
        {
            "name": "CreateProject",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateProjectResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateProjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "DeleteDataset",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "DatasetType": "route.DatasetType",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteDatasetResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.DatasetType",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteDatasetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "DatasetType": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "DeleteModel",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "ModelVersion": "route.ModelVersion",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2020-11-20/projects/{ProjectName}/models/{ModelVersion}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteModelResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.ModelVersion",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteModelRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "DeleteProject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2020-11-20/projects/{ProjectName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteProjectResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteProjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "DescribeDataset",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "DatasetType": "route.DatasetType",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeDatasetResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.DatasetType",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeDatasetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "DatasetType": {}
                    }
                }
            }
        },
        {
            "name": "DescribeModel",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "ModelVersion": "route.ModelVersion",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/models/{ModelVersion}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeModelResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.ModelVersion",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeModelRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {}
                    }
                }
            }
        },
        {
            "name": "DescribeModelPackagingJob",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "JobName": "route.JobName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/modelpackagingjobs/{JobName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeModelPackagingJobResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.JobName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeModelPackagingJobRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "JobName": {}
                    }
                }
            }
        },
        {
            "name": "DescribeProject",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DescribeProjectResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DescribeProjectRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {}
                    }
                }
            }
        },
        {
            "name": "DetectAnomalies",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "ModelVersion": "route.ModelVersion",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/detect"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DetectAnomaliesResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.ModelVersion",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DetectAnomaliesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {},
                        "Body": {},
                        "ContentType": {}
                    }
                }
            }
        },
        {
            "name": "ListDatasetEntries",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "DatasetType": "route.DatasetType",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}/entries"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListDatasetEntriesResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.DatasetType",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListDatasetEntriesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "DatasetType": {},
                        "Labeled": {},
                        "AnomalyClass": {},
                        "BeforeCreationDate": {},
                        "AfterCreationDate": {},
                        "NextToken": {},
                        "MaxResults": {},
                        "SourceRefContains": {}
                    }
                }
            }
        },
        {
            "name": "ListModelPackagingJobs",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/modelpackagingjobs"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListModelPackagingJobsResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListModelPackagingJobsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListModels",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects/{ProjectName}/models"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListModelsResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListModelsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListProjects",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/projects"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListProjectsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListProjectsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2020-11-20/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceArn": {}
                    }
                }
            }
        },
        {
            "name": "StartModel",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "ModelVersion": "route.ModelVersion",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/start"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartModelResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.ModelVersion",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartModelRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {},
                        "MinInferenceUnits": {},
                        "ClientToken": {},
                        "MaxInferenceUnits": {}
                    }
                }
            }
        },
        {
            "name": "StartModelPackagingJob",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/modelpackagingjobs"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StartModelPackagingJobResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StartModelPackagingJobRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {},
                        "JobName": {},
                        "Configuration": {},
                        "Description": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "StopModel",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "ModelVersion": "route.ModelVersion",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/stop"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/StopModelResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.ModelVersion",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/StopModelRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "ModelVersion": {},
                        "ClientToken": {}
                    }
                }
            }
        },
        {
            "name": "TagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2020-11-20/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TagResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceArn": {},
                        "Tags": {}
                    }
                }
            }
        },
        {
            "name": "UntagResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceArn": "route.ResourceArn",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2020-11-20/tags/{ResourceArn}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UntagResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceArn",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UntagResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceArn": {},
                        "TagKeys": {}
                    }
                }
            }
        },
        {
            "name": "UpdateDatasetEntries",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ProjectName": "route.ProjectName",
                            "DatasetType": "route.DatasetType",
                            "...": "body"
                        }
                    ],
                    "method": "PATCH",
                    "route": "/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}/entries"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateDatasetEntriesResponse"
                    },
                    "inject": [
                        "param.0.ProjectName",
                        "param.0.DatasetType",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateDatasetEntriesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ProjectName": {},
                        "DatasetType": {},
                        "Changes": {},
                        "ClientToken": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "CreateDatasetRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "DatasetSource": {
                    "$ref": "#/$defs/DatasetSource"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "ProjectName": {
            "type": "string"
        },
        "DatasetType": {
            "type": "string"
        },
        "DatasetSource": {
            "type": "object",
            "properties": {
                "GroundTruthManifest": {
                    "$ref": "#/$defs/DatasetGroundTruthManifest"
                }
            }
        },
        "DatasetGroundTruthManifest": {
            "type": "object",
            "properties": {
                "S3Object": {
                    "$ref": "#/$defs/InputS3Object"
                }
            }
        },
        "InputS3Object": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/S3BucketName"
                },
                "Key": {
                    "$ref": "#/$defs/S3ObjectKey"
                },
                "VersionId": {
                    "$ref": "#/$defs/S3ObjectVersion"
                }
            }
        },
        "S3BucketName": {
            "type": "string"
        },
        "S3ObjectKey": {
            "type": "string"
        },
        "S3ObjectVersion": {
            "type": "string"
        },
        "ClientToken": {
            "type": "string"
        },
        "CreateDatasetResponse": {
            "type": "object",
            "properties": {
                "DatasetMetadata": {
                    "$ref": "#/$defs/DatasetMetadata"
                }
            }
        },
        "DatasetMetadata": {
            "type": "object",
            "properties": {
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "Status": {
                    "$ref": "#/$defs/DatasetStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/DatasetStatusMessage"
                }
            }
        },
        "DateTime": {
            "type": "string",
            "format": "date-time"
        },
        "DatasetStatus": {
            "enum": [
                "CREATE_IN_PROGRESS",
                "CREATE_COMPLETE",
                "CREATE_FAILED",
                "UPDATE_IN_PROGRESS",
                "UPDATE_COMPLETE",
                "UPDATE_FAILED_ROLLBACK_IN_PROGRESS",
                "UPDATE_FAILED_ROLLBACK_COMPLETE",
                "DELETE_IN_PROGRESS",
                "DELETE_COMPLETE",
                "DELETE_FAILED"
            ]
        },
        "DatasetStatusMessage": {
            "type": "string"
        },
        "CreateModelRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "Description": {
                    "$ref": "#/$defs/ModelDescriptionMessage"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                },
                "OutputConfig": {
                    "$ref": "#/$defs/OutputConfig"
                },
                "KmsKeyId": {
                    "$ref": "#/$defs/KmsKeyId"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "ModelDescriptionMessage": {
            "type": "string"
        },
        "OutputConfig": {
            "type": "object",
            "properties": {
                "S3Location": {
                    "$ref": "#/$defs/S3Location"
                }
            }
        },
        "S3Location": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/S3BucketName"
                },
                "Prefix": {
                    "$ref": "#/$defs/S3KeyPrefix"
                }
            }
        },
        "S3KeyPrefix": {
            "type": "string"
        },
        "KmsKeyId": {
            "type": "string"
        },
        "TagList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Tag"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "Key": {
                    "$ref": "#/$defs/TagKey"
                },
                "Value": {
                    "$ref": "#/$defs/TagValue"
                }
            }
        },
        "TagKey": {
            "type": "string"
        },
        "TagValue": {
            "type": "string"
        },
        "CreateModelResponse": {
            "type": "object",
            "properties": {
                "ModelMetadata": {
                    "$ref": "#/$defs/ModelMetadata"
                }
            }
        },
        "ModelMetadata": {
            "type": "object",
            "properties": {
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "ModelArn": {
                    "$ref": "#/$defs/ModelArn"
                },
                "Description": {
                    "$ref": "#/$defs/ModelDescriptionMessage"
                },
                "Status": {
                    "$ref": "#/$defs/ModelStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/ModelStatusMessage"
                },
                "Performance": {
                    "$ref": "#/$defs/ModelPerformance"
                }
            }
        },
        "ModelVersion": {
            "type": "string"
        },
        "ModelArn": {
            "type": "string"
        },
        "ModelStatus": {
            "enum": [
                "TRAINING",
                "TRAINED",
                "TRAINING_FAILED",
                "STARTING_HOSTING",
                "HOSTED",
                "HOSTING_FAILED",
                "STOPPING_HOSTING",
                "SYSTEM_UPDATING",
                "DELETING"
            ]
        },
        "ModelStatusMessage": {
            "type": "string"
        },
        "ModelPerformance": {
            "type": "object",
            "properties": {
                "F1Score": {
                    "$ref": "#/$defs/Float"
                },
                "Recall": {
                    "$ref": "#/$defs/Float"
                },
                "Precision": {
                    "$ref": "#/$defs/Float"
                }
            }
        },
        "Float": {
            "type": "number",
            "format": "float"
        },
        "CreateProjectRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "CreateProjectResponse": {
            "type": "object",
            "properties": {
                "ProjectMetadata": {
                    "$ref": "#/$defs/ProjectMetadata"
                }
            }
        },
        "ProjectMetadata": {
            "type": "object",
            "properties": {
                "ProjectArn": {
                    "$ref": "#/$defs/ProjectArn"
                },
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                }
            }
        },
        "ProjectArn": {
            "type": "string"
        },
        "DeleteDatasetRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "DeleteDatasetResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteModelRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersionNoLatest"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "ModelVersionNoLatest": {
            "type": "string"
        },
        "DeleteModelResponse": {
            "type": "object",
            "properties": {
                "ModelArn": {
                    "$ref": "#/$defs/ModelArn"
                }
            }
        },
        "DeleteProjectRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "DeleteProjectResponse": {
            "type": "object",
            "properties": {
                "ProjectArn": {
                    "$ref": "#/$defs/ProjectArn"
                }
            }
        },
        "DescribeDatasetRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                }
            }
        },
        "DescribeDatasetResponse": {
            "type": "object",
            "properties": {
                "DatasetDescription": {
                    "$ref": "#/$defs/DatasetDescription"
                }
            }
        },
        "DatasetDescription": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "LastUpdatedTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "Status": {
                    "$ref": "#/$defs/DatasetStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/DatasetStatusMessage"
                },
                "ImageStats": {
                    "$ref": "#/$defs/DatasetImageStats"
                }
            }
        },
        "DatasetImageStats": {
            "type": "object",
            "properties": {
                "Total": {
                    "$ref": "#/$defs/Integer"
                },
                "Labeled": {
                    "$ref": "#/$defs/Integer"
                },
                "Normal": {
                    "$ref": "#/$defs/Integer"
                },
                "Anomaly": {
                    "$ref": "#/$defs/Integer"
                }
            }
        },
        "Integer": {
            "type": "integer",
            "format": "int32"
        },
        "DescribeModelRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                }
            }
        },
        "DescribeModelResponse": {
            "type": "object",
            "properties": {
                "ModelDescription": {
                    "$ref": "#/$defs/ModelDescription"
                }
            }
        },
        "ModelDescription": {
            "type": "object",
            "properties": {
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "ModelArn": {
                    "$ref": "#/$defs/ModelArn"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "Description": {
                    "$ref": "#/$defs/ModelDescriptionMessage"
                },
                "Status": {
                    "$ref": "#/$defs/ModelStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/ModelStatusMessage"
                },
                "Performance": {
                    "$ref": "#/$defs/ModelPerformance"
                },
                "OutputConfig": {
                    "$ref": "#/$defs/OutputConfig"
                },
                "EvaluationManifest": {
                    "$ref": "#/$defs/OutputS3Object"
                },
                "EvaluationResult": {
                    "$ref": "#/$defs/OutputS3Object"
                },
                "EvaluationEndTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "KmsKeyId": {
                    "$ref": "#/$defs/KmsKeyId"
                },
                "MinInferenceUnits": {
                    "$ref": "#/$defs/InferenceUnits"
                },
                "MaxInferenceUnits": {
                    "$ref": "#/$defs/InferenceUnits"
                }
            }
        },
        "OutputS3Object": {
            "type": "object",
            "properties": {
                "Bucket": {
                    "$ref": "#/$defs/S3BucketName"
                },
                "Key": {
                    "$ref": "#/$defs/S3ObjectKey"
                }
            }
        },
        "InferenceUnits": {
            "type": "integer",
            "format": "int32"
        },
        "DescribeModelPackagingJobRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "JobName": {
                    "$ref": "#/$defs/ModelPackagingJobName"
                }
            }
        },
        "ModelPackagingJobName": {
            "type": "string"
        },
        "DescribeModelPackagingJobResponse": {
            "type": "object",
            "properties": {
                "ModelPackagingDescription": {
                    "$ref": "#/$defs/ModelPackagingDescription"
                }
            }
        },
        "ModelPackagingDescription": {
            "type": "object",
            "properties": {
                "JobName": {
                    "$ref": "#/$defs/ModelPackagingJobName"
                },
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "ModelPackagingConfiguration": {
                    "$ref": "#/$defs/ModelPackagingConfiguration"
                },
                "ModelPackagingJobDescription": {
                    "$ref": "#/$defs/ModelPackagingJobDescription"
                },
                "ModelPackagingMethod": {
                    "$ref": "#/$defs/ModelPackagingMethod"
                },
                "ModelPackagingOutputDetails": {
                    "$ref": "#/$defs/ModelPackagingOutputDetails"
                },
                "Status": {
                    "$ref": "#/$defs/ModelPackagingJobStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/ModelPackagingStatusMessage"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "LastUpdatedTimestamp": {
                    "$ref": "#/$defs/DateTime"
                }
            }
        },
        "ModelPackagingConfiguration": {
            "type": "object",
            "properties": {
                "Greengrass": {
                    "$ref": "#/$defs/GreengrassConfiguration"
                }
            }
        },
        "GreengrassConfiguration": {
            "type": "object",
            "properties": {
                "CompilerOptions": {
                    "$ref": "#/$defs/CompilerOptions"
                },
                "TargetDevice": {
                    "$ref": "#/$defs/TargetDevice"
                },
                "TargetPlatform": {
                    "$ref": "#/$defs/TargetPlatform"
                },
                "S3OutputLocation": {
                    "$ref": "#/$defs/S3Location"
                },
                "ComponentName": {
                    "$ref": "#/$defs/ComponentName"
                },
                "ComponentVersion": {
                    "$ref": "#/$defs/ComponentVersion"
                },
                "ComponentDescription": {
                    "$ref": "#/$defs/ComponentDescription"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "CompilerOptions": {
            "type": "string"
        },
        "TargetDevice": {
            "enum": [
                "JETSON_XAVIER"
            ]
        },
        "TargetPlatform": {
            "type": "object",
            "properties": {
                "Os": {
                    "$ref": "#/$defs/TargetPlatformOs"
                },
                "Arch": {
                    "$ref": "#/$defs/TargetPlatformArch"
                },
                "Accelerator": {
                    "$ref": "#/$defs/TargetPlatformAccelerator"
                }
            }
        },
        "TargetPlatformOs": {
            "enum": [
                "LINUX"
            ]
        },
        "TargetPlatformArch": {
            "enum": [
                "ARM64",
                "X86_64"
            ]
        },
        "TargetPlatformAccelerator": {
            "enum": [
                "NVIDIA"
            ]
        },
        "ComponentName": {
            "type": "string"
        },
        "ComponentVersion": {
            "type": "string"
        },
        "ComponentDescription": {
            "type": "string"
        },
        "ModelPackagingJobDescription": {
            "type": "string"
        },
        "ModelPackagingMethod": {
            "type": "string"
        },
        "ModelPackagingOutputDetails": {
            "type": "object",
            "properties": {
                "Greengrass": {
                    "$ref": "#/$defs/GreengrassOutputDetails"
                }
            }
        },
        "GreengrassOutputDetails": {
            "type": "object",
            "properties": {
                "ComponentVersionArn": {
                    "$ref": "#/$defs/ComponentVersionArn"
                },
                "ComponentName": {
                    "$ref": "#/$defs/ComponentName"
                },
                "ComponentVersion": {
                    "$ref": "#/$defs/ComponentVersion"
                }
            }
        },
        "ComponentVersionArn": {
            "type": "string"
        },
        "ModelPackagingJobStatus": {
            "enum": [
                "CREATED",
                "RUNNING",
                "SUCCEEDED",
                "FAILED"
            ]
        },
        "ModelPackagingStatusMessage": {
            "type": "string"
        },
        "DescribeProjectRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                }
            }
        },
        "DescribeProjectResponse": {
            "type": "object",
            "properties": {
                "ProjectDescription": {
                    "$ref": "#/$defs/ProjectDescription"
                }
            }
        },
        "ProjectDescription": {
            "type": "object",
            "properties": {
                "ProjectArn": {
                    "$ref": "#/$defs/ProjectArn"
                },
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "Datasets": {
                    "$ref": "#/$defs/DatasetMetadataList"
                }
            }
        },
        "DatasetMetadataList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DatasetMetadata"
            }
        },
        "DetectAnomaliesRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "Body": {
                    "$ref": "#/$defs/Stream"
                },
                "ContentType": {
                    "$ref": "#/$defs/ContentType"
                }
            }
        },
        "Stream": {
            "type": "string",
            "format": "binary"
        },
        "ContentType": {
            "type": "string"
        },
        "DetectAnomaliesResponse": {
            "type": "object",
            "properties": {
                "DetectAnomalyResult": {
                    "$ref": "#/$defs/DetectAnomalyResult"
                }
            }
        },
        "DetectAnomalyResult": {
            "type": "object",
            "properties": {
                "Source": {
                    "$ref": "#/$defs/ImageSource"
                },
                "IsAnomalous": {
                    "$ref": "#/$defs/Boolean"
                },
                "Confidence": {
                    "$ref": "#/$defs/Float"
                },
                "Anomalies": {
                    "$ref": "#/$defs/AnomalyList"
                },
                "AnomalyMask": {
                    "$ref": "#/$defs/AnomalyMask"
                }
            }
        },
        "ImageSource": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/ImageSourceType"
                }
            }
        },
        "ImageSourceType": {
            "type": "string"
        },
        "Boolean": {
            "type": "boolean"
        },
        "AnomalyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Anomaly"
            }
        },
        "Anomaly": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/AnomalyName"
                },
                "PixelAnomaly": {
                    "$ref": "#/$defs/PixelAnomaly"
                }
            }
        },
        "AnomalyName": {
            "type": "string"
        },
        "PixelAnomaly": {
            "type": "object",
            "properties": {
                "TotalPercentageArea": {
                    "$ref": "#/$defs/Float"
                },
                "Color": {
                    "$ref": "#/$defs/Color"
                }
            }
        },
        "Color": {
            "type": "string"
        },
        "AnomalyMask": {
            "type": "string",
            "format": "binary"
        },
        "ListDatasetEntriesRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "Labeled": {
                    "$ref": "#/$defs/IsLabeled"
                },
                "AnomalyClass": {
                    "$ref": "#/$defs/AnomalyClassFilter"
                },
                "BeforeCreationDate": {
                    "$ref": "#/$defs/DateTime"
                },
                "AfterCreationDate": {
                    "$ref": "#/$defs/DateTime"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/PageSize"
                },
                "SourceRefContains": {
                    "$ref": "#/$defs/QueryString"
                }
            }
        },
        "IsLabeled": {
            "type": "boolean"
        },
        "AnomalyClassFilter": {
            "type": "string"
        },
        "PaginationToken": {
            "type": "string"
        },
        "PageSize": {
            "type": "integer",
            "format": "int32"
        },
        "QueryString": {
            "type": "string"
        },
        "ListDatasetEntriesResponse": {
            "type": "object",
            "properties": {
                "DatasetEntries": {
                    "$ref": "#/$defs/DatasetEntryList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "DatasetEntryList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DatasetEntry"
            }
        },
        "DatasetEntry": {
            "type": "string"
        },
        "ListModelPackagingJobsRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/PageSize"
                }
            }
        },
        "ListModelPackagingJobsResponse": {
            "type": "object",
            "properties": {
                "ModelPackagingJobs": {
                    "$ref": "#/$defs/ModelPackagingJobsList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ModelPackagingJobsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ModelPackagingJobMetadata"
            }
        },
        "ModelPackagingJobMetadata": {
            "type": "object",
            "properties": {
                "JobName": {
                    "$ref": "#/$defs/ModelPackagingJobName"
                },
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "ModelPackagingJobDescription": {
                    "$ref": "#/$defs/ModelPackagingJobDescription"
                },
                "ModelPackagingMethod": {
                    "$ref": "#/$defs/ModelPackagingMethod"
                },
                "Status": {
                    "$ref": "#/$defs/ModelPackagingJobStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/ModelPackagingStatusMessage"
                },
                "CreationTimestamp": {
                    "$ref": "#/$defs/DateTime"
                },
                "LastUpdatedTimestamp": {
                    "$ref": "#/$defs/DateTime"
                }
            }
        },
        "ListModelsRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/PageSize"
                }
            }
        },
        "ListModelsResponse": {
            "type": "object",
            "properties": {
                "Models": {
                    "$ref": "#/$defs/ModelMetadataList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ModelMetadataList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ModelMetadata"
            }
        },
        "ListProjectsRequest": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/PageSize"
                }
            }
        },
        "ListProjectsResponse": {
            "type": "object",
            "properties": {
                "Projects": {
                    "$ref": "#/$defs/ProjectMetadataList"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ProjectMetadataList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ProjectMetadata"
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/TagArn"
                }
            }
        },
        "TagArn": {
            "type": "string"
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "StartModelRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "MinInferenceUnits": {
                    "$ref": "#/$defs/InferenceUnits"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                },
                "MaxInferenceUnits": {
                    "$ref": "#/$defs/InferenceUnits"
                }
            }
        },
        "StartModelResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/ModelHostingStatus"
                }
            }
        },
        "ModelHostingStatus": {
            "enum": [
                "STARTING_HOSTING",
                "HOSTED",
                "HOSTING_FAILED",
                "STOPPING_HOSTING",
                "SYSTEM_UPDATING"
            ]
        },
        "StartModelPackagingJobRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "JobName": {
                    "$ref": "#/$defs/ModelPackagingJobName"
                },
                "Configuration": {
                    "$ref": "#/$defs/ModelPackagingConfiguration"
                },
                "Description": {
                    "$ref": "#/$defs/ModelPackagingJobDescription"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "StartModelPackagingJobResponse": {
            "type": "object",
            "properties": {
                "JobName": {
                    "$ref": "#/$defs/ModelPackagingJobName"
                }
            }
        },
        "StopModelRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "ModelVersion": {
                    "$ref": "#/$defs/ModelVersion"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "StopModelResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/ModelHostingStatus"
                }
            }
        },
        "TagResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/TagArn"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "TagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UntagResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceArn": {
                    "$ref": "#/$defs/TagArn"
                },
                "TagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "UntagResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "UpdateDatasetEntriesRequest": {
            "type": "object",
            "properties": {
                "ProjectName": {
                    "$ref": "#/$defs/ProjectName"
                },
                "DatasetType": {
                    "$ref": "#/$defs/DatasetType"
                },
                "Changes": {
                    "$ref": "#/$defs/DatasetChanges"
                },
                "ClientToken": {
                    "$ref": "#/$defs/ClientToken"
                }
            }
        },
        "DatasetChanges": {
            "type": "string",
            "format": "binary"
        },
        "UpdateDatasetEntriesResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/DatasetStatus"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://lookoutvision-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://lookoutvision-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://lookoutvision.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://lookoutvision.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}