{
    "commands": [
        {
            "name": "DecryptData",
            "config": {
                "http": {
                    "inject": [
                        {
                            "KeyIdentifier": "route.KeyIdentifier",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/keys/{KeyIdentifier}/decrypt"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DecryptDataOutput"
                    },
                    "inject": [
                        "param.0.KeyIdentifier",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DecryptDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "EncryptData",
            "config": {
                "http": {
                    "inject": [
                        {
                            "KeyIdentifier": "route.KeyIdentifier",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/keys/{KeyIdentifier}/encrypt"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/EncryptDataOutput"
                    },
                    "inject": [
                        "param.0.KeyIdentifier",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/EncryptDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GenerateCardValidationData",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/cardvalidationdata/generate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GenerateCardValidationDataOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GenerateCardValidationDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GenerateMac",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/mac/generate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GenerateMacOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GenerateMacInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GenerateMacEmvPinChange",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/macemvpinchange/generate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GenerateMacEmvPinChangeOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GenerateMacEmvPinChangeInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "GeneratePinData",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/pindata/generate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GeneratePinDataOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GeneratePinDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "ReEncryptData",
            "config": {
                "http": {
                    "inject": [
                        {
                            "IncomingKeyIdentifier": "route.IncomingKeyIdentifier",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/keys/{IncomingKeyIdentifier}/reencrypt"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ReEncryptDataOutput"
                    },
                    "inject": [
                        "param.0.IncomingKeyIdentifier",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ReEncryptDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "TranslatePinData",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/pindata/translate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TranslatePinDataOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TranslatePinDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "VerifyAuthRequestCryptogram",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/cryptogram/verify"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/VerifyAuthRequestCryptogramOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/VerifyAuthRequestCryptogramInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "VerifyCardValidationData",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/cardvalidationdata/verify"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/VerifyCardValidationDataOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/VerifyCardValidationDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "VerifyMac",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/mac/verify"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/VerifyMacOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/VerifyMacInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        },
        {
            "name": "VerifyPinData",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/pindata/verify"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/VerifyPinDataOutput"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/VerifyPinDataInput"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "type": {},
                        "members": {},
                        "traits": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "DecryptDataOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "PlainText": {
                    "$ref": "#/$defs/PlainTextOutputType"
                }
            }
        },
        "KeyArn": {
            "type": "string"
        },
        "KeyCheckValue": {
            "type": "string"
        },
        "PlainTextOutputType": {
            "type": "string"
        },
        "DecryptDataInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "CipherText": {
                    "$ref": "#/$defs/CipherTextType"
                },
                "DecryptionAttributes": {
                    "$ref": "#/$defs/EncryptionDecryptionAttributes"
                },
                "WrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "KeyArnOrKeyAliasType": {
            "type": "string"
        },
        "CipherTextType": {
            "type": "string"
        },
        "EncryptionDecryptionAttributes": {
            "type": "object",
            "properties": {
                "Symmetric": {
                    "$ref": "#/$defs/SymmetricEncryptionAttributes"
                },
                "Asymmetric": {
                    "$ref": "#/$defs/AsymmetricEncryptionAttributes"
                },
                "Dukpt": {
                    "$ref": "#/$defs/DukptEncryptionAttributes"
                },
                "Emv": {
                    "$ref": "#/$defs/EmvEncryptionAttributes"
                }
            }
        },
        "SymmetricEncryptionAttributes": {
            "type": "object",
            "properties": {
                "Mode": {
                    "$ref": "#/$defs/EncryptionMode"
                },
                "InitializationVector": {
                    "$ref": "#/$defs/InitializationVectorType"
                },
                "PaddingType": {
                    "$ref": "#/$defs/PaddingType"
                }
            }
        },
        "EncryptionMode": {
            "enum": [
                "ECB",
                "CBC",
                "CFB",
                "CFB1",
                "CFB8",
                "CFB64",
                "CFB128",
                "OFB"
            ]
        },
        "InitializationVectorType": {
            "type": "string"
        },
        "PaddingType": {
            "enum": [
                "PKCS1",
                "OAEP_SHA1",
                "OAEP_SHA256",
                "OAEP_SHA512"
            ]
        },
        "AsymmetricEncryptionAttributes": {
            "type": "object",
            "properties": {
                "PaddingType": {
                    "$ref": "#/$defs/PaddingType"
                }
            }
        },
        "DukptEncryptionAttributes": {
            "type": "object",
            "properties": {
                "KeySerialNumber": {
                    "$ref": "#/$defs/HexLengthBetween10And24"
                },
                "Mode": {
                    "$ref": "#/$defs/DukptEncryptionMode"
                },
                "DukptKeyDerivationType": {
                    "$ref": "#/$defs/DukptDerivationType"
                },
                "DukptKeyVariant": {
                    "$ref": "#/$defs/DukptKeyVariant"
                },
                "InitializationVector": {
                    "$ref": "#/$defs/InitializationVectorType"
                }
            }
        },
        "HexLengthBetween10And24": {
            "type": "string"
        },
        "DukptEncryptionMode": {
            "enum": [
                "ECB",
                "CBC"
            ]
        },
        "DukptDerivationType": {
            "enum": [
                "TDES_2KEY",
                "TDES_3KEY",
                "AES_128",
                "AES_192",
                "AES_256"
            ]
        },
        "DukptKeyVariant": {
            "enum": [
                "BIDIRECTIONAL",
                "REQUEST",
                "RESPONSE"
            ]
        },
        "EmvEncryptionAttributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/EmvMajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "SessionDerivationData": {
                    "$ref": "#/$defs/SessionDerivationDataType"
                },
                "Mode": {
                    "$ref": "#/$defs/EmvEncryptionMode"
                },
                "InitializationVector": {
                    "$ref": "#/$defs/InitializationVectorType"
                }
            }
        },
        "EmvMajorKeyDerivationMode": {
            "enum": [
                "EMV_OPTION_A",
                "EMV_OPTION_B"
            ]
        },
        "PrimaryAccountNumberType": {
            "type": "string"
        },
        "NumberLengthEquals2": {
            "type": "string"
        },
        "SessionDerivationDataType": {
            "type": "string"
        },
        "EmvEncryptionMode": {
            "enum": [
                "ECB",
                "CBC"
            ]
        },
        "WrappedKey": {
            "type": "object",
            "properties": {
                "WrappedKeyMaterial": {
                    "$ref": "#/$defs/WrappedKeyMaterial"
                },
                "KeyCheckValueAlgorithm": {
                    "$ref": "#/$defs/KeyCheckValueAlgorithm"
                }
            }
        },
        "WrappedKeyMaterial": {
            "type": "object",
            "properties": {
                "Tr31KeyBlock": {
                    "$ref": "#/$defs/Tr31WrappedKeyBlock"
                },
                "DiffieHellmanSymmetricKey": {
                    "$ref": "#/$defs/EcdhDerivationAttributes"
                }
            }
        },
        "Tr31WrappedKeyBlock": {
            "type": "string"
        },
        "EcdhDerivationAttributes": {
            "type": "object",
            "properties": {
                "CertificateAuthorityPublicKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "PublicKeyCertificate": {
                    "$ref": "#/$defs/CertificateType"
                },
                "KeyAlgorithm": {
                    "$ref": "#/$defs/SymmetricKeyAlgorithm"
                },
                "KeyDerivationFunction": {
                    "$ref": "#/$defs/KeyDerivationFunction"
                },
                "KeyDerivationHashAlgorithm": {
                    "$ref": "#/$defs/KeyDerivationHashAlgorithm"
                },
                "SharedInformation": {
                    "$ref": "#/$defs/SharedInformation"
                }
            }
        },
        "CertificateType": {
            "type": "string"
        },
        "SymmetricKeyAlgorithm": {
            "enum": [
                "TDES_2KEY",
                "TDES_3KEY",
                "AES_128",
                "AES_192",
                "AES_256"
            ]
        },
        "KeyDerivationFunction": {
            "enum": [
                "NIST_SP800",
                "ANSI_X963"
            ]
        },
        "KeyDerivationHashAlgorithm": {
            "enum": [
                "SHA_256",
                "SHA_384",
                "SHA_512"
            ]
        },
        "SharedInformation": {
            "type": "string"
        },
        "KeyCheckValueAlgorithm": {
            "type": "string"
        },
        "EncryptDataOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "CipherText": {
                    "$ref": "#/$defs/CipherTextType"
                }
            }
        },
        "EncryptDataInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "PlainText": {
                    "$ref": "#/$defs/PlainTextType"
                },
                "EncryptionAttributes": {
                    "$ref": "#/$defs/EncryptionDecryptionAttributes"
                },
                "WrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "PlainTextType": {
            "type": "string"
        },
        "GenerateCardValidationDataOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "ValidationData": {
                    "$ref": "#/$defs/ValidationDataType"
                }
            }
        },
        "ValidationDataType": {
            "type": "string"
        },
        "GenerateCardValidationDataInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "GenerationAttributes": {
                    "$ref": "#/$defs/CardGenerationAttributes"
                },
                "ValidationDataLength": {
                    "$ref": "#/$defs/IntegerRangeBetween3And5Type"
                }
            }
        },
        "CardGenerationAttributes": {
            "type": "object",
            "properties": {
                "AmexCardSecurityCodeVersion1": {
                    "$ref": "#/$defs/AmexCardSecurityCodeVersion1"
                },
                "AmexCardSecurityCodeVersion2": {
                    "$ref": "#/$defs/AmexCardSecurityCodeVersion2"
                },
                "CardVerificationValue1": {
                    "$ref": "#/$defs/CardVerificationValue1"
                },
                "CardVerificationValue2": {
                    "$ref": "#/$defs/CardVerificationValue2"
                },
                "CardHolderVerificationValue": {
                    "$ref": "#/$defs/CardHolderVerificationValue"
                },
                "DynamicCardVerificationCode": {
                    "$ref": "#/$defs/DynamicCardVerificationCode"
                },
                "DynamicCardVerificationValue": {
                    "$ref": "#/$defs/DynamicCardVerificationValue"
                }
            }
        },
        "AmexCardSecurityCodeVersion1": {
            "type": "object",
            "properties": {
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                }
            }
        },
        "CardExpiryDateType": {
            "type": "string"
        },
        "AmexCardSecurityCodeVersion2": {
            "type": "object",
            "properties": {
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                },
                "ServiceCode": {
                    "$ref": "#/$defs/ServiceCodeType"
                }
            }
        },
        "ServiceCodeType": {
            "type": "string"
        },
        "CardVerificationValue1": {
            "type": "object",
            "properties": {
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                },
                "ServiceCode": {
                    "$ref": "#/$defs/ServiceCodeType"
                }
            }
        },
        "CardVerificationValue2": {
            "type": "object",
            "properties": {
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                }
            }
        },
        "CardHolderVerificationValue": {
            "type": "object",
            "properties": {
                "UnpredictableNumber": {
                    "$ref": "#/$defs/HexLengthBetween2And8"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthBetween2And4"
                }
            }
        },
        "HexLengthBetween2And8": {
            "type": "string"
        },
        "HexLengthBetween2And4": {
            "type": "string"
        },
        "DynamicCardVerificationCode": {
            "type": "object",
            "properties": {
                "UnpredictableNumber": {
                    "$ref": "#/$defs/HexLengthBetween2And8"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthBetween2And4"
                },
                "TrackData": {
                    "$ref": "#/$defs/TrackDataType"
                }
            }
        },
        "TrackDataType": {
            "type": "string"
        },
        "DynamicCardVerificationValue": {
            "type": "object",
            "properties": {
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                },
                "ServiceCode": {
                    "$ref": "#/$defs/ServiceCodeType"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthBetween2And4"
                }
            }
        },
        "IntegerRangeBetween3And5Type": {
            "type": "integer",
            "format": "int32"
        },
        "GenerateMacOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "Mac": {
                    "$ref": "#/$defs/MacOutputType"
                }
            }
        },
        "MacOutputType": {
            "type": "string"
        },
        "GenerateMacInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "MessageData": {
                    "$ref": "#/$defs/MessageDataType"
                },
                "GenerationAttributes": {
                    "$ref": "#/$defs/MacAttributes"
                },
                "MacLength": {
                    "$ref": "#/$defs/IntegerRangeBetween4And16"
                }
            }
        },
        "MessageDataType": {
            "type": "string"
        },
        "MacAttributes": {
            "type": "object",
            "properties": {
                "Algorithm": {
                    "$ref": "#/$defs/MacAlgorithm"
                },
                "EmvMac": {
                    "$ref": "#/$defs/MacAlgorithmEmv"
                },
                "DukptIso9797Algorithm1": {
                    "$ref": "#/$defs/MacAlgorithmDukpt"
                },
                "DukptIso9797Algorithm3": {
                    "$ref": "#/$defs/MacAlgorithmDukpt"
                },
                "DukptCmac": {
                    "$ref": "#/$defs/MacAlgorithmDukpt"
                }
            }
        },
        "MacAlgorithm": {
            "enum": [
                "ISO9797_ALGORITHM1",
                "ISO9797_ALGORITHM3",
                "CMAC",
                "HMAC_SHA224",
                "HMAC_SHA256",
                "HMAC_SHA384",
                "HMAC_SHA512"
            ]
        },
        "MacAlgorithmEmv": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "SessionKeyDerivationMode": {
                    "$ref": "#/$defs/SessionKeyDerivationMode"
                },
                "SessionKeyDerivationValue": {
                    "$ref": "#/$defs/SessionKeyDerivationValue"
                }
            }
        },
        "MajorKeyDerivationMode": {
            "enum": [
                "EMV_OPTION_A",
                "EMV_OPTION_B"
            ]
        },
        "SessionKeyDerivationMode": {
            "enum": [
                "EMV_COMMON_SESSION_KEY",
                "EMV2000",
                "AMEX",
                "MASTERCARD_SESSION_KEY",
                "VISA"
            ]
        },
        "SessionKeyDerivationValue": {
            "type": "object",
            "properties": {
                "ApplicationCryptogram": {
                    "$ref": "#/$defs/ApplicationCryptogramType"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                }
            }
        },
        "ApplicationCryptogramType": {
            "type": "string"
        },
        "HexLengthEquals4": {
            "type": "string"
        },
        "MacAlgorithmDukpt": {
            "type": "object",
            "properties": {
                "KeySerialNumber": {
                    "$ref": "#/$defs/HexLengthBetween10And24"
                },
                "DukptKeyVariant": {
                    "$ref": "#/$defs/DukptKeyVariant"
                },
                "DukptDerivationType": {
                    "$ref": "#/$defs/DukptDerivationType"
                }
            }
        },
        "IntegerRangeBetween4And16": {
            "type": "integer",
            "format": "int32"
        },
        "GenerateMacEmvPinChangeOutput": {
            "type": "object",
            "properties": {
                "NewPinPekArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "SecureMessagingIntegrityKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "SecureMessagingConfidentialityKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "Mac": {
                    "$ref": "#/$defs/PinChangeMacOutputType"
                },
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "NewPinPekKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "SecureMessagingIntegrityKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "SecureMessagingConfidentialityKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "VisaAmexDerivationOutputs": {
                    "$ref": "#/$defs/VisaAmexDerivationOutputs"
                }
            }
        },
        "PinChangeMacOutputType": {
            "type": "string"
        },
        "EncryptedPinBlockType": {
            "type": "string"
        },
        "VisaAmexDerivationOutputs": {
            "type": "object",
            "properties": {
                "AuthorizationRequestKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "AuthorizationRequestKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "CurrentPinPekArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "CurrentPinPekKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                }
            }
        },
        "GenerateMacEmvPinChangeInput": {
            "type": "object",
            "properties": {
                "NewPinPekIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "NewEncryptedPinBlock": {
                    "$ref": "#/$defs/PinBlockLengthEquals16"
                },
                "PinBlockFormat": {
                    "$ref": "#/$defs/PinBlockFormatForEmvPinChange"
                },
                "SecureMessagingIntegrityKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "SecureMessagingConfidentialityKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "MessageData": {
                    "$ref": "#/$defs/CommandMessageDataType"
                },
                "DerivationMethodAttributes": {
                    "$ref": "#/$defs/DerivationMethodAttributes"
                }
            }
        },
        "PinBlockLengthEquals16": {
            "type": "string"
        },
        "PinBlockFormatForEmvPinChange": {
            "enum": [
                "ISO_FORMAT_0",
                "ISO_FORMAT_1",
                "ISO_FORMAT_3"
            ]
        },
        "CommandMessageDataType": {
            "type": "string"
        },
        "DerivationMethodAttributes": {
            "type": "object",
            "properties": {
                "EmvCommon": {
                    "$ref": "#/$defs/EmvCommonAttributes"
                },
                "Amex": {
                    "$ref": "#/$defs/AmexAttributes"
                },
                "Visa": {
                    "$ref": "#/$defs/VisaAttributes"
                },
                "Emv2000": {
                    "$ref": "#/$defs/Emv2000Attributes"
                },
                "Mastercard": {
                    "$ref": "#/$defs/MasterCardAttributes"
                }
            }
        },
        "EmvCommonAttributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationCryptogram": {
                    "$ref": "#/$defs/ApplicationCryptogramType"
                },
                "Mode": {
                    "$ref": "#/$defs/EmvEncryptionMode"
                },
                "PinBlockPaddingType": {
                    "$ref": "#/$defs/PinBlockPaddingType"
                },
                "PinBlockLengthPosition": {
                    "$ref": "#/$defs/PinBlockLengthPosition"
                }
            }
        },
        "PinBlockPaddingType": {
            "enum": [
                "NO_PADDING",
                "ISO_IEC_7816_4"
            ]
        },
        "PinBlockLengthPosition": {
            "enum": [
                "NONE",
                "FRONT_OF_PIN_BLOCK"
            ]
        },
        "AmexAttributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                },
                "AuthorizationRequestKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "CurrentPinAttributes": {
                    "$ref": "#/$defs/CurrentPinAttributes"
                }
            }
        },
        "CurrentPinAttributes": {
            "type": "object",
            "properties": {
                "CurrentPinPekIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "CurrentEncryptedPinBlock": {
                    "$ref": "#/$defs/PinBlockLengthEquals16"
                }
            }
        },
        "VisaAttributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                },
                "AuthorizationRequestKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "CurrentPinAttributes": {
                    "$ref": "#/$defs/CurrentPinAttributes"
                }
            }
        },
        "Emv2000Attributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                }
            }
        },
        "MasterCardAttributes": {
            "type": "object",
            "properties": {
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationCryptogram": {
                    "$ref": "#/$defs/ApplicationCryptogramType"
                }
            }
        },
        "GeneratePinDataOutput": {
            "type": "object",
            "properties": {
                "GenerationKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "GenerationKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "EncryptionKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "EncryptionKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "PinData": {
                    "$ref": "#/$defs/PinData"
                }
            }
        },
        "PinData": {
            "type": "object",
            "properties": {
                "PinOffset": {
                    "$ref": "#/$defs/PinOffsetType"
                },
                "VerificationValue": {
                    "$ref": "#/$defs/VerificationValueType"
                }
            }
        },
        "PinOffsetType": {
            "type": "string"
        },
        "VerificationValueType": {
            "type": "string"
        },
        "GeneratePinDataInput": {
            "type": "object",
            "properties": {
                "GenerationKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "EncryptionKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "GenerationAttributes": {
                    "$ref": "#/$defs/PinGenerationAttributes"
                },
                "PinDataLength": {
                    "$ref": "#/$defs/IntegerRangeBetween4And12"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PinBlockFormat": {
                    "$ref": "#/$defs/PinBlockFormatForPinData"
                },
                "EncryptionWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "PinGenerationAttributes": {
            "type": "object",
            "properties": {
                "VisaPin": {
                    "$ref": "#/$defs/VisaPin"
                },
                "VisaPinVerificationValue": {
                    "$ref": "#/$defs/VisaPinVerificationValue"
                },
                "Ibm3624PinOffset": {
                    "$ref": "#/$defs/Ibm3624PinOffset"
                },
                "Ibm3624NaturalPin": {
                    "$ref": "#/$defs/Ibm3624NaturalPin"
                },
                "Ibm3624RandomPin": {
                    "$ref": "#/$defs/Ibm3624RandomPin"
                },
                "Ibm3624PinFromOffset": {
                    "$ref": "#/$defs/Ibm3624PinFromOffset"
                }
            }
        },
        "VisaPin": {
            "type": "object",
            "properties": {
                "PinVerificationKeyIndex": {
                    "$ref": "#/$defs/IntegerRangeBetween0And6"
                }
            }
        },
        "IntegerRangeBetween0And6": {
            "type": "integer",
            "format": "int32"
        },
        "VisaPinVerificationValue": {
            "type": "object",
            "properties": {
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "PinVerificationKeyIndex": {
                    "$ref": "#/$defs/IntegerRangeBetween0And6"
                }
            }
        },
        "Ibm3624PinOffset": {
            "type": "object",
            "properties": {
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "DecimalizationTable": {
                    "$ref": "#/$defs/DecimalizationTableType"
                },
                "PinValidationDataPadCharacter": {
                    "$ref": "#/$defs/HexLengthEquals1"
                },
                "PinValidationData": {
                    "$ref": "#/$defs/PinValidationDataType"
                }
            }
        },
        "DecimalizationTableType": {
            "type": "string"
        },
        "HexLengthEquals1": {
            "type": "string"
        },
        "PinValidationDataType": {
            "type": "string"
        },
        "Ibm3624NaturalPin": {
            "type": "object",
            "properties": {
                "DecimalizationTable": {
                    "$ref": "#/$defs/DecimalizationTableType"
                },
                "PinValidationDataPadCharacter": {
                    "$ref": "#/$defs/HexLengthEquals1"
                },
                "PinValidationData": {
                    "$ref": "#/$defs/PinValidationDataType"
                }
            }
        },
        "Ibm3624RandomPin": {
            "type": "object",
            "properties": {
                "DecimalizationTable": {
                    "$ref": "#/$defs/DecimalizationTableType"
                },
                "PinValidationDataPadCharacter": {
                    "$ref": "#/$defs/HexLengthEquals1"
                },
                "PinValidationData": {
                    "$ref": "#/$defs/PinValidationDataType"
                }
            }
        },
        "Ibm3624PinFromOffset": {
            "type": "object",
            "properties": {
                "DecimalizationTable": {
                    "$ref": "#/$defs/DecimalizationTableType"
                },
                "PinValidationDataPadCharacter": {
                    "$ref": "#/$defs/HexLengthEquals1"
                },
                "PinValidationData": {
                    "$ref": "#/$defs/PinValidationDataType"
                },
                "PinOffset": {
                    "$ref": "#/$defs/PinOffsetType"
                }
            }
        },
        "IntegerRangeBetween4And12": {
            "type": "integer",
            "format": "int32"
        },
        "PinBlockFormatForPinData": {
            "enum": [
                "ISO_FORMAT_0",
                "ISO_FORMAT_3",
                "ISO_FORMAT_4"
            ]
        },
        "ReEncryptDataOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "CipherText": {
                    "$ref": "#/$defs/CipherTextType"
                }
            }
        },
        "ReEncryptDataInput": {
            "type": "object",
            "properties": {
                "IncomingKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "OutgoingKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "CipherText": {
                    "$ref": "#/$defs/CipherTextType"
                },
                "IncomingEncryptionAttributes": {
                    "$ref": "#/$defs/ReEncryptionAttributes"
                },
                "OutgoingEncryptionAttributes": {
                    "$ref": "#/$defs/ReEncryptionAttributes"
                },
                "IncomingWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                },
                "OutgoingWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "ReEncryptionAttributes": {
            "type": "object",
            "properties": {
                "Symmetric": {
                    "$ref": "#/$defs/SymmetricEncryptionAttributes"
                },
                "Dukpt": {
                    "$ref": "#/$defs/DukptEncryptionAttributes"
                }
            }
        },
        "TranslatePinDataOutput": {
            "type": "object",
            "properties": {
                "PinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                }
            }
        },
        "TranslatePinDataInput": {
            "type": "object",
            "properties": {
                "IncomingKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "OutgoingKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "IncomingTranslationAttributes": {
                    "$ref": "#/$defs/TranslationIsoFormats"
                },
                "OutgoingTranslationAttributes": {
                    "$ref": "#/$defs/TranslationIsoFormats"
                },
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/HexEvenLengthBetween16And32"
                },
                "IncomingDukptAttributes": {
                    "$ref": "#/$defs/DukptDerivationAttributes"
                },
                "OutgoingDukptAttributes": {
                    "$ref": "#/$defs/DukptDerivationAttributes"
                },
                "IncomingWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                },
                "OutgoingWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "TranslationIsoFormats": {
            "type": "object",
            "properties": {
                "IsoFormat0": {
                    "$ref": "#/$defs/TranslationPinDataIsoFormat034"
                },
                "IsoFormat1": {
                    "$ref": "#/$defs/TranslationPinDataIsoFormat1"
                },
                "IsoFormat3": {
                    "$ref": "#/$defs/TranslationPinDataIsoFormat034"
                },
                "IsoFormat4": {
                    "$ref": "#/$defs/TranslationPinDataIsoFormat034"
                }
            }
        },
        "TranslationPinDataIsoFormat034": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                }
            }
        },
        "TranslationPinDataIsoFormat1": {
            "type": "object",
            "properties": {}
        },
        "HexEvenLengthBetween16And32": {
            "type": "string"
        },
        "DukptDerivationAttributes": {
            "type": "object",
            "properties": {
                "KeySerialNumber": {
                    "$ref": "#/$defs/HexLengthBetween10And24"
                },
                "DukptKeyDerivationType": {
                    "$ref": "#/$defs/DukptDerivationType"
                },
                "DukptKeyVariant": {
                    "$ref": "#/$defs/DukptKeyVariant"
                }
            }
        },
        "VerifyAuthRequestCryptogramOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "AuthResponseValue": {
                    "$ref": "#/$defs/AuthResponseValueType"
                }
            }
        },
        "AuthResponseValueType": {
            "type": "string"
        },
        "VerifyAuthRequestCryptogramInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "TransactionData": {
                    "$ref": "#/$defs/TransactionDataType"
                },
                "AuthRequestCryptogram": {
                    "$ref": "#/$defs/AuthRequestCryptogramType"
                },
                "MajorKeyDerivationMode": {
                    "$ref": "#/$defs/MajorKeyDerivationMode"
                },
                "SessionKeyDerivationAttributes": {
                    "$ref": "#/$defs/SessionKeyDerivation"
                },
                "AuthResponseAttributes": {
                    "$ref": "#/$defs/CryptogramAuthResponse"
                }
            }
        },
        "TransactionDataType": {
            "type": "string"
        },
        "AuthRequestCryptogramType": {
            "type": "string"
        },
        "SessionKeyDerivation": {
            "type": "object",
            "properties": {
                "EmvCommon": {
                    "$ref": "#/$defs/SessionKeyEmvCommon"
                },
                "Mastercard": {
                    "$ref": "#/$defs/SessionKeyMastercard"
                },
                "Emv2000": {
                    "$ref": "#/$defs/SessionKeyEmv2000"
                },
                "Amex": {
                    "$ref": "#/$defs/SessionKeyAmex"
                },
                "Visa": {
                    "$ref": "#/$defs/SessionKeyVisa"
                }
            }
        },
        "SessionKeyEmvCommon": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                }
            }
        },
        "SessionKeyMastercard": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                },
                "UnpredictableNumber": {
                    "$ref": "#/$defs/HexLengthBetween2And8"
                }
            }
        },
        "SessionKeyEmv2000": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthEquals4"
                }
            }
        },
        "SessionKeyAmex": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                }
            }
        },
        "SessionKeyVisa": {
            "type": "object",
            "properties": {
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PanSequenceNumber": {
                    "$ref": "#/$defs/NumberLengthEquals2"
                }
            }
        },
        "CryptogramAuthResponse": {
            "type": "object",
            "properties": {
                "ArpcMethod1": {
                    "$ref": "#/$defs/CryptogramVerificationArpcMethod1"
                },
                "ArpcMethod2": {
                    "$ref": "#/$defs/CryptogramVerificationArpcMethod2"
                }
            }
        },
        "CryptogramVerificationArpcMethod1": {
            "type": "object",
            "properties": {
                "AuthResponseCode": {
                    "$ref": "#/$defs/HexLengthEquals4"
                }
            }
        },
        "CryptogramVerificationArpcMethod2": {
            "type": "object",
            "properties": {
                "CardStatusUpdate": {
                    "$ref": "#/$defs/HexLengthEquals8"
                },
                "ProprietaryAuthenticationData": {
                    "$ref": "#/$defs/ProprietaryAuthenticationDataType"
                }
            }
        },
        "HexLengthEquals8": {
            "type": "string"
        },
        "ProprietaryAuthenticationDataType": {
            "type": "string"
        },
        "VerifyCardValidationDataOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                }
            }
        },
        "VerifyCardValidationDataInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "VerificationAttributes": {
                    "$ref": "#/$defs/CardVerificationAttributes"
                },
                "ValidationData": {
                    "$ref": "#/$defs/ValidationDataType"
                }
            }
        },
        "CardVerificationAttributes": {
            "type": "object",
            "properties": {
                "AmexCardSecurityCodeVersion1": {
                    "$ref": "#/$defs/AmexCardSecurityCodeVersion1"
                },
                "AmexCardSecurityCodeVersion2": {
                    "$ref": "#/$defs/AmexCardSecurityCodeVersion2"
                },
                "CardVerificationValue1": {
                    "$ref": "#/$defs/CardVerificationValue1"
                },
                "CardVerificationValue2": {
                    "$ref": "#/$defs/CardVerificationValue2"
                },
                "CardHolderVerificationValue": {
                    "$ref": "#/$defs/CardHolderVerificationValue"
                },
                "DynamicCardVerificationCode": {
                    "$ref": "#/$defs/DynamicCardVerificationCode"
                },
                "DynamicCardVerificationValue": {
                    "$ref": "#/$defs/DynamicCardVerificationValue"
                },
                "DiscoverDynamicCardVerificationCode": {
                    "$ref": "#/$defs/DiscoverDynamicCardVerificationCode"
                }
            }
        },
        "DiscoverDynamicCardVerificationCode": {
            "type": "object",
            "properties": {
                "CardExpiryDate": {
                    "$ref": "#/$defs/CardExpiryDateType"
                },
                "UnpredictableNumber": {
                    "$ref": "#/$defs/HexLengthBetween2And8"
                },
                "ApplicationTransactionCounter": {
                    "$ref": "#/$defs/HexLengthBetween2And4"
                }
            }
        },
        "VerifyMacOutput": {
            "type": "object",
            "properties": {
                "KeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "KeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                }
            }
        },
        "VerifyMacInput": {
            "type": "object",
            "properties": {
                "KeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "MessageData": {
                    "$ref": "#/$defs/MessageDataType"
                },
                "Mac": {
                    "$ref": "#/$defs/MacType"
                },
                "VerificationAttributes": {
                    "$ref": "#/$defs/MacAttributes"
                },
                "MacLength": {
                    "$ref": "#/$defs/IntegerRangeBetween4And16"
                }
            }
        },
        "MacType": {
            "type": "string"
        },
        "VerifyPinDataOutput": {
            "type": "object",
            "properties": {
                "VerificationKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "VerificationKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                },
                "EncryptionKeyArn": {
                    "$ref": "#/$defs/KeyArn"
                },
                "EncryptionKeyCheckValue": {
                    "$ref": "#/$defs/KeyCheckValue"
                }
            }
        },
        "VerifyPinDataInput": {
            "type": "object",
            "properties": {
                "VerificationKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "EncryptionKeyIdentifier": {
                    "$ref": "#/$defs/KeyArnOrKeyAliasType"
                },
                "VerificationAttributes": {
                    "$ref": "#/$defs/PinVerificationAttributes"
                },
                "EncryptedPinBlock": {
                    "$ref": "#/$defs/EncryptedPinBlockType"
                },
                "PrimaryAccountNumber": {
                    "$ref": "#/$defs/PrimaryAccountNumberType"
                },
                "PinBlockFormat": {
                    "$ref": "#/$defs/PinBlockFormatForPinData"
                },
                "PinDataLength": {
                    "$ref": "#/$defs/IntegerRangeBetween4And12"
                },
                "DukptAttributes": {
                    "$ref": "#/$defs/DukptAttributes"
                },
                "EncryptionWrappedKey": {
                    "$ref": "#/$defs/WrappedKey"
                }
            }
        },
        "PinVerificationAttributes": {
            "type": "object",
            "properties": {
                "VisaPin": {
                    "$ref": "#/$defs/VisaPinVerification"
                },
                "Ibm3624Pin": {
                    "$ref": "#/$defs/Ibm3624PinVerification"
                }
            }
        },
        "VisaPinVerification": {
            "type": "object",
            "properties": {
                "PinVerificationKeyIndex": {
                    "$ref": "#/$defs/IntegerRangeBetween0And6"
                },
                "VerificationValue": {
                    "$ref": "#/$defs/VerificationValueType"
                }
            }
        },
        "Ibm3624PinVerification": {
            "type": "object",
            "properties": {
                "DecimalizationTable": {
                    "$ref": "#/$defs/DecimalizationTableType"
                },
                "PinValidationDataPadCharacter": {
                    "$ref": "#/$defs/HexLengthEquals1"
                },
                "PinValidationData": {
                    "$ref": "#/$defs/PinValidationDataType"
                },
                "PinOffset": {
                    "$ref": "#/$defs/PinOffsetType"
                }
            }
        },
        "DukptAttributes": {
            "type": "object",
            "properties": {
                "KeySerialNumber": {
                    "$ref": "#/$defs/HexLengthBetween10And24"
                },
                "DukptDerivationType": {
                    "$ref": "#/$defs/DukptDerivationType"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    "type": "error"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": {
                                            "ref": "Endpoint"
                                        },
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "isSet",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ]
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "aws.partition",
                                            "argv": [
                                                {
                                                    "ref": "Region"
                                                }
                                            ],
                                            "assign": "PartitionResult"
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://dataplane.payment-cryptography-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseFIPS"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsFIPS"
                                                                    ]
                                                                },
                                                                true
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://dataplane.payment-cryptography-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "FIPS is enabled but this partition does not support FIPS",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "ref": "UseDualStack"
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [
                                                        {
                                                            "fn": "booleanEquals",
                                                            "argv": [
                                                                true,
                                                                {
                                                                    "fn": "getAttr",
                                                                    "argv": [
                                                                        {
                                                                            "ref": "PartitionResult"
                                                                        },
                                                                        "supportsDualStack"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "rules": [
                                                        {
                                                            "conditions": [],
                                                            "rules": [
                                                                {
                                                                    "conditions": [],
                                                                    "endpoint": {
                                                                        "url": "https://dataplane.payment-cryptography.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                                        "properties": {},
                                                                        "headers": {}
                                                                    },
                                                                    "type": "endpoint"
                                                                }
                                                            ],
                                                            "type": "tree"
                                                        }
                                                    ],
                                                    "type": "tree"
                                                },
                                                {
                                                    "conditions": [],
                                                    "error": "DualStack is enabled but this partition does not support DualStack",
                                                    "type": "error"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://dataplane.payment-cryptography.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        }
                                    ],
                                    "type": "tree"
                                }
                            ],
                            "type": "tree"
                        },
                        {
                            "conditions": [],
                            "error": "Invalid Configuration: Missing Region",
                            "type": "error"
                        }
                    ],
                    "type": "tree"
                }
            ]
        }
    }
}