{
    "name": "route53",
    "commands": [
        {
            "name": "ActivateKeySigningKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ActivateKeySigningKeyResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ActivateKeySigningKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "Name": {}
                    }
                }
            }
        },
        {
            "name": "AssociateVPCWithHostedZone",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/associatevpc"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/AssociateVPCWithHostedZoneResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/AssociateVPCWithHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "VPC": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "ChangeCidrCollection",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/cidrcollection/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ChangeCidrCollectionResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ChangeCidrCollectionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "CollectionVersion": {},
                        "Changes": {}
                    }
                }
            }
        },
        {
            "name": "ChangeResourceRecordSets",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/rrset"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ChangeResourceRecordSetsResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ChangeResourceRecordSetsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "ChangeBatch": {}
                    }
                }
            }
        },
        {
            "name": "ChangeTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceType": "route.ResourceType",
                            "ResourceId": "route.ResourceId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/tags/{ResourceType}/{ResourceId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ChangeTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceType",
                        "param.0.ResourceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ChangeTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceType": {},
                        "ResourceId": {},
                        "AddTags": {},
                        "RemoveTagKeys": {}
                    }
                }
            }
        },
        {
            "name": "CreateCidrCollection",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/cidrcollection"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateCidrCollectionResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateCidrCollectionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Name": {},
                        "CallerReference": {}
                    }
                }
            }
        },
        {
            "name": "CreateHealthCheck",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/healthcheck"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateHealthCheckResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateHealthCheckRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "CallerReference": {},
                        "HealthCheckConfig": {}
                    }
                }
            }
        },
        {
            "name": "CreateHostedZone",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateHostedZoneResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Name": {},
                        "VPC": {},
                        "CallerReference": {},
                        "HostedZoneConfig": {},
                        "DelegationSetId": {}
                    }
                }
            }
        },
        {
            "name": "CreateKeySigningKey",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/keysigningkey"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateKeySigningKeyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateKeySigningKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "CallerReference": {},
                        "HostedZoneId": {},
                        "KeyManagementServiceArn": {},
                        "Name": {},
                        "Status": {}
                    }
                }
            }
        },
        {
            "name": "CreateQueryLoggingConfig",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/queryloggingconfig"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateQueryLoggingConfigResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateQueryLoggingConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "CloudWatchLogsLogGroupArn": {}
                    }
                }
            }
        },
        {
            "name": "CreateReusableDelegationSet",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/delegationset"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateReusableDelegationSetResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateReusableDelegationSetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "CallerReference": {},
                        "HostedZoneId": {}
                    }
                }
            }
        },
        {
            "name": "CreateTrafficPolicy",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/trafficpolicy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateTrafficPolicyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateTrafficPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Name": {},
                        "Document": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "CreateTrafficPolicyInstance",
            "config": {
                "http": {
                    "inject": [
                        "body"
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/trafficpolicyinstance"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateTrafficPolicyInstanceResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateTrafficPolicyInstanceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "Name": {},
                        "TTL": {},
                        "TrafficPolicyId": {},
                        "TrafficPolicyVersion": {}
                    }
                }
            }
        },
        {
            "name": "CreateTrafficPolicyVersion",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/trafficpolicy/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateTrafficPolicyVersionResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateTrafficPolicyVersionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "Document": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "CreateVPCAssociationAuthorization",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/CreateVPCAssociationAuthorizationResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/CreateVPCAssociationAuthorizationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "VPC": {}
                    }
                }
            }
        },
        {
            "name": "DeactivateKeySigningKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeactivateKeySigningKeyResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeactivateKeySigningKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "Name": {}
                    }
                }
            }
        },
        {
            "name": "DeleteCidrCollection",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/cidrcollection/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteCidrCollectionResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteCidrCollectionRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteHealthCheck",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HealthCheckId": "route.HealthCheckId",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/healthcheck/{HealthCheckId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteHealthCheckResponse"
                    },
                    "inject": [
                        "param.0.HealthCheckId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteHealthCheckRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HealthCheckId": {}
                    }
                }
            }
        },
        {
            "name": "DeleteHostedZone",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/hostedzone/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteHostedZoneResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteKeySigningKey",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "Name": "route.Name",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteKeySigningKeyResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0.Name",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteKeySigningKeyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "Name": {}
                    }
                }
            }
        },
        {
            "name": "DeleteQueryLoggingConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/queryloggingconfig/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteQueryLoggingConfigResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteQueryLoggingConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteReusableDelegationSet",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/delegationset/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteReusableDelegationSetResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteReusableDelegationSetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteTrafficPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "Version": "route.Version",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/trafficpolicy/{Id}/{Version}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteTrafficPolicyResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0.Version",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteTrafficPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "Version": {}
                    }
                }
            }
        },
        {
            "name": "DeleteTrafficPolicyInstance",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "DELETE",
                    "route": "/2013-04-01/trafficpolicyinstance/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteTrafficPolicyInstanceResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteTrafficPolicyInstanceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "DeleteVPCAssociationAuthorization",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DeleteVPCAssociationAuthorizationResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DeleteVPCAssociationAuthorizationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "VPC": {}
                    }
                }
            }
        },
        {
            "name": "DisableHostedZoneDNSSEC",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisableHostedZoneDNSSECResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DisableHostedZoneDNSSECRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {}
                    }
                }
            }
        },
        {
            "name": "DisassociateVPCFromHostedZone",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/DisassociateVPCFromHostedZoneResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/DisassociateVPCFromHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "VPC": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "EnableHostedZoneDNSSEC",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/EnableHostedZoneDNSSECResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/EnableHostedZoneDNSSECRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {}
                    }
                }
            }
        },
        {
            "name": "GetAccountLimit",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Type": "route.Type",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/accountlimit/{Type}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetAccountLimitResponse"
                    },
                    "inject": [
                        "param.0.Type",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetAccountLimitRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Type": {}
                    }
                }
            }
        },
        {
            "name": "GetChange",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/change/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetChangeResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetChangeRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "GetCheckerIpRanges",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/checkeripranges"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetCheckerIpRangesResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetCheckerIpRangesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {}
                }
            }
        },
        {
            "name": "GetDNSSEC",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/dnssec"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetDNSSECResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetDNSSECRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {}
                    }
                }
            }
        },
        {
            "name": "GetGeoLocation",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/geolocation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetGeoLocationResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetGeoLocationRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ContinentCode": {},
                        "CountryCode": {},
                        "SubdivisionCode": {}
                    }
                }
            }
        },
        {
            "name": "GetHealthCheck",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HealthCheckId": "route.HealthCheckId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/healthcheck/{HealthCheckId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHealthCheckResponse"
                    },
                    "inject": [
                        "param.0.HealthCheckId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHealthCheckRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HealthCheckId": {}
                    }
                }
            }
        },
        {
            "name": "GetHealthCheckCount",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/healthcheckcount"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHealthCheckCountResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHealthCheckCountRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {}
                }
            }
        },
        {
            "name": "GetHealthCheckLastFailureReason",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HealthCheckId": "route.HealthCheckId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHealthCheckLastFailureReasonResponse"
                    },
                    "inject": [
                        "param.0.HealthCheckId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHealthCheckLastFailureReasonRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HealthCheckId": {}
                    }
                }
            }
        },
        {
            "name": "GetHealthCheckStatus",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HealthCheckId": "route.HealthCheckId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/healthcheck/{HealthCheckId}/status"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHealthCheckStatusResponse"
                    },
                    "inject": [
                        "param.0.HealthCheckId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHealthCheckStatusRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HealthCheckId": {}
                    }
                }
            }
        },
        {
            "name": "GetHostedZone",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzone/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHostedZoneResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "GetHostedZoneCount",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzonecount"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHostedZoneCountResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHostedZoneCountRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {}
                }
            }
        },
        {
            "name": "GetHostedZoneLimit",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "Type": "route.Type",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetHostedZoneLimitResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0.Type",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetHostedZoneLimitRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Type": {},
                        "HostedZoneId": {}
                    }
                }
            }
        },
        {
            "name": "GetQueryLoggingConfig",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/queryloggingconfig/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetQueryLoggingConfigResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetQueryLoggingConfigRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "GetReusableDelegationSet",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/delegationset/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetReusableDelegationSetResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetReusableDelegationSetRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "GetReusableDelegationSetLimit",
            "config": {
                "http": {
                    "inject": [
                        {
                            "DelegationSetId": "route.DelegationSetId",
                            "Type": "route.Type",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetReusableDelegationSetLimitResponse"
                    },
                    "inject": [
                        "param.0.DelegationSetId",
                        "param.0.Type",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetReusableDelegationSetLimitRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Type": {},
                        "DelegationSetId": {}
                    }
                }
            }
        },
        {
            "name": "GetTrafficPolicy",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "Version": "route.Version",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicy/{Id}/{Version}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetTrafficPolicyResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0.Version",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetTrafficPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "Version": {}
                    }
                }
            }
        },
        {
            "name": "GetTrafficPolicyInstance",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicyinstance/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetTrafficPolicyInstanceResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetTrafficPolicyInstanceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {}
                    }
                }
            }
        },
        {
            "name": "GetTrafficPolicyInstanceCount",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicyinstancecount"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/GetTrafficPolicyInstanceCountResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/GetTrafficPolicyInstanceCountRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {}
                }
            }
        },
        {
            "name": "ListCidrBlocks",
            "config": {
                "http": {
                    "inject": [
                        {
                            "CollectionId": "route.CollectionId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/cidrcollection/{CollectionId}/cidrblocks"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListCidrBlocksResponse"
                    },
                    "inject": [
                        "param.0.CollectionId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListCidrBlocksRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "CollectionId": {},
                        "LocationName": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListCidrCollections",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/cidrcollection"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListCidrCollectionsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListCidrCollectionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListCidrLocations",
            "config": {
                "http": {
                    "inject": [
                        {
                            "CollectionId": "route.CollectionId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/cidrcollection/{CollectionId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListCidrLocationsResponse"
                    },
                    "inject": [
                        "param.0.CollectionId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListCidrLocationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "CollectionId": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListGeoLocations",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/geolocations"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListGeoLocationsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListGeoLocationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "StartContinentCode": {},
                        "StartCountryCode": {},
                        "StartSubdivisionCode": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListHealthChecks",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/healthcheck"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListHealthChecksResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListHealthChecksRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Marker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListHostedZones",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzone"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListHostedZonesResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListHostedZonesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Marker": {},
                        "MaxItems": {},
                        "DelegationSetId": {},
                        "HostedZoneType": {}
                    }
                }
            }
        },
        {
            "name": "ListHostedZonesByName",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzonesbyname"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListHostedZonesByNameResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListHostedZonesByNameRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "DNSName": {},
                        "HostedZoneId": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListHostedZonesByVPC",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzonesbyvpc"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListHostedZonesByVPCResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListHostedZonesByVPCRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "VPCId": {},
                        "VPCRegion": {},
                        "MaxItems": {},
                        "NextToken": {}
                    }
                }
            }
        },
        {
            "name": "ListQueryLoggingConfigs",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/queryloggingconfig"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListQueryLoggingConfigsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListQueryLoggingConfigsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "ListResourceRecordSets",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/rrset"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListResourceRecordSetsResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListResourceRecordSetsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "StartRecordName": {},
                        "StartRecordType": {},
                        "StartRecordIdentifier": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListReusableDelegationSets",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/delegationset"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListReusableDelegationSetsResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListReusableDelegationSetsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Marker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResource",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceType": "route.ResourceType",
                            "ResourceId": "route.ResourceId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/tags/{ResourceType}/{ResourceId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourceResponse"
                    },
                    "inject": [
                        "param.0.ResourceType",
                        "param.0.ResourceId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceType": {},
                        "ResourceId": {}
                    }
                }
            }
        },
        {
            "name": "ListTagsForResources",
            "config": {
                "http": {
                    "inject": [
                        {
                            "ResourceType": "route.ResourceType",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/tags/{ResourceType}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTagsForResourcesResponse"
                    },
                    "inject": [
                        "param.0.ResourceType",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTagsForResourcesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "ResourceType": {},
                        "ResourceIds": {}
                    }
                }
            }
        },
        {
            "name": "ListTrafficPolicies",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicies"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTrafficPoliciesResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTrafficPoliciesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "TrafficPolicyIdMarker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListTrafficPolicyInstances",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicyinstances"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTrafficPolicyInstancesResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTrafficPolicyInstancesRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneIdMarker": {},
                        "TrafficPolicyInstanceNameMarker": {},
                        "TrafficPolicyInstanceTypeMarker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListTrafficPolicyInstancesByHostedZone",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicyinstances/hostedzone"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTrafficPolicyInstancesByHostedZoneResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTrafficPolicyInstancesByHostedZoneRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "TrafficPolicyInstanceNameMarker": {},
                        "TrafficPolicyInstanceTypeMarker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListTrafficPolicyInstancesByPolicy",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicyinstances/trafficpolicy"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTrafficPolicyInstancesByPolicyResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTrafficPolicyInstancesByPolicyRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "TrafficPolicyId": {},
                        "TrafficPolicyVersion": {},
                        "HostedZoneIdMarker": {},
                        "TrafficPolicyInstanceNameMarker": {},
                        "TrafficPolicyInstanceTypeMarker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListTrafficPolicyVersions",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/trafficpolicies/{Id}/versions"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListTrafficPolicyVersionsResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListTrafficPolicyVersionsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "TrafficPolicyVersionMarker": {},
                        "MaxItems": {}
                    }
                }
            }
        },
        {
            "name": "ListVPCAssociationAuthorizations",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HostedZoneId": "route.HostedZoneId",
                            "...": "query"
                        }
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/ListVPCAssociationAuthorizationsResponse"
                    },
                    "inject": [
                        "param.0.HostedZoneId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/ListVPCAssociationAuthorizationsRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "NextToken": {},
                        "MaxResults": {}
                    }
                }
            }
        },
        {
            "name": "TestDNSAnswer",
            "config": {
                "http": {
                    "inject": [
                        "query"
                    ],
                    "method": "GET",
                    "route": "/2013-04-01/testdnsanswer"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/TestDNSAnswerResponse"
                    },
                    "inject": [
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/TestDNSAnswerRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HostedZoneId": {},
                        "RecordName": {},
                        "RecordType": {},
                        "ResolverIP": {},
                        "EDNS0ClientSubnetIP": {},
                        "EDNS0ClientSubnetMask": {}
                    }
                }
            }
        },
        {
            "name": "UpdateHealthCheck",
            "config": {
                "http": {
                    "inject": [
                        {
                            "HealthCheckId": "route.HealthCheckId",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/healthcheck/{HealthCheckId}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateHealthCheckResponse"
                    },
                    "inject": [
                        "param.0.HealthCheckId",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateHealthCheckRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "HealthCheckId": {},
                        "HealthCheckVersion": {},
                        "IPAddress": {},
                        "Port": {},
                        "ResourcePath": {},
                        "FullyQualifiedDomainName": {},
                        "SearchString": {},
                        "FailureThreshold": {},
                        "Inverted": {},
                        "Disabled": {},
                        "HealthThreshold": {},
                        "ChildHealthChecks": {},
                        "EnableSNI": {},
                        "Regions": {},
                        "AlarmIdentifier": {},
                        "InsufficientDataHealthStatus": {},
                        "ResetElements": {}
                    }
                }
            }
        },
        {
            "name": "UpdateHostedZoneComment",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/hostedzone/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateHostedZoneCommentResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateHostedZoneCommentRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "UpdateTrafficPolicyComment",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "Version": "route.Version",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/trafficpolicy/{Id}/{Version}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateTrafficPolicyCommentResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0.Version",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateTrafficPolicyCommentRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "Version": {},
                        "Comment": {}
                    }
                }
            }
        },
        {
            "name": "UpdateTrafficPolicyInstance",
            "config": {
                "http": {
                    "inject": [
                        {
                            "Id": "route.Id",
                            "...": "body"
                        }
                    ],
                    "method": "POST",
                    "route": "/2013-04-01/trafficpolicyinstance/{Id}"
                },
                "schema": {
                    "resultSchema": {
                        "$ref": "#/$defs/UpdateTrafficPolicyInstanceResponse"
                    },
                    "inject": [
                        "param.0.Id",
                        "param.0"
                    ],
                    "$defs": {
                        "param.0": {
                            "$ref": "#/$defs/UpdateTrafficPolicyInstanceRequest"
                        }
                    }
                },
                "cli": {
                    "inject": [
                        "options"
                    ],
                    "options": {
                        "Id": {},
                        "TTL": {},
                        "TrafficPolicyId": {},
                        "TrafficPolicyVersion": {}
                    }
                }
            }
        }
    ],
    "$defs": {
        "smithy.api#Unit": {
            "type": "object"
        },
        "smithy.api#String": {
            "type": "string"
        },
        "smithy.api#Timestamp": {
            "type": "string",
            "format": "date-time"
        },
        "smithy.api#Boolean": {
            "type": "boolean"
        },
        "smithy.api#PrimitiveBoolean": {
            "type": "boolean"
        },
        "smithy.api#Integer": {
            "type": "integer"
        },
        "smithy.api#PrimitiveInteger": {
            "type": "integer"
        },
        "smithy.api#Long": {
            "type": "integer"
        },
        "smithy.api#PrimitiveLong": {
            "type": "integer"
        },
        "smithy.api#Double": {
            "type": "number"
        },
        "smithy.api#PrimitiveDouble": {
            "type": "number"
        },
        "smithy.api#Float": {
            "type": "number"
        },
        "smithy.api#PrimitiveFloat": {
            "type": "number"
        },
        "smithy.api#Document": {},
        "smithy.api#Blob": {
            "type": "string",
            "format": "binary"
        },
        "ActivateKeySigningKeyRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/SigningKeyName"
                }
            }
        },
        "ResourceId": {
            "type": "string"
        },
        "SigningKeyName": {
            "type": "string"
        },
        "ActivateKeySigningKeyResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "ChangeInfo": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Status": {
                    "$ref": "#/$defs/ChangeStatus"
                },
                "SubmittedAt": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "Comment": {
                    "$ref": "#/$defs/ResourceDescription"
                }
            }
        },
        "ChangeStatus": {
            "enum": [
                "PENDING",
                "INSYNC"
            ]
        },
        "TimeStamp": {
            "type": "string",
            "format": "date-time"
        },
        "ResourceDescription": {
            "type": "string"
        },
        "AssociateVPCWithHostedZoneRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                },
                "Comment": {
                    "$ref": "#/$defs/AssociateVPCComment"
                }
            }
        },
        "VPC": {
            "type": "object",
            "properties": {
                "VPCRegion": {
                    "$ref": "#/$defs/VPCRegion"
                },
                "VPCId": {
                    "$ref": "#/$defs/VPCId"
                }
            }
        },
        "VPCRegion": {
            "enum": [
                "us_east_1",
                "us_east_2",
                "us_west_1",
                "us_west_2",
                "eu_west_1",
                "eu_west_2",
                "eu_west_3",
                "eu_central_1",
                "eu_central_2",
                "ap_east_1",
                "me_south_1",
                "us_gov_west_1",
                "us_gov_east_1",
                "us_iso_east_1",
                "us_iso_west_1",
                "us_isob_east_1",
                "me_central_1",
                "ap_southeast_1",
                "ap_southeast_2",
                "ap_southeast_3",
                "ap_south_1",
                "ap_south_2",
                "ap_northeast_1",
                "ap_northeast_2",
                "ap_northeast_3",
                "eu_north_1",
                "sa_east_1",
                "ca_central_1",
                "cn_north_1",
                "cn_northwest_1",
                "af_south_1",
                "eu_south_1",
                "eu_south_2",
                "ap_southeast_4",
                "il_central_1",
                "ca_west_1",
                "ap_southeast_5",
                "mx_central_1",
                "ap_southeast_7"
            ]
        },
        "VPCId": {
            "type": "string"
        },
        "AssociateVPCComment": {
            "type": "string"
        },
        "AssociateVPCWithHostedZoneResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "ChangeCidrCollectionRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/UUID"
                },
                "CollectionVersion": {
                    "$ref": "#/$defs/CollectionVersion"
                },
                "Changes": {
                    "$ref": "#/$defs/CidrCollectionChanges"
                }
            }
        },
        "UUID": {
            "type": "string"
        },
        "CollectionVersion": {
            "type": "integer",
            "format": "int64"
        },
        "CidrCollectionChanges": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CidrCollectionChange"
            }
        },
        "CidrCollectionChange": {
            "type": "object",
            "properties": {
                "LocationName": {
                    "$ref": "#/$defs/CidrLocationNameDefaultNotAllowed"
                },
                "Action": {
                    "$ref": "#/$defs/CidrCollectionChangeAction"
                },
                "CidrList": {
                    "$ref": "#/$defs/CidrList"
                }
            }
        },
        "CidrLocationNameDefaultNotAllowed": {
            "type": "string"
        },
        "CidrCollectionChangeAction": {
            "enum": [
                "PUT",
                "DELETE_IF_EXISTS"
            ]
        },
        "CidrList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Cidr"
            }
        },
        "Cidr": {
            "type": "string"
        },
        "ChangeCidrCollectionResponse": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ChangeId"
                }
            }
        },
        "ChangeId": {
            "type": "string"
        },
        "ChangeResourceRecordSetsRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "ChangeBatch": {
                    "$ref": "#/$defs/ChangeBatch"
                }
            }
        },
        "ChangeBatch": {
            "type": "object",
            "properties": {
                "Comment": {
                    "$ref": "#/$defs/ResourceDescription"
                },
                "Changes": {
                    "$ref": "#/$defs/Changes"
                }
            }
        },
        "Changes": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Change"
            }
        },
        "Change": {
            "type": "object",
            "properties": {
                "Action": {
                    "$ref": "#/$defs/ChangeAction"
                },
                "ResourceRecordSet": {
                    "$ref": "#/$defs/ResourceRecordSet"
                }
            }
        },
        "ChangeAction": {
            "enum": [
                "CREATE",
                "DELETE",
                "UPSERT"
            ]
        },
        "ResourceRecordSet": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "Type": {
                    "$ref": "#/$defs/RRType"
                },
                "SetIdentifier": {
                    "$ref": "#/$defs/ResourceRecordSetIdentifier"
                },
                "Weight": {
                    "$ref": "#/$defs/ResourceRecordSetWeight"
                },
                "Region": {
                    "$ref": "#/$defs/ResourceRecordSetRegion"
                },
                "GeoLocation": {
                    "$ref": "#/$defs/GeoLocation"
                },
                "Failover": {
                    "$ref": "#/$defs/ResourceRecordSetFailover"
                },
                "MultiValueAnswer": {
                    "$ref": "#/$defs/ResourceRecordSetMultiValueAnswer"
                },
                "TTL": {
                    "$ref": "#/$defs/TTL"
                },
                "ResourceRecords": {
                    "$ref": "#/$defs/ResourceRecords"
                },
                "AliasTarget": {
                    "$ref": "#/$defs/AliasTarget"
                },
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                },
                "TrafficPolicyInstanceId": {
                    "$ref": "#/$defs/TrafficPolicyInstanceId"
                },
                "CidrRoutingConfig": {
                    "$ref": "#/$defs/CidrRoutingConfig"
                },
                "GeoProximityLocation": {
                    "$ref": "#/$defs/GeoProximityLocation"
                }
            }
        },
        "DNSName": {
            "type": "string"
        },
        "RRType": {
            "enum": [
                "SOA",
                "A",
                "TXT",
                "NS",
                "CNAME",
                "MX",
                "NAPTR",
                "PTR",
                "SRV",
                "SPF",
                "AAAA",
                "CAA",
                "DS",
                "TLSA",
                "SSHFP",
                "SVCB",
                "HTTPS"
            ]
        },
        "ResourceRecordSetIdentifier": {
            "type": "string"
        },
        "ResourceRecordSetWeight": {
            "type": "integer",
            "format": "int64"
        },
        "ResourceRecordSetRegion": {
            "enum": [
                "us_east_1",
                "us_east_2",
                "us_west_1",
                "us_west_2",
                "ca_central_1",
                "eu_west_1",
                "eu_west_2",
                "eu_west_3",
                "eu_central_1",
                "eu_central_2",
                "ap_southeast_1",
                "ap_southeast_2",
                "ap_southeast_3",
                "ap_northeast_1",
                "ap_northeast_2",
                "ap_northeast_3",
                "eu_north_1",
                "sa_east_1",
                "cn_north_1",
                "cn_northwest_1",
                "ap_east_1",
                "me_south_1",
                "me_central_1",
                "ap_south_1",
                "ap_south_2",
                "af_south_1",
                "eu_south_1",
                "eu_south_2",
                "ap_southeast_4",
                "il_central_1",
                "ca_west_1",
                "ap_southeast_5",
                "mx_central_1",
                "ap_southeast_7"
            ]
        },
        "GeoLocation": {
            "type": "object",
            "properties": {
                "ContinentCode": {
                    "$ref": "#/$defs/GeoLocationContinentCode"
                },
                "CountryCode": {
                    "$ref": "#/$defs/GeoLocationCountryCode"
                },
                "SubdivisionCode": {
                    "$ref": "#/$defs/GeoLocationSubdivisionCode"
                }
            }
        },
        "GeoLocationContinentCode": {
            "type": "string"
        },
        "GeoLocationCountryCode": {
            "type": "string"
        },
        "GeoLocationSubdivisionCode": {
            "type": "string"
        },
        "ResourceRecordSetFailover": {
            "enum": [
                "PRIMARY",
                "SECONDARY"
            ]
        },
        "ResourceRecordSetMultiValueAnswer": {
            "type": "boolean"
        },
        "TTL": {
            "type": "integer",
            "format": "int64"
        },
        "ResourceRecords": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ResourceRecord"
            }
        },
        "ResourceRecord": {
            "type": "object",
            "properties": {
                "Value": {
                    "$ref": "#/$defs/RData"
                }
            }
        },
        "RData": {
            "type": "string"
        },
        "AliasTarget": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "DNSName": {
                    "$ref": "#/$defs/DNSName"
                },
                "EvaluateTargetHealth": {
                    "$ref": "#/$defs/AliasHealthEnabled"
                }
            }
        },
        "AliasHealthEnabled": {
            "type": "boolean"
        },
        "HealthCheckId": {
            "type": "string"
        },
        "TrafficPolicyInstanceId": {
            "type": "string"
        },
        "CidrRoutingConfig": {
            "type": "object",
            "properties": {
                "CollectionId": {
                    "$ref": "#/$defs/UUID"
                },
                "LocationName": {
                    "$ref": "#/$defs/CidrLocationNameDefaultAllowed"
                }
            }
        },
        "CidrLocationNameDefaultAllowed": {
            "type": "string"
        },
        "GeoProximityLocation": {
            "type": "object",
            "properties": {
                "AWSRegion": {
                    "$ref": "#/$defs/AWSRegion"
                },
                "LocalZoneGroup": {
                    "$ref": "#/$defs/LocalZoneGroup"
                },
                "Coordinates": {
                    "$ref": "#/$defs/Coordinates"
                },
                "Bias": {
                    "$ref": "#/$defs/Bias"
                }
            }
        },
        "AWSRegion": {
            "type": "string"
        },
        "LocalZoneGroup": {
            "type": "string"
        },
        "Coordinates": {
            "type": "object",
            "properties": {
                "Latitude": {
                    "$ref": "#/$defs/Latitude"
                },
                "Longitude": {
                    "$ref": "#/$defs/Longitude"
                }
            }
        },
        "Latitude": {
            "type": "string"
        },
        "Longitude": {
            "type": "string"
        },
        "Bias": {
            "type": "integer",
            "format": "int32"
        },
        "ChangeResourceRecordSetsResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "ChangeTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceType": {
                    "$ref": "#/$defs/TagResourceType"
                },
                "ResourceId": {
                    "$ref": "#/$defs/TagResourceId"
                },
                "AddTags": {
                    "$ref": "#/$defs/TagList"
                },
                "RemoveTagKeys": {
                    "$ref": "#/$defs/TagKeyList"
                }
            }
        },
        "TagResourceType": {
            "enum": [
                "healthcheck",
                "hostedzone"
            ]
        },
        "TagResourceId": {
            "type": "string"
        },
        "TagList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Tag"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "Key": {
                    "$ref": "#/$defs/TagKey"
                },
                "Value": {
                    "$ref": "#/$defs/TagValue"
                }
            }
        },
        "TagKey": {
            "type": "string"
        },
        "TagValue": {
            "type": "string"
        },
        "TagKeyList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagKey"
            }
        },
        "ChangeTagsForResourceResponse": {
            "type": "object",
            "properties": {}
        },
        "CreateCidrCollectionRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/CollectionName"
                },
                "CallerReference": {
                    "$ref": "#/$defs/CidrNonce"
                }
            }
        },
        "CollectionName": {
            "type": "string"
        },
        "CidrNonce": {
            "type": "string"
        },
        "CreateCidrCollectionResponse": {
            "type": "object",
            "properties": {
                "Collection": {
                    "$ref": "#/$defs/CidrCollection"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "CidrCollection": {
            "type": "object",
            "properties": {
                "Arn": {
                    "$ref": "#/$defs/ARN"
                },
                "Id": {
                    "$ref": "#/$defs/UUID"
                },
                "Name": {
                    "$ref": "#/$defs/CollectionName"
                },
                "Version": {
                    "$ref": "#/$defs/CollectionVersion"
                }
            }
        },
        "ARN": {
            "type": "string"
        },
        "ResourceURI": {
            "type": "string"
        },
        "CreateHealthCheckRequest": {
            "type": "object",
            "properties": {
                "CallerReference": {
                    "$ref": "#/$defs/HealthCheckNonce"
                },
                "HealthCheckConfig": {
                    "$ref": "#/$defs/HealthCheckConfig"
                }
            }
        },
        "HealthCheckNonce": {
            "type": "string"
        },
        "HealthCheckConfig": {
            "type": "object",
            "properties": {
                "IPAddress": {
                    "$ref": "#/$defs/IPAddress"
                },
                "Port": {
                    "$ref": "#/$defs/Port"
                },
                "Type": {
                    "$ref": "#/$defs/HealthCheckType"
                },
                "ResourcePath": {
                    "$ref": "#/$defs/ResourcePath"
                },
                "FullyQualifiedDomainName": {
                    "$ref": "#/$defs/FullyQualifiedDomainName"
                },
                "SearchString": {
                    "$ref": "#/$defs/SearchString"
                },
                "RequestInterval": {
                    "$ref": "#/$defs/RequestInterval"
                },
                "FailureThreshold": {
                    "$ref": "#/$defs/FailureThreshold"
                },
                "MeasureLatency": {
                    "$ref": "#/$defs/MeasureLatency"
                },
                "Inverted": {
                    "$ref": "#/$defs/Inverted"
                },
                "Disabled": {
                    "$ref": "#/$defs/Disabled"
                },
                "HealthThreshold": {
                    "$ref": "#/$defs/HealthThreshold"
                },
                "ChildHealthChecks": {
                    "$ref": "#/$defs/ChildHealthCheckList"
                },
                "EnableSNI": {
                    "$ref": "#/$defs/EnableSNI"
                },
                "Regions": {
                    "$ref": "#/$defs/HealthCheckRegionList"
                },
                "AlarmIdentifier": {
                    "$ref": "#/$defs/AlarmIdentifier"
                },
                "InsufficientDataHealthStatus": {
                    "$ref": "#/$defs/InsufficientDataHealthStatus"
                },
                "RoutingControlArn": {
                    "$ref": "#/$defs/RoutingControlArn"
                }
            }
        },
        "IPAddress": {
            "type": "string"
        },
        "Port": {
            "type": "integer",
            "format": "int32"
        },
        "HealthCheckType": {
            "enum": [
                "HTTP",
                "HTTPS",
                "HTTP_STR_MATCH",
                "HTTPS_STR_MATCH",
                "TCP",
                "CALCULATED",
                "CLOUDWATCH_METRIC",
                "RECOVERY_CONTROL"
            ]
        },
        "ResourcePath": {
            "type": "string"
        },
        "FullyQualifiedDomainName": {
            "type": "string"
        },
        "SearchString": {
            "type": "string"
        },
        "RequestInterval": {
            "type": "integer",
            "format": "int32"
        },
        "FailureThreshold": {
            "type": "integer",
            "format": "int32"
        },
        "MeasureLatency": {
            "type": "boolean"
        },
        "Inverted": {
            "type": "boolean"
        },
        "Disabled": {
            "type": "boolean"
        },
        "HealthThreshold": {
            "type": "integer",
            "format": "int32"
        },
        "ChildHealthCheckList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HealthCheckId"
            }
        },
        "EnableSNI": {
            "type": "boolean"
        },
        "HealthCheckRegionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HealthCheckRegion"
            }
        },
        "HealthCheckRegion": {
            "enum": [
                "us_east_1",
                "us_west_1",
                "us_west_2",
                "eu_west_1",
                "ap_southeast_1",
                "ap_southeast_2",
                "ap_northeast_1",
                "sa_east_1"
            ]
        },
        "AlarmIdentifier": {
            "type": "object",
            "properties": {
                "Region": {
                    "$ref": "#/$defs/CloudWatchRegion"
                },
                "Name": {
                    "$ref": "#/$defs/AlarmName"
                }
            }
        },
        "CloudWatchRegion": {
            "enum": [
                "us_east_1",
                "us_east_2",
                "us_west_1",
                "us_west_2",
                "ca_central_1",
                "eu_central_1",
                "eu_central_2",
                "eu_west_1",
                "eu_west_2",
                "eu_west_3",
                "ap_east_1",
                "me_south_1",
                "me_central_1",
                "ap_south_1",
                "ap_south_2",
                "ap_southeast_1",
                "ap_southeast_2",
                "ap_southeast_3",
                "ap_northeast_1",
                "ap_northeast_2",
                "ap_northeast_3",
                "eu_north_1",
                "sa_east_1",
                "cn_northwest_1",
                "cn_north_1",
                "af_south_1",
                "eu_south_1",
                "eu_south_2",
                "us_gov_west_1",
                "us_gov_east_1",
                "us_iso_east_1",
                "us_iso_west_1",
                "us_isob_east_1",
                "ap_southeast_4",
                "il_central_1",
                "ca_west_1",
                "ap_southeast_5",
                "mx_central_1",
                "ap_southeast_7"
            ]
        },
        "AlarmName": {
            "type": "string"
        },
        "InsufficientDataHealthStatus": {
            "enum": [
                "Healthy",
                "Unhealthy",
                "LastKnownStatus"
            ]
        },
        "RoutingControlArn": {
            "type": "string"
        },
        "CreateHealthCheckResponse": {
            "type": "object",
            "properties": {
                "HealthCheck": {
                    "$ref": "#/$defs/HealthCheck"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "HealthCheck": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/HealthCheckId"
                },
                "CallerReference": {
                    "$ref": "#/$defs/HealthCheckNonce"
                },
                "LinkedService": {
                    "$ref": "#/$defs/LinkedService"
                },
                "HealthCheckConfig": {
                    "$ref": "#/$defs/HealthCheckConfig"
                },
                "HealthCheckVersion": {
                    "$ref": "#/$defs/HealthCheckVersion"
                },
                "CloudWatchAlarmConfiguration": {
                    "$ref": "#/$defs/CloudWatchAlarmConfiguration"
                }
            }
        },
        "LinkedService": {
            "type": "object",
            "properties": {
                "ServicePrincipal": {
                    "$ref": "#/$defs/ServicePrincipal"
                },
                "Description": {
                    "$ref": "#/$defs/ResourceDescription"
                }
            }
        },
        "ServicePrincipal": {
            "type": "string"
        },
        "HealthCheckVersion": {
            "type": "integer",
            "format": "int64"
        },
        "CloudWatchAlarmConfiguration": {
            "type": "object",
            "properties": {
                "EvaluationPeriods": {
                    "$ref": "#/$defs/EvaluationPeriods"
                },
                "Threshold": {
                    "$ref": "#/$defs/Threshold"
                },
                "ComparisonOperator": {
                    "$ref": "#/$defs/ComparisonOperator"
                },
                "Period": {
                    "$ref": "#/$defs/Period"
                },
                "MetricName": {
                    "$ref": "#/$defs/MetricName"
                },
                "Namespace": {
                    "$ref": "#/$defs/Namespace"
                },
                "Statistic": {
                    "$ref": "#/$defs/Statistic"
                },
                "Dimensions": {
                    "$ref": "#/$defs/DimensionList"
                }
            }
        },
        "EvaluationPeriods": {
            "type": "integer",
            "format": "int32"
        },
        "Threshold": {
            "type": "number",
            "format": "double"
        },
        "ComparisonOperator": {
            "enum": [
                "GreaterThanOrEqualToThreshold",
                "GreaterThanThreshold",
                "LessThanThreshold",
                "LessThanOrEqualToThreshold"
            ]
        },
        "Period": {
            "type": "integer",
            "format": "int32"
        },
        "MetricName": {
            "type": "string"
        },
        "Namespace": {
            "type": "string"
        },
        "Statistic": {
            "enum": [
                "Average",
                "Sum",
                "SampleCount",
                "Maximum",
                "Minimum"
            ]
        },
        "DimensionList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/Dimension"
            }
        },
        "Dimension": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/DimensionField"
                },
                "Value": {
                    "$ref": "#/$defs/DimensionField"
                }
            }
        },
        "DimensionField": {
            "type": "string"
        },
        "CreateHostedZoneRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                },
                "CallerReference": {
                    "$ref": "#/$defs/Nonce"
                },
                "HostedZoneConfig": {
                    "$ref": "#/$defs/HostedZoneConfig"
                },
                "DelegationSetId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "Nonce": {
            "type": "string"
        },
        "HostedZoneConfig": {
            "type": "object",
            "properties": {
                "Comment": {
                    "$ref": "#/$defs/ResourceDescription"
                },
                "PrivateZone": {
                    "$ref": "#/$defs/IsPrivateZone"
                }
            }
        },
        "IsPrivateZone": {
            "type": "boolean"
        },
        "CreateHostedZoneResponse": {
            "type": "object",
            "properties": {
                "HostedZone": {
                    "$ref": "#/$defs/HostedZone"
                },
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                },
                "DelegationSet": {
                    "$ref": "#/$defs/DelegationSet"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "HostedZone": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "CallerReference": {
                    "$ref": "#/$defs/Nonce"
                },
                "Config": {
                    "$ref": "#/$defs/HostedZoneConfig"
                },
                "ResourceRecordSetCount": {
                    "$ref": "#/$defs/HostedZoneRRSetCount"
                },
                "LinkedService": {
                    "$ref": "#/$defs/LinkedService"
                }
            }
        },
        "HostedZoneRRSetCount": {
            "type": "integer",
            "format": "int64"
        },
        "DelegationSet": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                },
                "CallerReference": {
                    "$ref": "#/$defs/Nonce"
                },
                "NameServers": {
                    "$ref": "#/$defs/DelegationSetNameServers"
                }
            }
        },
        "DelegationSetNameServers": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DNSName"
            }
        },
        "CreateKeySigningKeyRequest": {
            "type": "object",
            "properties": {
                "CallerReference": {
                    "$ref": "#/$defs/Nonce"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "KeyManagementServiceArn": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "Name": {
                    "$ref": "#/$defs/SigningKeyName"
                },
                "Status": {
                    "$ref": "#/$defs/SigningKeyStatus"
                }
            }
        },
        "SigningKeyString": {
            "type": "string"
        },
        "SigningKeyStatus": {
            "type": "string"
        },
        "CreateKeySigningKeyResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                },
                "KeySigningKey": {
                    "$ref": "#/$defs/KeySigningKey"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "KeySigningKey": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/SigningKeyName"
                },
                "KmsArn": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "Flag": {
                    "$ref": "#/$defs/SigningKeyInteger"
                },
                "SigningAlgorithmMnemonic": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "SigningAlgorithmType": {
                    "$ref": "#/$defs/SigningKeyInteger"
                },
                "DigestAlgorithmMnemonic": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "DigestAlgorithmType": {
                    "$ref": "#/$defs/SigningKeyInteger"
                },
                "KeyTag": {
                    "$ref": "#/$defs/SigningKeyTag"
                },
                "DigestValue": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "PublicKey": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "DSRecord": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "DNSKEYRecord": {
                    "$ref": "#/$defs/SigningKeyString"
                },
                "Status": {
                    "$ref": "#/$defs/SigningKeyStatus"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/SigningKeyStatusMessage"
                },
                "CreatedDate": {
                    "$ref": "#/$defs/TimeStamp"
                },
                "LastModifiedDate": {
                    "$ref": "#/$defs/TimeStamp"
                }
            }
        },
        "SigningKeyInteger": {
            "type": "integer",
            "format": "int32"
        },
        "SigningKeyTag": {
            "type": "integer",
            "format": "int32"
        },
        "SigningKeyStatusMessage": {
            "type": "string"
        },
        "CreateQueryLoggingConfigRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "CloudWatchLogsLogGroupArn": {
                    "$ref": "#/$defs/CloudWatchLogsLogGroupArn"
                }
            }
        },
        "CloudWatchLogsLogGroupArn": {
            "type": "string"
        },
        "CreateQueryLoggingConfigResponse": {
            "type": "object",
            "properties": {
                "QueryLoggingConfig": {
                    "$ref": "#/$defs/QueryLoggingConfig"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "QueryLoggingConfig": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/QueryLoggingConfigId"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "CloudWatchLogsLogGroupArn": {
                    "$ref": "#/$defs/CloudWatchLogsLogGroupArn"
                }
            }
        },
        "QueryLoggingConfigId": {
            "type": "string"
        },
        "CreateReusableDelegationSetRequest": {
            "type": "object",
            "properties": {
                "CallerReference": {
                    "$ref": "#/$defs/Nonce"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "CreateReusableDelegationSetResponse": {
            "type": "object",
            "properties": {
                "DelegationSet": {
                    "$ref": "#/$defs/DelegationSet"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "CreateTrafficPolicyRequest": {
            "type": "object",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/TrafficPolicyName"
                },
                "Document": {
                    "$ref": "#/$defs/TrafficPolicyDocument"
                },
                "Comment": {
                    "$ref": "#/$defs/TrafficPolicyComment"
                }
            }
        },
        "TrafficPolicyName": {
            "type": "string"
        },
        "TrafficPolicyDocument": {
            "type": "string"
        },
        "TrafficPolicyComment": {
            "type": "string"
        },
        "CreateTrafficPolicyResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicy": {
                    "$ref": "#/$defs/TrafficPolicy"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "TrafficPolicy": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Version": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                },
                "Name": {
                    "$ref": "#/$defs/TrafficPolicyName"
                },
                "Type": {
                    "$ref": "#/$defs/RRType"
                },
                "Document": {
                    "$ref": "#/$defs/TrafficPolicyDocument"
                },
                "Comment": {
                    "$ref": "#/$defs/TrafficPolicyComment"
                }
            }
        },
        "TrafficPolicyId": {
            "type": "string"
        },
        "TrafficPolicyVersion": {
            "type": "integer",
            "format": "int32"
        },
        "CreateTrafficPolicyInstanceRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "TTL": {
                    "$ref": "#/$defs/TTL"
                },
                "TrafficPolicyId": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "TrafficPolicyVersion": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                }
            }
        },
        "CreateTrafficPolicyInstanceResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstance": {
                    "$ref": "#/$defs/TrafficPolicyInstance"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "TrafficPolicyInstance": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyInstanceId"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "TTL": {
                    "$ref": "#/$defs/TTL"
                },
                "State": {
                    "$ref": "#/$defs/TrafficPolicyInstanceState"
                },
                "Message": {
                    "$ref": "#/$defs/Message"
                },
                "TrafficPolicyId": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "TrafficPolicyVersion": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                },
                "TrafficPolicyType": {
                    "$ref": "#/$defs/RRType"
                }
            }
        },
        "TrafficPolicyInstanceState": {
            "type": "string"
        },
        "Message": {
            "type": "string"
        },
        "CreateTrafficPolicyVersionRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Document": {
                    "$ref": "#/$defs/TrafficPolicyDocument"
                },
                "Comment": {
                    "$ref": "#/$defs/TrafficPolicyComment"
                }
            }
        },
        "CreateTrafficPolicyVersionResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicy": {
                    "$ref": "#/$defs/TrafficPolicy"
                },
                "Location": {
                    "$ref": "#/$defs/ResourceURI"
                }
            }
        },
        "CreateVPCAssociationAuthorizationRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                }
            }
        },
        "CreateVPCAssociationAuthorizationResponse": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                }
            }
        },
        "DeactivateKeySigningKeyRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/SigningKeyName"
                }
            }
        },
        "DeactivateKeySigningKeyResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "DeleteCidrCollectionRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/UUID"
                }
            }
        },
        "DeleteCidrCollectionResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteHealthCheckRequest": {
            "type": "object",
            "properties": {
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                }
            }
        },
        "DeleteHealthCheckResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteHostedZoneRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "DeleteHostedZoneResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "DeleteKeySigningKeyRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/SigningKeyName"
                }
            }
        },
        "DeleteKeySigningKeyResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "DeleteQueryLoggingConfigRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/QueryLoggingConfigId"
                }
            }
        },
        "DeleteQueryLoggingConfigResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteReusableDelegationSetRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "DeleteReusableDelegationSetResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteTrafficPolicyRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Version": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                }
            }
        },
        "DeleteTrafficPolicyResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteTrafficPolicyInstanceRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyInstanceId"
                }
            }
        },
        "DeleteTrafficPolicyInstanceResponse": {
            "type": "object",
            "properties": {}
        },
        "DeleteVPCAssociationAuthorizationRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                }
            }
        },
        "DeleteVPCAssociationAuthorizationResponse": {
            "type": "object",
            "properties": {}
        },
        "DisableHostedZoneDNSSECRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "DisableHostedZoneDNSSECResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "DisassociateVPCFromHostedZoneRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "VPC": {
                    "$ref": "#/$defs/VPC"
                },
                "Comment": {
                    "$ref": "#/$defs/DisassociateVPCComment"
                }
            }
        },
        "DisassociateVPCComment": {
            "type": "string"
        },
        "DisassociateVPCFromHostedZoneResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "EnableHostedZoneDNSSECRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "EnableHostedZoneDNSSECResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "GetAccountLimitRequest": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/AccountLimitType"
                }
            }
        },
        "AccountLimitType": {
            "enum": [
                "MAX_HEALTH_CHECKS_BY_OWNER",
                "MAX_HOSTED_ZONES_BY_OWNER",
                "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER",
                "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER",
                "MAX_TRAFFIC_POLICIES_BY_OWNER"
            ]
        },
        "GetAccountLimitResponse": {
            "type": "object",
            "properties": {
                "Limit": {
                    "$ref": "#/$defs/AccountLimit"
                },
                "Count": {
                    "$ref": "#/$defs/UsageCount"
                }
            }
        },
        "AccountLimit": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/AccountLimitType"
                },
                "Value": {
                    "$ref": "#/$defs/LimitValue"
                }
            }
        },
        "LimitValue": {
            "type": "integer",
            "format": "int64"
        },
        "UsageCount": {
            "type": "integer",
            "format": "int64"
        },
        "GetChangeRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ChangeId"
                }
            }
        },
        "GetChangeResponse": {
            "type": "object",
            "properties": {
                "ChangeInfo": {
                    "$ref": "#/$defs/ChangeInfo"
                }
            }
        },
        "GetCheckerIpRangesRequest": {
            "type": "object",
            "properties": {}
        },
        "GetCheckerIpRangesResponse": {
            "type": "object",
            "properties": {
                "CheckerIpRanges": {
                    "$ref": "#/$defs/CheckerIpRanges"
                }
            }
        },
        "CheckerIpRanges": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/IPAddressCidr"
            }
        },
        "IPAddressCidr": {
            "type": "string"
        },
        "GetDNSSECRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "GetDNSSECResponse": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/DNSSECStatus"
                },
                "KeySigningKeys": {
                    "$ref": "#/$defs/KeySigningKeys"
                }
            }
        },
        "DNSSECStatus": {
            "type": "object",
            "properties": {
                "ServeSignature": {
                    "$ref": "#/$defs/ServeSignature"
                },
                "StatusMessage": {
                    "$ref": "#/$defs/SigningKeyStatusMessage"
                }
            }
        },
        "ServeSignature": {
            "type": "string"
        },
        "KeySigningKeys": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/KeySigningKey"
            }
        },
        "GetGeoLocationRequest": {
            "type": "object",
            "properties": {
                "ContinentCode": {
                    "$ref": "#/$defs/GeoLocationContinentCode"
                },
                "CountryCode": {
                    "$ref": "#/$defs/GeoLocationCountryCode"
                },
                "SubdivisionCode": {
                    "$ref": "#/$defs/GeoLocationSubdivisionCode"
                }
            }
        },
        "GetGeoLocationResponse": {
            "type": "object",
            "properties": {
                "GeoLocationDetails": {
                    "$ref": "#/$defs/GeoLocationDetails"
                }
            }
        },
        "GeoLocationDetails": {
            "type": "object",
            "properties": {
                "ContinentCode": {
                    "$ref": "#/$defs/GeoLocationContinentCode"
                },
                "ContinentName": {
                    "$ref": "#/$defs/GeoLocationContinentName"
                },
                "CountryCode": {
                    "$ref": "#/$defs/GeoLocationCountryCode"
                },
                "CountryName": {
                    "$ref": "#/$defs/GeoLocationCountryName"
                },
                "SubdivisionCode": {
                    "$ref": "#/$defs/GeoLocationSubdivisionCode"
                },
                "SubdivisionName": {
                    "$ref": "#/$defs/GeoLocationSubdivisionName"
                }
            }
        },
        "GeoLocationContinentName": {
            "type": "string"
        },
        "GeoLocationCountryName": {
            "type": "string"
        },
        "GeoLocationSubdivisionName": {
            "type": "string"
        },
        "GetHealthCheckRequest": {
            "type": "object",
            "properties": {
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                }
            }
        },
        "GetHealthCheckResponse": {
            "type": "object",
            "properties": {
                "HealthCheck": {
                    "$ref": "#/$defs/HealthCheck"
                }
            }
        },
        "GetHealthCheckCountRequest": {
            "type": "object",
            "properties": {}
        },
        "GetHealthCheckCountResponse": {
            "type": "object",
            "properties": {
                "HealthCheckCount": {
                    "$ref": "#/$defs/HealthCheckCount"
                }
            }
        },
        "HealthCheckCount": {
            "type": "integer",
            "format": "int64"
        },
        "GetHealthCheckLastFailureReasonRequest": {
            "type": "object",
            "properties": {
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                }
            }
        },
        "GetHealthCheckLastFailureReasonResponse": {
            "type": "object",
            "properties": {
                "HealthCheckObservations": {
                    "$ref": "#/$defs/HealthCheckObservations"
                }
            }
        },
        "HealthCheckObservations": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HealthCheckObservation"
            }
        },
        "HealthCheckObservation": {
            "type": "object",
            "properties": {
                "Region": {
                    "$ref": "#/$defs/HealthCheckRegion"
                },
                "IPAddress": {
                    "$ref": "#/$defs/IPAddress"
                },
                "StatusReport": {
                    "$ref": "#/$defs/StatusReport"
                }
            }
        },
        "StatusReport": {
            "type": "object",
            "properties": {
                "Status": {
                    "$ref": "#/$defs/Status"
                },
                "CheckedTime": {
                    "$ref": "#/$defs/TimeStamp"
                }
            }
        },
        "Status": {
            "type": "string"
        },
        "GetHealthCheckStatusRequest": {
            "type": "object",
            "properties": {
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                }
            }
        },
        "GetHealthCheckStatusResponse": {
            "type": "object",
            "properties": {
                "HealthCheckObservations": {
                    "$ref": "#/$defs/HealthCheckObservations"
                }
            }
        },
        "GetHostedZoneRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "GetHostedZoneResponse": {
            "type": "object",
            "properties": {
                "HostedZone": {
                    "$ref": "#/$defs/HostedZone"
                },
                "DelegationSet": {
                    "$ref": "#/$defs/DelegationSet"
                },
                "VPCs": {
                    "$ref": "#/$defs/VPCs"
                }
            }
        },
        "VPCs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/VPC"
            }
        },
        "GetHostedZoneCountRequest": {
            "type": "object",
            "properties": {}
        },
        "GetHostedZoneCountResponse": {
            "type": "object",
            "properties": {
                "HostedZoneCount": {
                    "$ref": "#/$defs/HostedZoneCount"
                }
            }
        },
        "HostedZoneCount": {
            "type": "integer",
            "format": "int64"
        },
        "GetHostedZoneLimitRequest": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/HostedZoneLimitType"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "HostedZoneLimitType": {
            "enum": [
                "MAX_RRSETS_BY_ZONE",
                "MAX_VPCS_ASSOCIATED_BY_ZONE"
            ]
        },
        "GetHostedZoneLimitResponse": {
            "type": "object",
            "properties": {
                "Limit": {
                    "$ref": "#/$defs/HostedZoneLimit"
                },
                "Count": {
                    "$ref": "#/$defs/UsageCount"
                }
            }
        },
        "HostedZoneLimit": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/HostedZoneLimitType"
                },
                "Value": {
                    "$ref": "#/$defs/LimitValue"
                }
            }
        },
        "GetQueryLoggingConfigRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/QueryLoggingConfigId"
                }
            }
        },
        "GetQueryLoggingConfigResponse": {
            "type": "object",
            "properties": {
                "QueryLoggingConfig": {
                    "$ref": "#/$defs/QueryLoggingConfig"
                }
            }
        },
        "GetReusableDelegationSetRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "GetReusableDelegationSetResponse": {
            "type": "object",
            "properties": {
                "DelegationSet": {
                    "$ref": "#/$defs/DelegationSet"
                }
            }
        },
        "GetReusableDelegationSetLimitRequest": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/ReusableDelegationSetLimitType"
                },
                "DelegationSetId": {
                    "$ref": "#/$defs/ResourceId"
                }
            }
        },
        "ReusableDelegationSetLimitType": {
            "enum": [
                "MAX_ZONES_BY_REUSABLE_DELEGATION_SET"
            ]
        },
        "GetReusableDelegationSetLimitResponse": {
            "type": "object",
            "properties": {
                "Limit": {
                    "$ref": "#/$defs/ReusableDelegationSetLimit"
                },
                "Count": {
                    "$ref": "#/$defs/UsageCount"
                }
            }
        },
        "ReusableDelegationSetLimit": {
            "type": "object",
            "properties": {
                "Type": {
                    "$ref": "#/$defs/ReusableDelegationSetLimitType"
                },
                "Value": {
                    "$ref": "#/$defs/LimitValue"
                }
            }
        },
        "GetTrafficPolicyRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Version": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                }
            }
        },
        "GetTrafficPolicyResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicy": {
                    "$ref": "#/$defs/TrafficPolicy"
                }
            }
        },
        "GetTrafficPolicyInstanceRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyInstanceId"
                }
            }
        },
        "GetTrafficPolicyInstanceResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstance": {
                    "$ref": "#/$defs/TrafficPolicyInstance"
                }
            }
        },
        "GetTrafficPolicyInstanceCountRequest": {
            "type": "object",
            "properties": {}
        },
        "GetTrafficPolicyInstanceCountResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstanceCount": {
                    "$ref": "#/$defs/TrafficPolicyInstanceCount"
                }
            }
        },
        "TrafficPolicyInstanceCount": {
            "type": "integer",
            "format": "int32"
        },
        "ListCidrBlocksRequest": {
            "type": "object",
            "properties": {
                "CollectionId": {
                    "$ref": "#/$defs/UUID"
                },
                "LocationName": {
                    "$ref": "#/$defs/CidrLocationNameDefaultNotAllowed"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "PaginationToken": {
            "type": "string"
        },
        "ListCidrBlocksResponse": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "CidrBlocks": {
                    "$ref": "#/$defs/CidrBlockSummaries"
                }
            }
        },
        "CidrBlockSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CidrBlockSummary"
            }
        },
        "CidrBlockSummary": {
            "type": "object",
            "properties": {
                "CidrBlock": {
                    "$ref": "#/$defs/Cidr"
                },
                "LocationName": {
                    "$ref": "#/$defs/CidrLocationNameDefaultNotAllowed"
                }
            }
        },
        "ListCidrCollectionsRequest": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListCidrCollectionsResponse": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "CidrCollections": {
                    "$ref": "#/$defs/CollectionSummaries"
                }
            }
        },
        "CollectionSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/CollectionSummary"
            }
        },
        "CollectionSummary": {
            "type": "object",
            "properties": {
                "Arn": {
                    "$ref": "#/$defs/ARN"
                },
                "Id": {
                    "$ref": "#/$defs/UUID"
                },
                "Name": {
                    "$ref": "#/$defs/CollectionName"
                },
                "Version": {
                    "$ref": "#/$defs/CollectionVersion"
                }
            }
        },
        "ListCidrLocationsRequest": {
            "type": "object",
            "properties": {
                "CollectionId": {
                    "$ref": "#/$defs/UUID"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListCidrLocationsResponse": {
            "type": "object",
            "properties": {
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "CidrLocations": {
                    "$ref": "#/$defs/LocationSummaries"
                }
            }
        },
        "LocationSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/LocationSummary"
            }
        },
        "LocationSummary": {
            "type": "object",
            "properties": {
                "LocationName": {
                    "$ref": "#/$defs/CidrLocationNameDefaultAllowed"
                }
            }
        },
        "ListGeoLocationsRequest": {
            "type": "object",
            "properties": {
                "StartContinentCode": {
                    "$ref": "#/$defs/GeoLocationContinentCode"
                },
                "StartCountryCode": {
                    "$ref": "#/$defs/GeoLocationCountryCode"
                },
                "StartSubdivisionCode": {
                    "$ref": "#/$defs/GeoLocationSubdivisionCode"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListGeoLocationsResponse": {
            "type": "object",
            "properties": {
                "GeoLocationDetailsList": {
                    "$ref": "#/$defs/GeoLocationDetailsList"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextContinentCode": {
                    "$ref": "#/$defs/GeoLocationContinentCode"
                },
                "NextCountryCode": {
                    "$ref": "#/$defs/GeoLocationCountryCode"
                },
                "NextSubdivisionCode": {
                    "$ref": "#/$defs/GeoLocationSubdivisionCode"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "GeoLocationDetailsList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/GeoLocationDetails"
            }
        },
        "PageTruncated": {
            "type": "boolean"
        },
        "ListHealthChecksRequest": {
            "type": "object",
            "properties": {
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "PageMarker": {
            "type": "string"
        },
        "ListHealthChecksResponse": {
            "type": "object",
            "properties": {
                "HealthChecks": {
                    "$ref": "#/$defs/HealthChecks"
                },
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextMarker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "HealthChecks": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HealthCheck"
            }
        },
        "ListHostedZonesRequest": {
            "type": "object",
            "properties": {
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "DelegationSetId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "HostedZoneType": {
                    "$ref": "#/$defs/HostedZoneType"
                }
            }
        },
        "HostedZoneType": {
            "enum": [
                "PRIVATE_HOSTED_ZONE"
            ]
        },
        "ListHostedZonesResponse": {
            "type": "object",
            "properties": {
                "HostedZones": {
                    "$ref": "#/$defs/HostedZones"
                },
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextMarker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "HostedZones": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HostedZone"
            }
        },
        "ListHostedZonesByNameRequest": {
            "type": "object",
            "properties": {
                "DNSName": {
                    "$ref": "#/$defs/DNSName"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListHostedZonesByNameResponse": {
            "type": "object",
            "properties": {
                "HostedZones": {
                    "$ref": "#/$defs/HostedZones"
                },
                "DNSName": {
                    "$ref": "#/$defs/DNSName"
                },
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextDNSName": {
                    "$ref": "#/$defs/DNSName"
                },
                "NextHostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListHostedZonesByVPCRequest": {
            "type": "object",
            "properties": {
                "VPCId": {
                    "$ref": "#/$defs/VPCId"
                },
                "VPCRegion": {
                    "$ref": "#/$defs/VPCRegion"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "ListHostedZonesByVPCResponse": {
            "type": "object",
            "properties": {
                "HostedZoneSummaries": {
                    "$ref": "#/$defs/HostedZoneSummaries"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "HostedZoneSummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/HostedZoneSummary"
            }
        },
        "HostedZoneSummary": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Name": {
                    "$ref": "#/$defs/DNSName"
                },
                "Owner": {
                    "$ref": "#/$defs/HostedZoneOwner"
                }
            }
        },
        "HostedZoneOwner": {
            "type": "object",
            "properties": {
                "OwningAccount": {
                    "$ref": "#/$defs/AWSAccountID"
                },
                "OwningService": {
                    "$ref": "#/$defs/HostedZoneOwningService"
                }
            }
        },
        "AWSAccountID": {
            "type": "string"
        },
        "HostedZoneOwningService": {
            "type": "string"
        },
        "ListQueryLoggingConfigsRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListQueryLoggingConfigsResponse": {
            "type": "object",
            "properties": {
                "QueryLoggingConfigs": {
                    "$ref": "#/$defs/QueryLoggingConfigs"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                }
            }
        },
        "QueryLoggingConfigs": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/QueryLoggingConfig"
            }
        },
        "ListResourceRecordSetsRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "StartRecordName": {
                    "$ref": "#/$defs/DNSName"
                },
                "StartRecordType": {
                    "$ref": "#/$defs/RRType"
                },
                "StartRecordIdentifier": {
                    "$ref": "#/$defs/ResourceRecordSetIdentifier"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListResourceRecordSetsResponse": {
            "type": "object",
            "properties": {
                "ResourceRecordSets": {
                    "$ref": "#/$defs/ResourceRecordSets"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextRecordName": {
                    "$ref": "#/$defs/DNSName"
                },
                "NextRecordType": {
                    "$ref": "#/$defs/RRType"
                },
                "NextRecordIdentifier": {
                    "$ref": "#/$defs/ResourceRecordSetIdentifier"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ResourceRecordSets": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ResourceRecordSet"
            }
        },
        "ListReusableDelegationSetsRequest": {
            "type": "object",
            "properties": {
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListReusableDelegationSetsResponse": {
            "type": "object",
            "properties": {
                "DelegationSets": {
                    "$ref": "#/$defs/DelegationSets"
                },
                "Marker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "NextMarker": {
                    "$ref": "#/$defs/PageMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "DelegationSets": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/DelegationSet"
            }
        },
        "ListTagsForResourceRequest": {
            "type": "object",
            "properties": {
                "ResourceType": {
                    "$ref": "#/$defs/TagResourceType"
                },
                "ResourceId": {
                    "$ref": "#/$defs/TagResourceId"
                }
            }
        },
        "ListTagsForResourceResponse": {
            "type": "object",
            "properties": {
                "ResourceTagSet": {
                    "$ref": "#/$defs/ResourceTagSet"
                }
            }
        },
        "ResourceTagSet": {
            "type": "object",
            "properties": {
                "ResourceType": {
                    "$ref": "#/$defs/TagResourceType"
                },
                "ResourceId": {
                    "$ref": "#/$defs/TagResourceId"
                },
                "Tags": {
                    "$ref": "#/$defs/TagList"
                }
            }
        },
        "ListTagsForResourcesRequest": {
            "type": "object",
            "properties": {
                "ResourceType": {
                    "$ref": "#/$defs/TagResourceType"
                },
                "ResourceIds": {
                    "$ref": "#/$defs/TagResourceIdList"
                }
            }
        },
        "TagResourceIdList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TagResourceId"
            }
        },
        "ListTagsForResourcesResponse": {
            "type": "object",
            "properties": {
                "ResourceTagSets": {
                    "$ref": "#/$defs/ResourceTagSetList"
                }
            }
        },
        "ResourceTagSetList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ResourceTagSet"
            }
        },
        "ListTrafficPoliciesRequest": {
            "type": "object",
            "properties": {
                "TrafficPolicyIdMarker": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPoliciesResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicySummaries": {
                    "$ref": "#/$defs/TrafficPolicySummaries"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "TrafficPolicyIdMarker": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "TrafficPolicySummaries": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TrafficPolicySummary"
            }
        },
        "TrafficPolicySummary": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Name": {
                    "$ref": "#/$defs/TrafficPolicyName"
                },
                "Type": {
                    "$ref": "#/$defs/RRType"
                },
                "LatestVersion": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                },
                "TrafficPolicyCount": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                }
            }
        },
        "ListTrafficPolicyInstancesRequest": {
            "type": "object",
            "properties": {
                "HostedZoneIdMarker": {
                    "$ref": "#/$defs/ResourceId"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPolicyInstancesResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstances": {
                    "$ref": "#/$defs/TrafficPolicyInstances"
                },
                "HostedZoneIdMarker": {
                    "$ref": "#/$defs/ResourceId"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "TrafficPolicyInstances": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TrafficPolicyInstance"
            }
        },
        "ListTrafficPolicyInstancesByHostedZoneRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPolicyInstancesByHostedZoneResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstances": {
                    "$ref": "#/$defs/TrafficPolicyInstances"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPolicyInstancesByPolicyRequest": {
            "type": "object",
            "properties": {
                "TrafficPolicyId": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "TrafficPolicyVersion": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                },
                "HostedZoneIdMarker": {
                    "$ref": "#/$defs/ResourceId"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPolicyInstancesByPolicyResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstances": {
                    "$ref": "#/$defs/TrafficPolicyInstances"
                },
                "HostedZoneIdMarker": {
                    "$ref": "#/$defs/ResourceId"
                },
                "TrafficPolicyInstanceNameMarker": {
                    "$ref": "#/$defs/DNSName"
                },
                "TrafficPolicyInstanceTypeMarker": {
                    "$ref": "#/$defs/RRType"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListTrafficPolicyVersionsRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "TrafficPolicyVersionMarker": {
                    "$ref": "#/$defs/TrafficPolicyVersionMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "TrafficPolicyVersionMarker": {
            "type": "string"
        },
        "ListTrafficPolicyVersionsResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicies": {
                    "$ref": "#/$defs/TrafficPolicies"
                },
                "IsTruncated": {
                    "$ref": "#/$defs/PageTruncated"
                },
                "TrafficPolicyVersionMarker": {
                    "$ref": "#/$defs/TrafficPolicyVersionMarker"
                },
                "MaxItems": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "TrafficPolicies": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/TrafficPolicy"
            }
        },
        "ListVPCAssociationAuthorizationsRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "MaxResults": {
                    "$ref": "#/$defs/smithy.api#Integer"
                }
            }
        },
        "ListVPCAssociationAuthorizationsResponse": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "NextToken": {
                    "$ref": "#/$defs/PaginationToken"
                },
                "VPCs": {
                    "$ref": "#/$defs/VPCs"
                }
            }
        },
        "TestDNSAnswerRequest": {
            "type": "object",
            "properties": {
                "HostedZoneId": {
                    "$ref": "#/$defs/ResourceId"
                },
                "RecordName": {
                    "$ref": "#/$defs/DNSName"
                },
                "RecordType": {
                    "$ref": "#/$defs/RRType"
                },
                "ResolverIP": {
                    "$ref": "#/$defs/IPAddress"
                },
                "EDNS0ClientSubnetIP": {
                    "$ref": "#/$defs/IPAddress"
                },
                "EDNS0ClientSubnetMask": {
                    "$ref": "#/$defs/SubnetMask"
                }
            }
        },
        "SubnetMask": {
            "type": "string"
        },
        "TestDNSAnswerResponse": {
            "type": "object",
            "properties": {
                "Nameserver": {
                    "$ref": "#/$defs/Nameserver"
                },
                "RecordName": {
                    "$ref": "#/$defs/DNSName"
                },
                "RecordType": {
                    "$ref": "#/$defs/RRType"
                },
                "RecordData": {
                    "$ref": "#/$defs/RecordData"
                },
                "ResponseCode": {
                    "$ref": "#/$defs/DNSRCode"
                },
                "Protocol": {
                    "$ref": "#/$defs/TransportProtocol"
                }
            }
        },
        "Nameserver": {
            "type": "string"
        },
        "RecordData": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/RecordDataEntry"
            }
        },
        "RecordDataEntry": {
            "type": "string"
        },
        "DNSRCode": {
            "type": "string"
        },
        "TransportProtocol": {
            "type": "string"
        },
        "UpdateHealthCheckRequest": {
            "type": "object",
            "properties": {
                "HealthCheckId": {
                    "$ref": "#/$defs/HealthCheckId"
                },
                "HealthCheckVersion": {
                    "$ref": "#/$defs/HealthCheckVersion"
                },
                "IPAddress": {
                    "$ref": "#/$defs/IPAddress"
                },
                "Port": {
                    "$ref": "#/$defs/Port"
                },
                "ResourcePath": {
                    "$ref": "#/$defs/ResourcePath"
                },
                "FullyQualifiedDomainName": {
                    "$ref": "#/$defs/FullyQualifiedDomainName"
                },
                "SearchString": {
                    "$ref": "#/$defs/SearchString"
                },
                "FailureThreshold": {
                    "$ref": "#/$defs/FailureThreshold"
                },
                "Inverted": {
                    "$ref": "#/$defs/Inverted"
                },
                "Disabled": {
                    "$ref": "#/$defs/Disabled"
                },
                "HealthThreshold": {
                    "$ref": "#/$defs/HealthThreshold"
                },
                "ChildHealthChecks": {
                    "$ref": "#/$defs/ChildHealthCheckList"
                },
                "EnableSNI": {
                    "$ref": "#/$defs/EnableSNI"
                },
                "Regions": {
                    "$ref": "#/$defs/HealthCheckRegionList"
                },
                "AlarmIdentifier": {
                    "$ref": "#/$defs/AlarmIdentifier"
                },
                "InsufficientDataHealthStatus": {
                    "$ref": "#/$defs/InsufficientDataHealthStatus"
                },
                "ResetElements": {
                    "$ref": "#/$defs/ResettableElementNameList"
                }
            }
        },
        "ResettableElementNameList": {
            "type": "array",
            "items": {
                "$ref": "#/$defs/ResettableElementName"
            }
        },
        "ResettableElementName": {
            "enum": [
                "FullyQualifiedDomainName",
                "Regions",
                "ResourcePath",
                "ChildHealthChecks"
            ]
        },
        "UpdateHealthCheckResponse": {
            "type": "object",
            "properties": {
                "HealthCheck": {
                    "$ref": "#/$defs/HealthCheck"
                }
            }
        },
        "UpdateHostedZoneCommentRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/ResourceId"
                },
                "Comment": {
                    "$ref": "#/$defs/ResourceDescription"
                }
            }
        },
        "UpdateHostedZoneCommentResponse": {
            "type": "object",
            "properties": {
                "HostedZone": {
                    "$ref": "#/$defs/HostedZone"
                }
            }
        },
        "UpdateTrafficPolicyCommentRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "Version": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                },
                "Comment": {
                    "$ref": "#/$defs/TrafficPolicyComment"
                }
            }
        },
        "UpdateTrafficPolicyCommentResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicy": {
                    "$ref": "#/$defs/TrafficPolicy"
                }
            }
        },
        "UpdateTrafficPolicyInstanceRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "$ref": "#/$defs/TrafficPolicyInstanceId"
                },
                "TTL": {
                    "$ref": "#/$defs/TTL"
                },
                "TrafficPolicyId": {
                    "$ref": "#/$defs/TrafficPolicyId"
                },
                "TrafficPolicyVersion": {
                    "$ref": "#/$defs/TrafficPolicyVersion"
                }
            }
        },
        "UpdateTrafficPolicyInstanceResponse": {
            "type": "object",
            "properties": {
                "TrafficPolicyInstance": {
                    "$ref": "#/$defs/TrafficPolicyInstance"
                }
            }
        }
    },
    "aws": {
        "endpoint": {
            "version": "1.0",
            "parameters": {
                "Region": {
                    "builtIn": "AWS::Region",
                    "required": false,
                    "documentation": "The AWS region used to dispatch the request.",
                    "type": "String"
                },
                "UseDualStack": {
                    "builtIn": "AWS::UseDualStack",
                    "required": true,
                    "default": false,
                    "documentation": "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
                    "type": "Boolean"
                },
                "UseFIPS": {
                    "builtIn": "AWS::UseFIPS",
                    "required": true,
                    "default": false,
                    "documentation": "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
                    "type": "Boolean"
                },
                "Endpoint": {
                    "builtIn": "SDK::Endpoint",
                    "required": false,
                    "documentation": "Override the endpoint used to send this request",
                    "type": "String"
                }
            },
            "rules": [
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Endpoint"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseFIPS"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: FIPS and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [
                                {
                                    "fn": "booleanEquals",
                                    "argv": [
                                        {
                                            "ref": "UseDualStack"
                                        },
                                        true
                                    ]
                                }
                            ],
                            "error": "Invalid Configuration: Dualstack and custom endpoint are not supported",
                            "type": "error"
                        },
                        {
                            "conditions": [],
                            "endpoint": {
                                "url": {
                                    "ref": "Endpoint"
                                },
                                "properties": {},
                                "headers": {}
                            },
                            "type": "endpoint"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [
                        {
                            "fn": "isSet",
                            "argv": [
                                {
                                    "ref": "Region"
                                }
                            ]
                        }
                    ],
                    "rules": [
                        {
                            "conditions": [
                                {
                                    "fn": "aws.partition",
                                    "argv": [
                                        {
                                            "ref": "Region"
                                        }
                                    ],
                                    "assign": "PartitionResult"
                                }
                            ],
                            "rules": [
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.amazonaws.com",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-east-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53-fips.amazonaws.com",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-east-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-cn"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.amazonaws.com.cn",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "cn-northwest-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-us-gov"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.us-gov.amazonaws.com",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-gov-west-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-us-gov"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.us-gov.amazonaws.com",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-gov-west-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-iso"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.c2s.ic.gov",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-iso-east-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-iso-b"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.sc2s.sgov.gov",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-isob-east-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-iso-e"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.cloud.adc-e.uk",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "eu-isoe-west-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "stringEquals",
                                            "argv": [
                                                {
                                                    "fn": "getAttr",
                                                    "argv": [
                                                        {
                                                            "ref": "PartitionResult"
                                                        },
                                                        "name"
                                                    ]
                                                },
                                                "aws-iso-f"
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                false
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                false
                                            ]
                                        }
                                    ],
                                    "endpoint": {
                                        "url": "https://route53.csp.hci.ic.gov",
                                        "properties": {
                                            "authSchemes": [
                                                {
                                                    "name": "sigv4",
                                                    "signingName": "route53",
                                                    "signingRegion": "us-isof-south-1"
                                                }
                                            ]
                                        },
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        },
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://route53-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS and DualStack are enabled, but this partition does not support one or both",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseFIPS"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsFIPS"
                                                            ]
                                                        },
                                                        true
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://route53-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "FIPS is enabled but this partition does not support FIPS",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [
                                        {
                                            "fn": "booleanEquals",
                                            "argv": [
                                                {
                                                    "ref": "UseDualStack"
                                                },
                                                true
                                            ]
                                        }
                                    ],
                                    "rules": [
                                        {
                                            "conditions": [
                                                {
                                                    "fn": "booleanEquals",
                                                    "argv": [
                                                        true,
                                                        {
                                                            "fn": "getAttr",
                                                            "argv": [
                                                                {
                                                                    "ref": "PartitionResult"
                                                                },
                                                                "supportsDualStack"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ],
                                            "rules": [
                                                {
                                                    "conditions": [],
                                                    "endpoint": {
                                                        "url": "https://route53.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                                        "properties": {},
                                                        "headers": {}
                                                    },
                                                    "type": "endpoint"
                                                }
                                            ],
                                            "type": "tree"
                                        },
                                        {
                                            "conditions": [],
                                            "error": "DualStack is enabled but this partition does not support DualStack",
                                            "type": "error"
                                        }
                                    ],
                                    "type": "tree"
                                },
                                {
                                    "conditions": [],
                                    "endpoint": {
                                        "url": "https://route53.{Region}.{PartitionResult#dnsSuffix}",
                                        "properties": {},
                                        "headers": {}
                                    },
                                    "type": "endpoint"
                                }
                            ],
                            "type": "tree"
                        }
                    ],
                    "type": "tree"
                },
                {
                    "conditions": [],
                    "error": "Invalid Configuration: Missing Region",
                    "type": "error"
                }
            ]
        }
    }
}