@import "reset.css";
@import "colors.css";
@import "layout.css";
@import 'form/form.css';
@import 'menus.css';
@import 'dialogs.css';
@import 'chips.css';
@import 'cards.css';
/* @import 'flex-grid.css'; */
@import 'table.css';
@import 'tree.css';
@import 'nav.css';
@import 'toast.css';
@import 'badge.css';
/* @import-tokens '../default-theme.tokens.json'; */
@import "semantic-colors.css";

@property --local-gutter-x {
    inherits: false;
    initial-value: var(--gutter-x);
}

@property --local-gutter-y {
    inherits: false;
    initial-value: var(--gutter-y);
}

* {
    --local-gutter-x: var(--gutter-x);
    --local-gutter-y: var(--gutter-y);
}

:root {
    --gutter-x: var(--gutter);
    --gutter-y: calc(var(--gutter)/2);
    --condensed-gutter-x: calc(var(--gutter)/2);
    --condensed-gutter-y: calc(var(--gutter)/4);
    --aired-gutter-x: calc(var(--gutter)*2);
    --aired-gutter-y: calc(var(--gutter)*4);
    --code-font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

@media screen and (--breakpoints-xs) {
    .flex-xs {
        composes: d-flex from './layout.css';

        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-sm) {
    .flex-sm {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-md) {
    .flex-md {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-lg) {
    .flex-lg {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-xl) {
    .flex-xl {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-xxl) {
    .flex-xxl {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-kkkk) {
    .flex-kkkk {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-fullhd) {
    .flex-fullhd {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-hd) {
    .flex-hd {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-dvd) {
    .flex-dvd {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-mobile-s) {
    .flex-mobile-s {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-mobile-m) {
    .flex-mobile-m {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-mobile-l) {
    .flex-mobile-l {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-tablet) {
    .flex-tablet {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-laptop) {
    .flex-laptop {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}

@media screen and (--breakpoints-laptop-l) {
    .flex-laptop-l {
        composes: d-flex from './layout.css';
        flex-direction: column;

        >* {
            flex-basis: auto;
        }
    }
}


/* 
@mixin init($config) {


    @if(not map.has-key($config, 'colors', 'grey')) {
        $grey: color.mix(map.get($config, 'colors', 'dark'), map.get($config, 'colors', 'light'));
        $config: map.set($config, 'colors', 'grey', $grey);
    }

    $config: map.set($config, lightnesses, 'light', ("": 0));
    $config: map.set($config, lightnesses, 'dark', ("": 0));


    $config: colors.computeAllVariants($config);

    $config: map.set($config, allColors, light, ("": true, "max-contrast":dark));
    $config: map.set($config, allColors, dark, ("": true, "max-contrast":light));

    @include colors.colors($config);

    @include flex-grid.grid($config, 12);

    @content($config);
} */
/* 
@media screen and (max-width:dtcg('breakpoints.md')) {
    :global(.akala-button) {
        padding: var(--gutter);
        height: 48px;
    }
} */


:root,
::backdrop,
input::-webkit-calendar-picker-indicator {
    --border-radius: 8px;
    --gutter: 16px;
    color-scheme: light dark;
    /* 
    @if $colorScheme=='light' {
        --shadow-color: rgba(from var(--gray) r g b 0.09);
        --disabled: var(--gray-light);
        --disabled-darker: hsl(from var(--gray) h s);
        @include colors.colorPalette('disabled', 'grey-light', $config);
    }

    @else {
        --shadow-color: rgba(from var(--gray-dark) r g b 0.39);
        @include colors.colorPalette('disabled', 'grey-extra-dark', $config);

    } */

    --shadow: 0 0.188rem 0.75rem 0 var(--shadow-color);
}

.akala-button {
    padding: var(--local-gutter-y) var(--local-gutter-x);

    @media screen and (--breakpoints-md) {
        height: 48px;
        align-items: center;
    }
}

.button,
button,
a.button,
input[type="button"],
input[type="reset"],
button[type="button"],
button[type="reset"],
input::-webkit-file-upload-button,
input::-webkit-inner-spin-button,
input::-webkit-outer-spin-button {
    composes: button-outlined from './buttons.module.css';
    composes: akala-button;
}

.button.primary,
button.primary,
a.button.primary,
input[type="submit"],
button[type="submit"] {
    composes: button-filled from './buttons.module.css';
    composes: akala-button;
}

.button.filled,
button.filled {
    composes: button-filled from './buttons.module.css';
    composes: akala-button;
}

.button.outlined,
button.outlined {
    composes: button-outlined from './buttons.module.css';
    composes: akala-button;
}

.button-grp {
    display: flex;
    flex-direction: row;
    gap: 0;

    .button:not(:last-child),
    input:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .button:not(:first-child),
    input:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
}

.red {
    --control-accent-color: var(--system-red);
}

.green {
    --control-accent-color: var(--system-green);
}

.yellow {
    --control-accent-color: var(--system-yellow);
}

.orange {
    --control-accent-color: var(--system-orange);
}

.pink {
    --control-accent-color: var(--system-pink);
}

.purple {
    --control-accent-color: var(--system-purple);
}

.teal {
    --control-accent-color: var(--system-teal);
}

.indigo {
    --control-accent-color: var(--system-indigo);
}

.blue {
    --control-accent-color: var(--system-blue);
}

a[href],
button.link {
    composes: button-link from './buttons.module.css';
    composes: akala-button;
}

input:not([type="button"], [type="submit"], [type="reset"]) {
    composes: form-control from './form/form.css'
}

.condensed {
    --gutter-x: var(--condensed-gutter-x);
    --gutter-y: var(--condensed-gutter-y);
}

.aired {
    --gutter-x: var(--aired-gutter-x);
    --gutter-y: var(--aired-gutter-y);
}

.local-condensed {
    --local-gutter-x: var(--condensed-gutter-x);
    --local-gutter-y: var(--condensed-gutter-y);
}

.local-aired {
    --local-gutter-x: var(--aired-gutter-x);
    --local-gutter-y: var(--aired-gutter-y);
}

.pill {
    border-radius: 50%;
}

mark {
    color: var(--highlight-text-color, hsl(from var(--highlight-color) h s calc(50 - ((round(down, round(up, (l - 50) / 50) + 1 / 2) - 0.5) * 2) * 50)));
    background-color: var(--highlight-color);
}