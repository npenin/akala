import { Metadata, type ICommandProcessor, Container, registerCommands } from "@akala/commands";
// eslint-disable-next-line @typescript-eslint/no-namespace
namespace weather
{
	export interface container 
	{
		/** 
		  * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.lang
		  * @param {[args0, args1]} args
		  */
		dispatch(cmd: 'realtime-weather', ...args: [arg0: string, arg1: string]): Promise<{ "location"?: location, "current"?: current }>
		/** 
		  * Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.days
		  * @typedef args2 - query.dt
		  * @typedef args3 - query.unixdt
		  * @typedef args4 - query.hour
		  * @typedef args5 - query.lang
		  * @typedef args6 - query.alerts
		  * @typedef args7 - query.aqi
		  * @typedef args8 - query.tp
		  * @param {[args0, args1, args2, args3, args4, args5, args6, args7, args8]} args
		  */
		dispatch(cmd: 'forecast-weather', ...args: [arg0: string, arg1: number, arg2: string, arg3: number, arg4: number, arg5: string, arg6: string, arg7: string, arg8: number]): Promise<{ "location"?: location, "current"?: current, "forecast"?: forecast, "alerts"?: alerts }>
		/** 
		  * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @typedef args2 - query.lang
		  * @param {[args0, args1, args2]} args
		  */
		dispatch(cmd: 'future-weather', ...args: [arg0: string, arg1: string, arg2: string]): Promise<{ "location"?: location, "forecast"?: forecast }>
		/** 
		  * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @typedef args2 - query.unixdt
		  * @typedef args3 - query.end_dt
		  * @typedef args4 - query.unixend_dt
		  * @typedef args5 - query.hour
		  * @typedef args6 - query.lang
		  * @param {[args0, args1, args2, args3, args4, args5, args6]} args
		  */
		dispatch(cmd: 'history-weather', ...args: [arg0: string, arg1: string, arg2: number, arg3: string, arg4: number, arg5: number, arg6: string]): Promise<{ "location"?: location, "forecast"?: forecast }>
		/** 
		  * Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.days
		  * @typedef args2 - query.dt
		  * @typedef args3 - query.unixdt
		  * @typedef args4 - query.hour
		  * @typedef args5 - query.lang
		  * @param {[args0, args1, args2, args3, args4, args5]} args
		  */
		dispatch(cmd: 'marine-weather', ...args: [arg0: string, arg1: number, arg2: string, arg3: number, arg4: number, arg5: string]): Promise<{ "location"?: location, "forecast"?: marine }>
		/** 
		  * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		dispatch(cmd: 'search-autocomplete-weather', ...args: [arg0: string]): Promise<ArrayOfSearch>
		/** 
		  * IP Lookup API method allows a user to get up to date information for an IP address.
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		dispatch(cmd: 'ip-lookup', ...args: [arg0: string]): Promise<ip>
		/** 
		  * Return Location Object
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		dispatch(cmd: 'time-zone', ...args: [arg0: string]): Promise<location>
		/** 
		  * Return Location and Astronomy Object
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @param {[args0, args1]} args
		  */
		dispatch(cmd: 'astronomy', ...args: [arg0: string, arg1: string]): Promise<{ "location"?: location, "astronomy"?: astronomy }>
	}
	export interface proxy 
	{
		/** 
		  * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.lang
		  * @param {[args0, args1]} args
		  */
		'realtime-weather'(arg0: string, arg1: string): Promise<{ "location"?: location, "current"?: current }>
		/** 
		  * Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.days
		  * @typedef args2 - query.dt
		  * @typedef args3 - query.unixdt
		  * @typedef args4 - query.hour
		  * @typedef args5 - query.lang
		  * @typedef args6 - query.alerts
		  * @typedef args7 - query.aqi
		  * @typedef args8 - query.tp
		  * @param {[args0, args1, args2, args3, args4, args5, args6, args7, args8]} args
		  */
		'forecast-weather'(arg0: string, arg1: number, arg2: string, arg3: number, arg4: number, arg5: string, arg6: string, arg7: string, arg8: number): Promise<{ "location"?: location, "current"?: current, "forecast"?: forecast, "alerts"?: alerts }>
		/** 
		  * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @typedef args2 - query.lang
		  * @param {[args0, args1, args2]} args
		  */
		'future-weather'(arg0: string, arg1: string, arg2: string): Promise<{ "location"?: location, "forecast"?: forecast }>
		/** 
		  * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @typedef args2 - query.unixdt
		  * @typedef args3 - query.end_dt
		  * @typedef args4 - query.unixend_dt
		  * @typedef args5 - query.hour
		  * @typedef args6 - query.lang
		  * @param {[args0, args1, args2, args3, args4, args5, args6]} args
		  */
		'history-weather'(arg0: string, arg1: string, arg2: number, arg3: string, arg4: number, arg5: number, arg6: string): Promise<{ "location"?: location, "forecast"?: forecast }>
		/** 
		  * Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.
		  * @typedef args0 - query.q
		  * @typedef args1 - query.days
		  * @typedef args2 - query.dt
		  * @typedef args3 - query.unixdt
		  * @typedef args4 - query.hour
		  * @typedef args5 - query.lang
		  * @param {[args0, args1, args2, args3, args4, args5]} args
		  */
		'marine-weather'(arg0: string, arg1: number, arg2: string, arg3: number, arg4: number, arg5: string): Promise<{ "location"?: location, "forecast"?: marine }>
		/** 
		  * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		'search-autocomplete-weather'(arg0: string): Promise<ArrayOfSearch>
		/** 
		  * IP Lookup API method allows a user to get up to date information for an IP address.
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		'ip-lookup'(arg0: string): Promise<ip>
		/** 
		  * Return Location Object
		  * @typedef args0 - query.q
		  * @param {[args0]} args
		  */
		'time-zone'(arg0: string): Promise<location>
		/** 
		  * Return Location and Astronomy Object
		  * @typedef args0 - query.q
		  * @typedef args1 - query.dt
		  * @param {[args0, args1]} args
		  */
		'astronomy'(arg0: string, arg1: string): Promise<{ "location"?: location, "astronomy"?: astronomy }>
	}
	export const meta = { "name": "Weather API", "commands": [{ "name": "realtime-weather", "config": { "schema": { "inject": ["string", "string"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "current": { "$ref": "#/$defs/current" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "current": { "type": "object", "properties": { "last_updated_epoch": { "type": "integer", "format": "int32", "example": 1658522700 }, "last_updated": { "type": "string", "example": "2022-07-22 16:45" }, "temp_c": { "type": "number", "example": 34.4 }, "temp_f": { "type": "number", "example": 93.9 }, "is_day": { "type": "integer", "format": "int32", "example": 1 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Partly cloudy" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/116.png" }, "code": { "type": "integer", "format": "int32", "example": 1003 } } }, "wind_mph": { "type": "number", "example": 16.1 }, "wind_kph": { "type": "number", "example": 25.9 }, "wind_degree": { "type": "number", "example": 180 }, "wind_dir": { "type": "string", "example": "S" }, "pressure_mb": { "type": "number", "example": 1011 }, "pressure_in": { "type": "number", "example": 29.85 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 31 }, "cloud": { "type": "number", "example": 75 }, "feelslike_c": { "type": "number", "example": 37 }, "feelslike_f": { "type": "number", "example": 98.6 }, "vis_km": { "type": "number", "example": 16 }, "vis_miles": { "type": "number", "example": 9 }, "uv": { "type": "integer", "format": "int32", "example": 8 }, "gust_mph": { "type": "number", "example": 11.6 }, "gust_kph": { "type": "number", "example": 18.7 }, "air_quality": { "type": "object", "properties": { "co": { "type": "number", "example": 293.70001220703125 }, "no2": { "type": "number", "example": 18.5 }, "o3": { "type": "number", "example": 234.60000610351562 }, "so2": { "type": "number", "example": 12 }, "pm2_5": { "type": "number", "example": 13.600000381469727 }, "pm10": { "type": "number", "example": 15 }, "us-epa-index": { "type": "integer", "format": "int32", "example": 1 }, "gb-defra-index": { "type": "integer", "format": "int32", "example": 2 } } } } } } }, "doc": { "inject": ["query.q", "query.lang"], "description": "Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.lang": "Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'." } }, "http": { "method": "get", "type": "json", "route": "/current.json", "inject": ["query.q", "query.lang"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "forecast-weather", "config": { "schema": { "inject": ["string", "integer", "string", "integer", "integer", "string", "string", "string", "integer"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "current": { "$ref": "#/$defs/current" }, "forecast": { "$ref": "#/$defs/forecast" }, "alerts": { "$ref": "#/$defs/alerts" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "current": { "type": "object", "properties": { "last_updated_epoch": { "type": "integer", "format": "int32", "example": 1658522700 }, "last_updated": { "type": "string", "example": "2022-07-22 16:45" }, "temp_c": { "type": "number", "example": 34.4 }, "temp_f": { "type": "number", "example": 93.9 }, "is_day": { "type": "integer", "format": "int32", "example": 1 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Partly cloudy" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/116.png" }, "code": { "type": "integer", "format": "int32", "example": 1003 } } }, "wind_mph": { "type": "number", "example": 16.1 }, "wind_kph": { "type": "number", "example": 25.9 }, "wind_degree": { "type": "number", "example": 180 }, "wind_dir": { "type": "string", "example": "S" }, "pressure_mb": { "type": "number", "example": 1011 }, "pressure_in": { "type": "number", "example": 29.85 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 31 }, "cloud": { "type": "number", "example": 75 }, "feelslike_c": { "type": "number", "example": 37 }, "feelslike_f": { "type": "number", "example": 98.6 }, "vis_km": { "type": "number", "example": 16 }, "vis_miles": { "type": "number", "example": 9 }, "uv": { "type": "integer", "format": "int32", "example": 8 }, "gust_mph": { "type": "number", "example": 11.6 }, "gust_kph": { "type": "number", "example": 18.7 }, "air_quality": { "type": "object", "properties": { "co": { "type": "number", "example": 293.70001220703125 }, "no2": { "type": "number", "example": 18.5 }, "o3": { "type": "number", "example": 234.60000610351562 }, "so2": { "type": "number", "example": 12 }, "pm2_5": { "type": "number", "example": 13.600000381469727 }, "pm10": { "type": "number", "example": 15 }, "us-epa-index": { "type": "integer", "format": "int32", "example": 1 }, "gb-defra-index": { "type": "integer", "format": "int32", "example": 2 } } } } }, "forecast": { "type": "object", "properties": { "forecastday": { "type": "array", "items": { "type": "object", "properties": { "date": { "type": "string", "format": "date", "example": "2022-07-22" }, "date_epoch": { "type": "integer", "format": "int32", "example": 1658448000 }, "day": { "type": "object", "properties": { "maxtemp_c": { "type": "number", "example": 35.9 }, "maxtemp_f": { "type": "number", "example": 96.6 }, "mintemp_c": { "type": "number", "example": 26.3 }, "mintemp_f": { "type": "number", "example": 79.3 }, "avgtemp_c": { "type": "number", "example": 30.7 }, "avgtemp_f": { "type": "number", "example": 87.3 }, "maxwind_mph": { "type": "number", "example": 12.8 }, "maxwind_kph": { "type": "number", "example": 20.5 }, "totalprecip_mm": { "type": "number", "example": 0 }, "totalprecip_in": { "type": "number", "example": 0 }, "avgvis_km": { "type": "number", "example": 10 }, "avgvis_miles": { "type": "number", "example": 6 }, "avghumidity": { "type": "number", "example": 53 }, "daily_will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_rain": { "type": "number", "example": 0 }, "daily_will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_snow": { "type": "number", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Sunny" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "uv": { "type": "integer", "format": "int32", "example": 8 } } }, "astro": { "type": "object", "properties": { "sunrise": { "type": "string", "example": "05:44 AM" }, "sunset": { "type": "string", "example": "08:20 PM" }, "moonrise": { "type": "string", "example": "12:58 AM" }, "moonset": { "type": "string", "example": "03:35 PM" }, "moon_phase": { "type": "string", "example": "Last Quarter" }, "moon_illumination": { "type": "string", "example": 36 } } }, "hour": { "type": "array", "items": { "type": "object", "properties": { "time_epoch": { "type": "integer", "format": "int32", "example": 1658462400 }, "time": { "type": "string", "example": "2022-07-22 00:00" }, "temp_c": { "type": "number", "example": 28.7 }, "temp_f": { "type": "number", "example": 83.7 }, "is_day": { "type": "integer", "format": "int32", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Clear" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/night/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "wind_mph": { "type": "number", "example": 9.4 }, "wind_kph": { "type": "number", "example": 15.1 }, "wind_degree": { "type": "number", "example": 265 }, "wind_dir": { "type": "string", "example": "W" }, "pressure_mb": { "type": "number", "example": 1007 }, "pressure_in": { "type": "number", "example": 29.73 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 58 }, "cloud": { "type": "number", "example": 19 }, "feelslike_c": { "type": "number", "example": 30.5 }, "feelslike_f": { "type": "number", "example": 86.9 }, "windchill_c": { "type": "number", "example": 28.7 }, "windchill_f": { "type": "number", "example": 83.7 }, "heatindex_c": { "type": "number", "example": 30.5 }, "heatindex_f": { "type": "number", "example": 86.9 }, "dewpoint_c": { "type": "number", "example": 19.6 }, "dewpoint_f": { "type": "number", "example": 67.3 }, "will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_rain": { "type": "number", "example": 0 }, "will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_snow": { "type": "number", "example": 0 }, "vis_km": { "type": "number", "example": 10 }, "vis_miles": { "type": "number", "example": 6 }, "gust_mph": { "type": "number", "example": 15 }, "gust_kph": { "type": "number", "example": 24.1 }, "uv": { "type": "integer", "format": "int32", "example": 1 } } } } } } } } }, "alerts": { "type": "object", "properties": { "alert": { "type": "array", "items": { "type": "object", "properties": { "headline": { "type": "string", "example": "NWS New York City - Upton (Long Island and New York City)" }, "msgtype": { "type": "string", "example": null }, "severity": { "type": "string", "example": null }, "urgency": { "type": "string", "example": null }, "areas": { "type": "string", "example": null }, "category": { "type": "string", "example": "Extreme temperature value" }, "certainty": { "type": "string", "example": null }, "event": { "type": "string", "example": "Heat Advisory" }, "note": { "type": "string", "example": null }, "effective": { "type": "string", "format": "date-time", "example": "2022-07-21T19:38:00+00:00" }, "expires": { "type": "string", "format": "date-time", "example": "2022-07-25T00:00:00+00:00" }, "desc": { "type": "string", "example": "...HEAT ADVISORY REMAINS IN EFFECT UNTIL 8 PM EDT SUNDAY... * WHAT...Heat index values up to 105. * WHERE...Eastern Passaic Hudson Western Bergen Western Essex Eastern Bergen and Eastern Essex Counties. * WHEN...Until 8 PM EDT Sunday. * IMPACTS...High temperatures and high humidity may cause heat illnesses to occur." }, "instruction": { "type": "string", "example": "" } } } } } } } }, "doc": { "inject": ["query.q", "query.days", "query.dt", "query.unixdt", "query.hour", "query.lang", "query.alerts", "query.aqi", "query.tp"], "description": "Forecast weather API method returns, depending upon your price plan level, upto next 14 day weather forecast and weather alert as json or xml. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.days": "Number of days of weather forecast. Value ranges from 1 to 14", "query.dt": "Date should be between today and next 14 day in yyyy-MM-dd format. e.g. '2015-01-01'", "query.unixdt": "Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200", "query.hour": "Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6", "query.lang": "Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.", "query.alerts": "Enable/Disable alerts in forecast API output. Example, alerts=yes or alerts=no.", "query.aqi": "Enable/Disable Air Quality data in forecast API output. Example, aqi=yes or aqi=no.", "query.tp": "Get 15 min interval or 24 hour average data for Forecast and History API. Available for Enterprise clients only. E.g:- tp=15" } }, "http": { "method": "get", "type": "json", "route": "/forecast.json", "inject": ["query.q", "query.days", "query.dt", "query.unixdt", "query.hour", "query.lang", "query.alerts", "query.aqi", "query.tp"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "future-weather", "config": { "schema": { "inject": ["string", "string", "string"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "forecast": { "$ref": "#/$defs/forecast" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "forecast": { "type": "object", "properties": { "forecastday": { "type": "array", "items": { "type": "object", "properties": { "date": { "type": "string", "format": "date", "example": "2022-07-22" }, "date_epoch": { "type": "integer", "format": "int32", "example": 1658448000 }, "day": { "type": "object", "properties": { "maxtemp_c": { "type": "number", "example": 35.9 }, "maxtemp_f": { "type": "number", "example": 96.6 }, "mintemp_c": { "type": "number", "example": 26.3 }, "mintemp_f": { "type": "number", "example": 79.3 }, "avgtemp_c": { "type": "number", "example": 30.7 }, "avgtemp_f": { "type": "number", "example": 87.3 }, "maxwind_mph": { "type": "number", "example": 12.8 }, "maxwind_kph": { "type": "number", "example": 20.5 }, "totalprecip_mm": { "type": "number", "example": 0 }, "totalprecip_in": { "type": "number", "example": 0 }, "avgvis_km": { "type": "number", "example": 10 }, "avgvis_miles": { "type": "number", "example": 6 }, "avghumidity": { "type": "number", "example": 53 }, "daily_will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_rain": { "type": "number", "example": 0 }, "daily_will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_snow": { "type": "number", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Sunny" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "uv": { "type": "integer", "format": "int32", "example": 8 } } }, "astro": { "type": "object", "properties": { "sunrise": { "type": "string", "example": "05:44 AM" }, "sunset": { "type": "string", "example": "08:20 PM" }, "moonrise": { "type": "string", "example": "12:58 AM" }, "moonset": { "type": "string", "example": "03:35 PM" }, "moon_phase": { "type": "string", "example": "Last Quarter" }, "moon_illumination": { "type": "string", "example": 36 } } }, "hour": { "type": "array", "items": { "type": "object", "properties": { "time_epoch": { "type": "integer", "format": "int32", "example": 1658462400 }, "time": { "type": "string", "example": "2022-07-22 00:00" }, "temp_c": { "type": "number", "example": 28.7 }, "temp_f": { "type": "number", "example": 83.7 }, "is_day": { "type": "integer", "format": "int32", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Clear" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/night/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "wind_mph": { "type": "number", "example": 9.4 }, "wind_kph": { "type": "number", "example": 15.1 }, "wind_degree": { "type": "number", "example": 265 }, "wind_dir": { "type": "string", "example": "W" }, "pressure_mb": { "type": "number", "example": 1007 }, "pressure_in": { "type": "number", "example": 29.73 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 58 }, "cloud": { "type": "number", "example": 19 }, "feelslike_c": { "type": "number", "example": 30.5 }, "feelslike_f": { "type": "number", "example": 86.9 }, "windchill_c": { "type": "number", "example": 28.7 }, "windchill_f": { "type": "number", "example": 83.7 }, "heatindex_c": { "type": "number", "example": 30.5 }, "heatindex_f": { "type": "number", "example": 86.9 }, "dewpoint_c": { "type": "number", "example": 19.6 }, "dewpoint_f": { "type": "number", "example": 67.3 }, "will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_rain": { "type": "number", "example": 0 }, "will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_snow": { "type": "number", "example": 0 }, "vis_km": { "type": "number", "example": 10 }, "vis_miles": { "type": "number", "example": 6 }, "gust_mph": { "type": "number", "example": 15 }, "gust_kph": { "type": "number", "example": 24.1 }, "uv": { "type": "integer", "format": "int32", "example": 1 } } } } } } } } } } }, "doc": { "inject": ["query.q", "query.dt", "query.lang"], "description": "Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 365 days from today in the future.", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.dt": "Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01)", "query.lang": "Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'." } }, "http": { "method": "get", "type": "json", "route": "/future.json", "inject": ["query.q", "query.dt", "query.lang"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "history-weather", "config": { "schema": { "inject": ["string", "string", "integer", "string", "integer", "integer", "string"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "forecast": { "$ref": "#/$defs/forecast" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "forecast": { "type": "object", "properties": { "forecastday": { "type": "array", "items": { "type": "object", "properties": { "date": { "type": "string", "format": "date", "example": "2022-07-22" }, "date_epoch": { "type": "integer", "format": "int32", "example": 1658448000 }, "day": { "type": "object", "properties": { "maxtemp_c": { "type": "number", "example": 35.9 }, "maxtemp_f": { "type": "number", "example": 96.6 }, "mintemp_c": { "type": "number", "example": 26.3 }, "mintemp_f": { "type": "number", "example": 79.3 }, "avgtemp_c": { "type": "number", "example": 30.7 }, "avgtemp_f": { "type": "number", "example": 87.3 }, "maxwind_mph": { "type": "number", "example": 12.8 }, "maxwind_kph": { "type": "number", "example": 20.5 }, "totalprecip_mm": { "type": "number", "example": 0 }, "totalprecip_in": { "type": "number", "example": 0 }, "avgvis_km": { "type": "number", "example": 10 }, "avgvis_miles": { "type": "number", "example": 6 }, "avghumidity": { "type": "number", "example": 53 }, "daily_will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_rain": { "type": "number", "example": 0 }, "daily_will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_snow": { "type": "number", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Sunny" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "uv": { "type": "integer", "format": "int32", "example": 8 } } }, "astro": { "type": "object", "properties": { "sunrise": { "type": "string", "example": "05:44 AM" }, "sunset": { "type": "string", "example": "08:20 PM" }, "moonrise": { "type": "string", "example": "12:58 AM" }, "moonset": { "type": "string", "example": "03:35 PM" }, "moon_phase": { "type": "string", "example": "Last Quarter" }, "moon_illumination": { "type": "string", "example": 36 } } }, "hour": { "type": "array", "items": { "type": "object", "properties": { "time_epoch": { "type": "integer", "format": "int32", "example": 1658462400 }, "time": { "type": "string", "example": "2022-07-22 00:00" }, "temp_c": { "type": "number", "example": 28.7 }, "temp_f": { "type": "number", "example": 83.7 }, "is_day": { "type": "integer", "format": "int32", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Clear" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/night/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "wind_mph": { "type": "number", "example": 9.4 }, "wind_kph": { "type": "number", "example": 15.1 }, "wind_degree": { "type": "number", "example": 265 }, "wind_dir": { "type": "string", "example": "W" }, "pressure_mb": { "type": "number", "example": 1007 }, "pressure_in": { "type": "number", "example": 29.73 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 58 }, "cloud": { "type": "number", "example": 19 }, "feelslike_c": { "type": "number", "example": 30.5 }, "feelslike_f": { "type": "number", "example": 86.9 }, "windchill_c": { "type": "number", "example": 28.7 }, "windchill_f": { "type": "number", "example": 83.7 }, "heatindex_c": { "type": "number", "example": 30.5 }, "heatindex_f": { "type": "number", "example": 86.9 }, "dewpoint_c": { "type": "number", "example": 19.6 }, "dewpoint_f": { "type": "number", "example": 67.3 }, "will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_rain": { "type": "number", "example": 0 }, "will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_snow": { "type": "number", "example": 0 }, "vis_km": { "type": "number", "example": 10 }, "vis_miles": { "type": "number", "example": 6 }, "gust_mph": { "type": "number", "example": 15 }, "gust_kph": { "type": "number", "example": 24.1 }, "uv": { "type": "integer", "format": "int32", "example": 1 } } } } } } } } } } }, "doc": { "inject": ["query.q", "query.dt", "query.unixdt", "query.end_dt", "query.unixend_dt", "query.hour", "query.lang"], "description": "History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.dt": "Date on or after 1st Jan, 2015 in yyyy-MM-dd format", "query.unixdt": "Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format", "query.end_dt": "Date on or after 1st Jan, 2015 in yyyy-MM-dd format<br />'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates.", "query.unixend_dt": "Date on or after 1st Jan, 2015 in Unix Timestamp format<br />unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g. unixend_dt=1490227200", "query.hour": "Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6", "query.lang": "Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'." } }, "http": { "method": "get", "type": "json", "route": "/history.json", "inject": ["query.q", "query.dt", "query.unixdt", "query.end_dt", "query.unixend_dt", "query.hour", "query.lang"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "marine-weather", "config": { "schema": { "inject": ["string", "integer", "string", "integer", "integer", "string"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "forecast": { "$ref": "#/$defs/marine" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "marine": { "type": "object", "properties": { "forecastday": { "type": "array", "items": { "type": "object", "properties": { "date": { "type": "string", "format": "date", "example": "2022-07-22" }, "date_epoch": { "type": "integer", "format": "int32", "example": 1658448000 }, "day": { "type": "object", "properties": { "maxtemp_c": { "type": "number", "example": 35.9 }, "maxtemp_f": { "type": "number", "example": 96.6 }, "mintemp_c": { "type": "number", "example": 26.3 }, "mintemp_f": { "type": "number", "example": 79.3 }, "avgtemp_c": { "type": "number", "example": 30.7 }, "avgtemp_f": { "type": "number", "example": 87.3 }, "maxwind_mph": { "type": "number", "example": 12.8 }, "maxwind_kph": { "type": "number", "example": 20.5 }, "totalprecip_mm": { "type": "number", "example": 0 }, "totalprecip_in": { "type": "number", "example": 0 }, "avgvis_km": { "type": "number", "example": 10 }, "avgvis_miles": { "type": "number", "example": 6 }, "avghumidity": { "type": "number", "example": 53 }, "daily_will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_rain": { "type": "number", "example": 0 }, "daily_will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "daily_chance_of_snow": { "type": "number", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Sunny" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/day/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "uv": { "type": "integer", "format": "int32", "example": 8 } } }, "astro": { "type": "object", "properties": { "sunrise": { "type": "string", "example": "05:44 AM" }, "sunset": { "type": "string", "example": "08:20 PM" }, "moonrise": { "type": "string", "example": "12:58 AM" }, "moonset": { "type": "string", "example": "03:35 PM" }, "moon_phase": { "type": "string", "example": "Last Quarter" }, "moon_illumination": { "type": "string", "example": 36 } } }, "hour": { "type": "array", "items": { "type": "object", "properties": { "time_epoch": { "type": "integer", "format": "int32", "example": 1658462400 }, "time": { "type": "string", "example": "2022-07-22 00:00" }, "temp_c": { "type": "number", "example": 28.7 }, "temp_f": { "type": "number", "example": 83.7 }, "is_day": { "type": "integer", "format": "int32", "example": 0 }, "condition": { "type": "object", "properties": { "text": { "type": "string", "example": "Clear" }, "icon": { "type": "string", "example": "//cdn.weatherapi.com/weather/64x64/night/113.png" }, "code": { "type": "integer", "format": "int32", "example": 1000 } } }, "wind_mph": { "type": "number", "example": 9.4 }, "wind_kph": { "type": "number", "example": 15.1 }, "wind_degree": { "type": "number", "example": 265 }, "wind_dir": { "type": "string", "example": "W" }, "pressure_mb": { "type": "number", "example": 1007 }, "pressure_in": { "type": "number", "example": 29.73 }, "precip_mm": { "type": "number", "example": 0 }, "precip_in": { "type": "number", "example": 0 }, "humidity": { "type": "number", "example": 58 }, "cloud": { "type": "number", "example": 19 }, "feelslike_c": { "type": "number", "example": 30.5 }, "feelslike_f": { "type": "number", "example": 86.9 }, "windchill_c": { "type": "number", "example": 28.7 }, "windchill_f": { "type": "number", "example": 83.7 }, "heatindex_c": { "type": "number", "example": 30.5 }, "heatindex_f": { "type": "number", "example": 86.9 }, "dewpoint_c": { "type": "number", "example": 19.6 }, "dewpoint_f": { "type": "number", "example": 67.3 }, "will_it_rain": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_rain": { "type": "number", "example": 0 }, "will_it_snow": { "type": "integer", "format": "int32", "example": 0 }, "chance_of_snow": { "type": "number", "example": 0 }, "vis_km": { "type": "number", "example": 10 }, "vis_miles": { "type": "number", "example": 6 }, "gust_mph": { "type": "number", "example": 15 }, "gust_kph": { "type": "number", "example": 24.1 }, "sig_ht_mt": { "type": "number", "example": 24.1 }, "swell_ht_mt": { "type": "number", "example": 24.1 }, "swell_ht_ft": { "type": "number", "example": 24.1 }, "swell_dir": { "type": "number", "example": 24.1 }, "swell_dir_16_point": { "type": "number", "example": 24.1 }, "swell_period_secs": { "type": "number", "example": 24.1 }, "uv": { "type": "integer", "format": "int32", "example": 1 } } } } } } } } } } }, "doc": { "inject": ["query.q", "query.days", "query.dt", "query.unixdt", "query.hour", "query.lang"], "description": "Marine weather API method returns upto next 7 day (depending upon your price plan level) marine and sailing weather forecast and tide data (depending upon your price plan level) as json or xml. The data is returned as a Marine Object.<br /><br />Marine object, depending upon your price plan level, contains astronomy data, day weather forecast and hourly interval weather information and tide data for a given sea/ocean point.", "options": { "query.q": "Pass Latitude/Longitude (decimal degree) which is on a sea/ocean. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.days": "Number of days of weather forecast. Value ranges from 1 to 7", "query.dt": "Date should be between today and next 7 day in yyyy-MM-dd format. e.g. '2023-05-20'", "query.unixdt": "Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 7 day in Unix format. e.g. 1490227200", "query.hour": "Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6", "query.lang": "Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'." } }, "http": { "method": "get", "type": "json", "route": "/marine.json", "inject": ["query.q", "query.days", "query.dt", "query.unixdt", "query.hour", "query.lang"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "search-autocomplete-weather", "config": { "schema": { "inject": ["string"], "resultSchema": { "$ref": "#/$defs/ArrayOfSearch" }, "$defs": { "ArrayOfSearch": { "type": "array", "items": { "$ref": "#/$defs/search" } }, "search": { "type": "object", "properties": { "id": { "type": "integer", "format": "int32", "example": 2796590 }, "name": { "type": "string", "example": "Holborn" }, "region": { "type": "string", "example": "Camden Greater London" }, "country": { "type": "string", "example": "United Kingdom" }, "lat": { "type": "number", "example": 51.52 }, "lon": { "type": "number", "example": -0.12 }, "url": { "type": "string", "example": "holborn-camden-greater-london-united-kingdom" } } } } }, "doc": { "inject": ["query.q"], "description": "WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more." } }, "http": { "method": "get", "type": "json", "route": "/search.json", "inject": ["query.q"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "ip-lookup", "config": { "schema": { "inject": ["string"], "resultSchema": { "$ref": "#/$defs/ip" }, "$defs": { "ip": { "type": "object", "properties": { "ip": { "type": "string", "example": "185.249.71.82" }, "type": { "type": "string", "example": "ipv4" }, "continent_code": { "type": "string", "example": "EU" }, "continent_name": { "type": "string", "example": "Europe" }, "country_code": { "type": "string", "example": "GB" }, "country_name": { "type": "string", "example": "United Kingdom" }, "is_eu": { "type": "string", "example": false }, "geoname_id": { "type": "integer", "format": "int32", "example": 2643743 }, "city": { "type": "string", "example": "London" }, "region": { "type": "string", "example": null }, "lat": { "type": "number", "example": 51.5264 }, "lon": { "type": "number", "example": -0.0841 }, "tz_id": { "type": "string", "example": "Europe/London" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658520645 }, "localtime": { "type": "string", "example": "2022-07-22 21:10" } } } } }, "doc": { "inject": ["query.q"], "description": "IP Lookup API method allows a user to get up to date information for an IP address.", "options": { "query.q": "Pass IP address." } }, "http": { "method": "get", "type": "json", "route": "/ip.json", "inject": ["query.q"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "time-zone", "config": { "schema": { "inject": ["string"], "resultSchema": { "$ref": "#/$defs/location" }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } } } }, "doc": { "inject": ["query.q"], "description": "Return Location Object", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more." } }, "http": { "method": "get", "type": "json", "route": "/timezone.json", "inject": ["query.q"] }, "auth": { "http": { "mode": { "name": "key", "type": "query" }, "inject": ["headers.key"] } } } }, { "name": "astronomy", "config": { "schema": { "inject": ["string", "string"], "resultSchema": { "properties": { "location": { "$ref": "#/$defs/location" }, "astronomy": { "$ref": "#/$defs/astronomy" } } }, "$defs": { "location": { "type": "object", "properties": { "name": { "type": "string", "example": "New York" }, "region": { "type": "string", "example": "New York" }, "country": { "type": "string", "example": "United States of America" }, "lat": { "type": "number", "example": 40.71 }, "lon": { "type": "number", "example": -74.01 }, "tz_id": { "type": "string", "example": "America/New_York" }, "localtime_epoch": { "type": "integer", "format": "int32", "example": 1658522976 }, "localtime": { "type": "string", "example": "2022-07-22 16:49" } } }, "astronomy": { "type": "object", "properties": { "astro": { "type": "object", "properties": { "sunrise": { "type": "string", "example": "05:10 AM" }, "sunset": { "type": "string", "example": "09:03 PM" }, "moonrise": { "type": "string", "example": "12:29 AM" }, "moonset": { "type": "string", "example": "04:01 PM" }, "moon_phase": { "type": "string", "example": "Third Quarter" }, "moon_illumination": { "type": "string", "example": 42 } } } } } } }, "doc": { "inject": ["query.q", "query.dt"], "description": "Return Location and Astronomy Object", "options": { "query.q": "Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.", "query.dt": "Date on or after 1st Jan, 2015 in yyyy-MM-dd format" } }, "http": { "method": "get", "type": "json", "route": "/astronomy.json", "inject": ["query.q", "query.dt"] } } }] } as Metadata.Container;

	export function connect(processor?: ICommandProcessor)
	{
		const container = new Container<void>("weather", void 0);
		registerCommands(meta.commands, processor, container);
		return container as container & Container<void>;
	}
	export type location = { "name"?: string, "region"?: string, "country"?: string, "lat"?: number, "lon"?: number, "tz_id"?: string, "localtime_epoch"?: number, "localtime"?: string };
	export type current = { "last_updated_epoch"?: number, "last_updated"?: string, "temp_c"?: number, "temp_f"?: number, "is_day"?: number, "condition"?: { "text"?: string, "icon"?: string, "code"?: number }, "wind_mph"?: number, "wind_kph"?: number, "wind_degree"?: number, "wind_dir"?: string, "pressure_mb"?: number, "pressure_in"?: number, "precip_mm"?: number, "precip_in"?: number, "humidity"?: number, "cloud"?: number, "feelslike_c"?: number, "feelslike_f"?: number, "vis_km"?: number, "vis_miles"?: number, "uv"?: number, "gust_mph"?: number, "gust_kph"?: number, "air_quality"?: { "co"?: number, "no2"?: number, "o3"?: number, "so2"?: number, "pm2_5"?: number, "pm10"?: number, "us-epa-index"?: number, "gb-defra-index"?: number } };
	export type forecast = { "forecastday"?: ({ "date"?: string, "date_epoch"?: number, "day"?: { "maxtemp_c"?: number, "maxtemp_f"?: number, "mintemp_c"?: number, "mintemp_f"?: number, "avgtemp_c"?: number, "avgtemp_f"?: number, "maxwind_mph"?: number, "maxwind_kph"?: number, "totalprecip_mm"?: number, "totalprecip_in"?: number, "avgvis_km"?: number, "avgvis_miles"?: number, "avghumidity"?: number, "daily_will_it_rain"?: number, "daily_chance_of_rain"?: number, "daily_will_it_snow"?: number, "daily_chance_of_snow"?: number, "condition"?: { "text"?: string, "icon"?: string, "code"?: number }, "uv"?: number }, "astro"?: { "sunrise"?: string, "sunset"?: string, "moonrise"?: string, "moonset"?: string, "moon_phase"?: string, "moon_illumination"?: string }, "hour"?: ({ "time_epoch"?: number, "time"?: string, "temp_c"?: number, "temp_f"?: number, "is_day"?: number, "condition"?: { "text"?: string, "icon"?: string, "code"?: number }, "wind_mph"?: number, "wind_kph"?: number, "wind_degree"?: number, "wind_dir"?: string, "pressure_mb"?: number, "pressure_in"?: number, "precip_mm"?: number, "precip_in"?: number, "humidity"?: number, "cloud"?: number, "feelslike_c"?: number, "feelslike_f"?: number, "windchill_c"?: number, "windchill_f"?: number, "heatindex_c"?: number, "heatindex_f"?: number, "dewpoint_c"?: number, "dewpoint_f"?: number, "will_it_rain"?: number, "chance_of_rain"?: number, "will_it_snow"?: number, "chance_of_snow"?: number, "vis_km"?: number, "vis_miles"?: number, "gust_mph"?: number, "gust_kph"?: number, "uv"?: number })[] })[] };
	export type alerts = { "alert"?: ({ "headline"?: string, "msgtype"?: string, "severity"?: string, "urgency"?: string, "areas"?: string, "category"?: string, "certainty"?: string, "event"?: string, "note"?: string, "effective"?: string, "expires"?: string, "desc"?: string, "instruction"?: string })[] };
	export type marine = { "forecastday"?: ({ "date"?: string, "date_epoch"?: number, "day"?: { "maxtemp_c"?: number, "maxtemp_f"?: number, "mintemp_c"?: number, "mintemp_f"?: number, "avgtemp_c"?: number, "avgtemp_f"?: number, "maxwind_mph"?: number, "maxwind_kph"?: number, "totalprecip_mm"?: number, "totalprecip_in"?: number, "avgvis_km"?: number, "avgvis_miles"?: number, "avghumidity"?: number, "daily_will_it_rain"?: number, "daily_chance_of_rain"?: number, "daily_will_it_snow"?: number, "daily_chance_of_snow"?: number, "condition"?: { "text"?: string, "icon"?: string, "code"?: number }, "uv"?: number }, "astro"?: { "sunrise"?: string, "sunset"?: string, "moonrise"?: string, "moonset"?: string, "moon_phase"?: string, "moon_illumination"?: string }, "hour"?: ({ "time_epoch"?: number, "time"?: string, "temp_c"?: number, "temp_f"?: number, "is_day"?: number, "condition"?: { "text"?: string, "icon"?: string, "code"?: number }, "wind_mph"?: number, "wind_kph"?: number, "wind_degree"?: number, "wind_dir"?: string, "pressure_mb"?: number, "pressure_in"?: number, "precip_mm"?: number, "precip_in"?: number, "humidity"?: number, "cloud"?: number, "feelslike_c"?: number, "feelslike_f"?: number, "windchill_c"?: number, "windchill_f"?: number, "heatindex_c"?: number, "heatindex_f"?: number, "dewpoint_c"?: number, "dewpoint_f"?: number, "will_it_rain"?: number, "chance_of_rain"?: number, "will_it_snow"?: number, "chance_of_snow"?: number, "vis_km"?: number, "vis_miles"?: number, "gust_mph"?: number, "gust_kph"?: number, "sig_ht_mt"?: number, "swell_ht_mt"?: number, "swell_ht_ft"?: number, "swell_dir"?: number, "swell_dir_16_point"?: number, "swell_period_secs"?: number, "uv"?: number })[] })[] };
	export type ArrayOfSearch = (search)[];
	export type search = { "id"?: number, "name"?: string, "region"?: string, "country"?: string, "lat"?: number, "lon"?: number, "url"?: string };
	export type ip = { "ip"?: string, "type"?: string, "continent_code"?: string, "continent_name"?: string, "country_code"?: string, "country_name"?: string, "is_eu"?: string, "geoname_id"?: number, "city"?: string, "region"?: string, "lat"?: number, "lon"?: number, "tz_id"?: string, "localtime_epoch"?: number, "localtime"?: string };
	export type astronomy = { "astro"?: { "sunrise"?: string, "sunset"?: string, "moonrise"?: string, "moonset"?: string, "moon_phase"?: string, "moon_illumination"?: string } };
}

export { weather as default };
