export type Info={ "title":string, "description"?:string, "termsOfService"?:string, "contact"?:Contact, "license"?:License, "version":string, [key:string]:{} };
export type Contact={ "name"?:string, "url"?:string, "email"?:string, [key:string]:{} };
export type License={ "name":string, "url"?:string, [key:string]:{} };
export type ExternalDocumentation={ "description"?:string, "url":string, [key:string]:{} };
export type Server={ "url":string, "description"?:string, "variables"?:ServerVariable, [key:string]:{} };
export type ServerVariable={ "enum"?:(string)[], "default":string, "description"?:string, [key:string]:{} };
export type SecurityRequirement=(string)[];
export type Tag={ "name":string, "description"?:string, "externalDocs"?:ExternalDocumentation, [key:string]:{} };
export type Paths={ [key:string]:PathItem | {} };
export type PathItem={ "$ref"?:string, "summary"?:string, "description"?:string, "servers"?:(Server)[], "parameters"?:((Parameter) | (Reference))[], [key:string]:Operation | {} };
export type Parameter={ "name":string, "in":string, "description"?:string, "required"?:boolean, "deprecated"?:boolean, "allowEmptyValue"?:boolean, "style"?:string, "explode"?:boolean, "allowReserved"?:boolean, "schema"?:(Schema) | (Reference), "content"?:MediaType, "example"?:{}, "examples"?:(Example) | (Reference), [key:string]:{} };
export type Schema={ "title"?:string, "multipleOf"?:number, "maximum"?:number, "exclusiveMaximum"?:boolean, "minimum"?:number, "exclusiveMinimum"?:boolean, "maxLength"?:number, "minLength"?:number, "pattern"?:string, "maxItems"?:number, "minItems"?:number, "uniqueItems"?:boolean, "maxProperties"?:number, "minProperties"?:number, "required"?:(string)[], "enum"?:({})[], "type"?:"array" | "boolean" | "integer" | "number" | "object" | "string", "not"?:(Schema) | (Reference), "allOf"?:((Schema) | (Reference))[], "oneOf"?:((Schema) | (Reference))[], "anyOf"?:((Schema) | (Reference))[], "items"?:(Schema) | (Reference), "properties"?:(Schema) | (Reference), "additionalProperties"?:(Schema) | (Reference) | (boolean), "description"?:string, "format"?:string, "default"?:{}, "nullable"?:boolean, "discriminator"?:Discriminator, "readOnly"?:boolean, "writeOnly"?:boolean, "example"?:{}, "externalDocs"?:ExternalDocumentation, "deprecated"?:boolean, "xml"?:XML, [key:string]:{} };
export type Reference={ [key:string]:string };
export type Discriminator={ "propertyName":string, "mapping"?:string, undefined };
export type XML={ "name"?:string, "namespace"?:string, "prefix"?:string, "attribute"?:boolean, "wrapped"?:boolean, [key:string]:{} };
export type MediaType={ "schema"?:(Schema) | (Reference), "example"?:{}, "examples"?:(Example) | (Reference), "encoding"?:Encoding, [key:string]:{} };
export type Example={ "summary"?:string, "description"?:string, "value"?:{}, "externalValue"?:string, [key:string]:{} };
export type Encoding={ "contentType"?:string, "headers"?:(Header) | (Reference), "style"?:"form" | "spaceDelimited" | "pipeDelimited" | "deepObject", "explode"?:boolean, "allowReserved"?:boolean, [key:string]:{} };
export type Header={ "description"?:string, "required"?:boolean, "deprecated"?:boolean, "allowEmptyValue"?:boolean, "style"?:"simple", "explode"?:boolean, "allowReserved"?:boolean, "schema"?:(Schema) | (Reference), "content"?:MediaType, "example"?:{}, "examples"?:(Example) | (Reference), [key:string]:{} };
export type Components={ "schemas"?:{ [key:string]:(Schema) | (Reference) }, "responses"?:{ [key:string]:(Reference) | (Response) }, "parameters"?:{ [key:string]:(Reference) | (Parameter) }, "examples"?:{ [key:string]:(Reference) | (Example) }, "requestBodies"?:{ [key:string]:(Reference) | (RequestBody) }, "headers"?:{ [key:string]:(Reference) | (Header) }, "securitySchemes"?:{ [key:string]:(Reference) | (SecurityScheme) }, "links"?:{ [key:string]:(Reference) | (Link) }, "callbacks"?:{ [key:string]:(Reference) | (Callback) }, [key:string]:{} };
export type Response={ "description":string, "headers"?:(Header) | (Reference), "content"?:MediaType, "links"?:(Link) | (Reference), [key:string]:{} };
export type Link={ "operationId"?:string, "operationRef"?:string, "parameters"?:{}, "requestBody"?:{}, "description"?:string, "server"?:Server, [key:string]:{} };
export type RequestBody={ "description"?:string, "content":MediaType, "required"?:boolean, [key:string]:{} };
export type SecurityScheme=(APIKeySecurityScheme) | (HTTPSecurityScheme) | (OAuth2SecurityScheme) | (OpenIdConnectSecurityScheme);
export type APIKeySecurityScheme={ "type":"apiKey", "name":string, "in":"header" | "query" | "cookie", "description"?:string, [key:string]:{} };
export type HTTPSecurityScheme={ "scheme":string, "bearerFormat"?:string, "description"?:string, "type":"http", [key:string]:{} };
export type OAuth2SecurityScheme={ "type":"oauth2", "flows":OAuthFlows, "description"?:string, [key:string]:{} };
export type OAuthFlows={ "implicit"?:ImplicitOAuthFlow, "password"?:PasswordOAuthFlow, "clientCredentials"?:ClientCredentialsFlow, "authorizationCode"?:AuthorizationCodeOAuthFlow, [key:string]:{} };
export type ImplicitOAuthFlow={ "authorizationUrl":string, "refreshUrl"?:string, "scopes":string, [key:string]:{} };
export type PasswordOAuthFlow={ "tokenUrl":string, "refreshUrl"?:string, "scopes":string, [key:string]:{} };
export type ClientCredentialsFlow={ "tokenUrl":string, "refreshUrl"?:string, "scopes":string, [key:string]:{} };
export type AuthorizationCodeOAuthFlow={ "authorizationUrl":string, "tokenUrl":string, "refreshUrl"?:string, "scopes":string, [key:string]:{} };
export type OpenIdConnectSecurityScheme={ "type":"openIdConnect", "openIdConnectUrl":string, "description"?:string, [key:string]:{} };
export type Callback={ [key:string]:{} };
export type Operation={ "tags"?:(string)[], "summary"?:string, "description"?:string, "externalDocs"?:ExternalDocumentation, "operationId"?:string, "parameters"?:((Parameter) | (Reference))[], "requestBody"?:(RequestBody) | (Reference), "responses":Responses, "callbacks"?:(Callback) | (Reference), "deprecated"?:boolean, "security"?:(SecurityRequirement)[], "servers"?:(Server)[], [key:string]:{} };
export type Responses={ "default"?:(Response) | (Reference), [key:string]:(Response) | (Reference) | {} };
export type OpenApi30={ "openapi":string, "info":Info, "externalDocs"?:ExternalDocumentation, "servers"?:(Server)[], "security"?:(SecurityRequirement)[], "tags"?:(Tag)[], "paths":Paths, "components"?:Components, [key:string]:{} }