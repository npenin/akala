export type info = { "title": string, "version": string, "description"?: string, "termsOfService"?: string, "contact"?: contact, "license"?: license, [key: string]: vendorExtension };
export type contact = { "name"?: string, "url"?: string, "email"?: string, [key: string]: vendorExtension };
export type license = { "name": string, "url"?: string, [key: string]: vendorExtension };
export type schemesList = [...("http" | "https" | "ws" | "wss")[]];
export type mediaTypeList = [...(mimeType)[]];
export type mimeType = string;
export type paths = { [key: string]: vendorExtension | pathItem };
export type vendorExtension = unknown;
export type pathItem = { "$ref"?: string, "get"?: operation, "put"?: operation, "post"?: operation, "delete"?: operation, "options"?: operation, "head"?: operation, "patch"?: operation, "parameters"?: parametersList, [key: string]: vendorExtension };
export type operation = { "tags"?: [...(string)[]], "summary"?: string, "description"?: string, "externalDocs"?: externalDocs, "operationId"?: string, "produces"?: (mediaTypeList), "consumes"?: (mediaTypeList), "parameters"?: parametersList, "responses": responses, "schemes"?: schemesList, "deprecated"?: boolean, "security"?: security, [key: string]: vendorExtension };
export type externalDocs = { "description"?: string, "url": string, [key: string]: vendorExtension };
export type parametersList = [...((parameter) | (jsonReference))[]];
export type parameter = (bodyParameter) | (nonBodyParameter);
export type bodyParameter = { "description"?: string, "name": string, "in": "body", "required"?: boolean, "schema": schema, [key: string]: vendorExtension };
export type schema = { "$ref"?: string, "format"?: string, "title"?: string, "description"?: string, "default"?: unknown, "multipleOf"?: number, "maximum"?: number, "exclusiveMaximum"?: boolean, "minimum"?: number, "exclusiveMinimum"?: boolean, "maxLength"?: unknown, "minLength"?: unknown, "pattern"?: string, "maxItems"?: unknown, "minItems"?: unknown, "uniqueItems"?: boolean, "maxProperties"?: unknown, "minProperties"?: unknown, "required"?: unknown, "enum"?: [], "additionalProperties"?: (schema) | (boolean), "type"?: (simpleTypes) | ([...(simpleTypes)[]]), "items"?: (schema) | ([...(schema)[]]), "allOf"?: [...(schema)[]], "properties"?: schema, "discriminator"?: string, "readOnly"?: boolean, "xml"?: xml, "externalDocs"?: externalDocs, "example"?: unknown, [key: string]: vendorExtension };
export type xml = { "name"?: string, "namespace"?: string, "prefix"?: string, "attribute"?: boolean, "wrapped"?: boolean, [key: string]: vendorExtension };
export type nonBodyParameter = (headerParameterSubSchema) | (formDataParameterSubSchema) | (queryParameterSubSchema) | (pathParameterSubSchema);
export type headerParameterSubSchema = { "required"?: boolean, "in"?: "header", "description"?: string, "name"?: string, "type"?: "string" | "number" | "boolean" | "integer" | "array", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormat, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, [key: string]: vendorExtension };
export type primitivesItems = { "type"?: "string" | "number" | "integer" | "boolean" | "array", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormat, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, [key: string]: vendorExtension };
export type collectionFormat = "csv" | "ssv" | "tsv" | "pipes";
export type Default = unknown;
export type maximum = number;
export type exclusiveMaximum = boolean;
export type minimum = number;
export type exclusiveMinimum = boolean;
export type maxLength = unknown;
export type minLength = unknown;
export type pattern = string;
export type maxItems = unknown;
export type minItems = unknown;
export type uniqueItems = boolean;
export type Enum = [];
export type multipleOf = number;
export type formDataParameterSubSchema = { "required"?: boolean, "in"?: "formData", "description"?: string, "name"?: string, "allowEmptyValue"?: boolean, "type"?: "string" | "number" | "boolean" | "integer" | "array" | "file", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormatWithMulti, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, [key: string]: vendorExtension };
export type collectionFormatWithMulti = "csv" | "ssv" | "tsv" | "pipes" | "multi";
export type queryParameterSubSchema = { "required"?: boolean, "in"?: "query", "description"?: string, "name"?: string, "allowEmptyValue"?: boolean, "type"?: "string" | "number" | "boolean" | "integer" | "array", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormatWithMulti, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, [key: string]: vendorExtension };
export type pathParameterSubSchema = { "required": true, "in"?: "path", "description"?: string, "name"?: string, "type"?: "string" | "number" | "boolean" | "integer" | "array", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormat, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, [key: string]: vendorExtension };
export type jsonReference = { "$ref": string, undefined };
export type responses = { [key: string]: responseValue | vendorExtension };
export type responseValue = (response) | (jsonReference);
export type response = { "description": string, "schema"?: (schema) | (fileSchema), "headers"?: headers, "examples"?: examples, [key: string]: vendorExtension };
export type fileSchema = { "format"?: string, "title"?: string, "description"?: string, "default"?: unknown, "required"?: unknown, "type": "file", "readOnly"?: boolean, "externalDocs"?: externalDocs, "example"?: unknown, [key: string]: vendorExtension };
export type headers = header;
export type header = { "type": "string" | "number" | "integer" | "boolean" | "array", "format"?: string, "items"?: primitivesItems, "collectionFormat"?: collectionFormat, "default"?: Default, "maximum"?: maximum, "exclusiveMaximum"?: exclusiveMaximum, "minimum"?: minimum, "exclusiveMinimum"?: exclusiveMinimum, "maxLength"?: maxLength, "minLength"?: minLength, "pattern"?: pattern, "maxItems"?: maxItems, "minItems"?: minItems, "uniqueItems"?: uniqueItems, "enum"?: Enum, "multipleOf"?: multipleOf, "description"?: string, [key: string]: vendorExtension };
export type examples = unknown;
export type security = [...(securityRequirement)[]];
export type securityRequirement = [...(string)[]];
export type definitions = schema;
export type parameterDefinitions = parameter;
export type responseDefinitions = response;
export type securityDefinitions = (basicAuthenticationSecurity) | (apiKeySecurity) | (oauth2ImplicitSecurity) | (oauth2PasswordSecurity) | (oauth2ApplicationSecurity) | (oauth2AccessCodeSecurity);
export type basicAuthenticationSecurity = { "type": "basic", "description"?: string, [key: string]: vendorExtension };
export type apiKeySecurity = { "type": "apiKey", "name": string, "in": "header" | "query", "description"?: string, [key: string]: vendorExtension };
export type oauth2ImplicitSecurity = { "type": "oauth2", "flow": "implicit", "scopes"?: oauth2Scopes, "authorizationUrl": string, "description"?: string, [key: string]: vendorExtension };
export type oauth2Scopes = string;
export type oauth2PasswordSecurity = { "type": "oauth2", "flow": "password", "scopes"?: oauth2Scopes, "tokenUrl": string, "description"?: string, [key: string]: vendorExtension };
export type oauth2ApplicationSecurity = { "type": "oauth2", "flow": "application", "scopes"?: oauth2Scopes, "tokenUrl": string, "description"?: string, [key: string]: vendorExtension };
export type oauth2AccessCodeSecurity = { "type": "oauth2", "flow": "accessCode", "scopes"?: oauth2Scopes, "authorizationUrl": string, "tokenUrl": string, "description"?: string, [key: string]: vendorExtension };
export type tag = { "name": string, "description"?: string, "externalDocs"?: externalDocs, [key: string]: vendorExtension };
export type simpleTypes = unknown;
export type OpenApi20 = { "swagger": "2.0", "info": info, "host"?: string, "basePath"?: string, "schemes"?: schemesList, "consumes"?: (mediaTypeList), "produces"?: (mediaTypeList), "paths": paths, "definitions"?: definitions, "parameters"?: parameterDefinitions, "responses"?: responseDefinitions, "security"?: security, "securityDefinitions"?: securityDefinitions, "tags"?: [...(tag)[]], "externalDocs"?: externalDocs, [key: string]: vendorExtension }