export type info={ "title":string, "summary"?:string, "description"?:string, "termsOfService"?:string, "contact"?:contact, "license"?:license, "version":string, undefined };
export type contact={ "name"?:string, "url"?:string, "email"?:string, undefined };
export type license={ "name":string, "identifier"?:string, "url"?:string, undefined };
export type server={ "url":string, "description"?:string, "variables"?:serverVariable, undefined };
export type serverVariable={ "enum"?:(string)[], "default":string, "description"?:string, undefined };
export type paths={ [key:string]:pathItem };
export type pathItem={ "summary"?:string, "description"?:string, "servers"?:(server)[], "parameters"?:(parameterOrReference)[], "get"?:operation, "put"?:operation, "post"?:operation, "delete"?:operation, "options"?:operation, "head"?:operation, "patch"?:operation, "trace"?:operation, undefined };
export type parameterOrReference=reference|parameter;
export type reference={ "$ref"?:string, "summary"?:string, "description"?:string, undefined };
export type operation={ "tags"?:(string)[], "summary"?:string, "description"?:string, "externalDocs"?:externalDocumentation, "operationId"?:string, "parameters"?:(parameterOrReference)[], "requestBody"?:requestBodyOrReference, "responses"?:responses, "callbacks"?:callbacksOrReference, "deprecated"?:boolean, "security"?:(securityRequirement)[], "servers"?:(server)[], undefined };
export type externalDocumentation={ "description"?:string, "url":string, undefined };
export type requestBodyOrReference=reference|requestBody;
export type responses={ "default"?:responseOrReference, [key:string]:responseOrReference };
export type responseOrReference=reference|response;
export type callbacksOrReference=reference|callbacks;
export type securityRequirement=(string)[];
export type pathItemOrReference=reference|pathItem;
export type components={ "schemas"?:unknown, "responses"?:responseOrReference, "parameters"?:parameterOrReference, "examples"?:exampleOrReference, "requestBodies"?:requestBodyOrReference, "headers"?:headerOrReference, "securitySchemes"?:securitySchemeOrReference, "links"?:linkOrReference, "callbacks"?:callbacksOrReference, "pathItems"?:pathItemOrReference, [key:string]:unknown };
export type exampleOrReference=reference|example;
export type headerOrReference=reference|header;
export type securitySchemeOrReference=reference|securityScheme;
export type linkOrReference=reference|link;
export type tag={ "name":string, "description"?:string, "externalDocs"?:externalDocumentation, undefined };
export type requestBody={ "description"?:string, "content":content, "required"?:boolean, undefined };
export type content=mediaType;
export type mediaType={ "schema"?:unknown, "encoding"?:encoding, undefined };
export type encoding={ "contentType"?:string, "headers"?:headerOrReference, "style"?:"form" | "spaceDelimited" | "pipeDelimited" | "deepObject", "explode"?:boolean, "allowReserved"?:boolean, undefined };
export type response={ "description":string, "headers"?:headerOrReference, "content"?:content, "links"?:linkOrReference, undefined };
export type callbacks=specificationExtensions;
export type specificationExtensions={ [key:string]:unknown };
export type example={ "summary"?:string, "description"?:string, "value"?:unknown, "externalValue"?:string, undefined };
export type header={ "description"?:string, "required"?:boolean, "deprecated"?:boolean, "schema"?:unknown, "content"?:content, undefined };
export type securityScheme={ "type":"apiKey" | "http" | "mutualTLS" | "oauth2" | "openIdConnect", "description"?:string, undefined };
export type link={ "operationRef"?:string, "operationId"?:string, "parameters"?:mapOfStrings, "requestBody"?:unknown, "description"?:string, "body"?:server, undefined };
export type mapOfStrings=string;
export type parameter={ "name":string, "in":"query" | "header" | "path" | "cookie", "description"?:string, "required"?:boolean, "deprecated"?:boolean, "schema"?:unknown, "content"?:content, undefined };
export type OpenApi31={ "openapi":string, "info":info, "jsonSchemaDialect"?:string, "servers"?:(server)[], "paths"?:paths, "webhooks"?:pathItemOrReference, "components"?:components, "security"?:(securityRequirement)[], "tags"?:(tag)[], "externalDocs"?:externalDocumentation, undefined }