//eslint-disable-next-line @typescript-eslint/ban-ts-comment
//@ts-ignore 6133
//eslint-disable-next-line @typescript-eslint/no-unused-vars
import {Arguments, Argument0, Argument1, Argument2, Argument3, Argument4, Argument5, Argument6, Argument7, Argument8, Argument9, Argument10, Argument11, Argument12, Argument13, Argument14, Argument15, Argument16, Argument17 } from '@akala/core';
import {Metadata, ICommandProcessor, Container, registerCommands} from "@akala/commands";
// eslint-disable-next-line @typescript-eslint/no-namespace
namespace cliCommands
{
	export interface container 
	{
		dispatch (cmd:'$init', ...args: [Argument0<typeof import('./cli-commands/$init.ts').default>, Argument1<typeof import('./cli-commands/$init.ts').default>]): ReturnType<typeof import('./cli-commands/$init.ts').default>
		dispatch (cmd:'connect', ...args: [Argument0<typeof import('./cli-commands/connect.ts').default>, Argument1<typeof import('./cli-commands/connect.ts').default>]): ReturnType<typeof import('./cli-commands/connect.ts').default>
		dispatch (cmd:'discover', ...args: [Argument0<typeof import('./cli-commands/discover.ts').default>, Argument2<typeof import('./cli-commands/discover.ts').default>]): ReturnType<typeof import('./cli-commands/discover.ts').default>
		dispatch (cmd:'install', ...args: [Argument0<typeof import('./cli-commands/install.ts').default>]): ReturnType<typeof import('./cli-commands/install.ts').default>
		dispatch (cmd:'link', ...args: [Argument0<typeof import('./cli-commands/link.ts').default>, Argument1<typeof import('./cli-commands/link.ts').default>]): ReturnType<typeof import('./cli-commands/link.ts').default>
		dispatch (cmd:'log', ...args: [Argument0<typeof import('./cli-commands/log.ts').default>]): ReturnType<typeof import('./cli-commands/log.ts').default>
		dispatch (cmd:'ls', ...args: []): ReturnType<typeof import('./cli-commands/ls.ts').default>
		dispatch (cmd:'map', ...args: [Argument1<typeof import('./cli-commands/map.ts').default>, Argument2<typeof import('./cli-commands/map.ts').default>, Argument3<typeof import('./cli-commands/map.ts').default>, Argument4<typeof import('./cli-commands/map.ts').default>, Argument5<typeof import('./cli-commands/map.ts').default>]): ReturnType<typeof import('./cli-commands/map.ts').default>
		dispatch (cmd:'run', ...args: [Argument0<typeof import('./cli-commands/run.ts').default>, Argument1<typeof import('./cli-commands/run.ts').default>]): ReturnType<typeof import('./cli-commands/run.ts').default>
		dispatch (cmd:'start', ...args: [Argument0<typeof import('./cli-commands/start.ts').default>, Argument1<typeof import('./cli-commands/start.ts').default>]): ReturnType<typeof import('./cli-commands/start.ts').default>
		dispatch (cmd:'uninstall', ...args: [Argument0<typeof import('./cli-commands/uninstall.ts').default>]): ReturnType<typeof import('./cli-commands/uninstall.ts').default>
		dispatch (cmd:'update', ...args: [Argument0<typeof import('./cli-commands/update.ts').default>, Argument1<typeof import('./cli-commands/update.ts').default>, Argument2<typeof import('./cli-commands/update.ts').default>]): ReturnType<typeof import('./cli-commands/update.ts').default>
		dispatch (cmd:'version', ...args: [Argument0<typeof import('./cli-commands/version.ts').default>, Argument1<typeof import('./cli-commands/version.ts').default>]): ReturnType<typeof import('./cli-commands/version.ts').default>
	}
	export interface proxy 
	{
		'$init'(...args: [Argument0<typeof import('./cli-commands/$init.ts').default>, Argument1<typeof import('./cli-commands/$init.ts').default>]): ReturnType<typeof import('./cli-commands/$init.ts').default>
		'connect'(...args: [Argument0<typeof import('./cli-commands/connect.ts').default>, Argument1<typeof import('./cli-commands/connect.ts').default>]): ReturnType<typeof import('./cli-commands/connect.ts').default>
		'discover'(...args: [Argument0<typeof import('./cli-commands/discover.ts').default>, Argument2<typeof import('./cli-commands/discover.ts').default>]): ReturnType<typeof import('./cli-commands/discover.ts').default>
		'install'(...args: [Argument0<typeof import('./cli-commands/install.ts').default>]): ReturnType<typeof import('./cli-commands/install.ts').default>
		'link'(...args: [Argument0<typeof import('./cli-commands/link.ts').default>, Argument1<typeof import('./cli-commands/link.ts').default>]): ReturnType<typeof import('./cli-commands/link.ts').default>
		'log'(...args: [Argument0<typeof import('./cli-commands/log.ts').default>]): ReturnType<typeof import('./cli-commands/log.ts').default>
		'ls'(...args: []): ReturnType<typeof import('./cli-commands/ls.ts').default>
		'map'(...args: [Argument1<typeof import('./cli-commands/map.ts').default>, Argument2<typeof import('./cli-commands/map.ts').default>, Argument3<typeof import('./cli-commands/map.ts').default>, Argument4<typeof import('./cli-commands/map.ts').default>, Argument5<typeof import('./cli-commands/map.ts').default>]): ReturnType<typeof import('./cli-commands/map.ts').default>
		'run'(...args: [Argument0<typeof import('./cli-commands/run.ts').default>, Argument1<typeof import('./cli-commands/run.ts').default>]): ReturnType<typeof import('./cli-commands/run.ts').default>
		'start'(...args: [Argument0<typeof import('./cli-commands/start.ts').default>, Argument1<typeof import('./cli-commands/start.ts').default>]): ReturnType<typeof import('./cli-commands/start.ts').default>
		'uninstall'(...args: [Argument0<typeof import('./cli-commands/uninstall.ts').default>]): ReturnType<typeof import('./cli-commands/uninstall.ts').default>
		'update'(...args: [Argument0<typeof import('./cli-commands/update.ts').default>, Argument1<typeof import('./cli-commands/update.ts').default>, Argument2<typeof import('./cli-commands/update.ts').default>]): ReturnType<typeof import('./cli-commands/update.ts').default>
		'version'(...args: [Argument0<typeof import('./cli-commands/version.ts').default>, Argument1<typeof import('./cli-commands/version.ts').default>]): ReturnType<typeof import('./cli-commands/version.ts').default>
	}
   export const meta={"name":"pm","commands":[{"name":"$init","config":{"fs":{"path":"dist/esm/cli-commands/$init.js","source":"src/cli-commands/$init.ts","inject":["params.0","params.1"]},"cli":{"inject":["context","$container"],"options":{"pmSock":{"aliases":["pm-sock"],"needsValue":true}}},"":{"inject":["params.0","params.1"]}}},{"name":"connect","config":{"fs":{"path":"dist/esm/cli-commands/connect.js","source":"src/cli-commands/connect.ts","inject":["params.0","params.1"]},"":{"inject":["params.0","params.1"]},"cli":{"usage":"connect <name>","inject":["options.name","context"],"options":{"tcpPort":{"needsValue":true,"aliases":["tcp-port"]},"port":{"needsValue":true},"key":{"needsValue":true},"cert":{"needsValue":true}}}}},{"name":"discover","config":{"fs":{"path":"dist/esm/cli-commands/discover.js","source":"src/cli-commands/discover.ts","inject":["params.0","$container","params.1"]},"":{"inject":["params.0","$container","params.1"]},"cli":{"usage":"discover <path> [name]","options":{"path":{"normalize":true}},"inject":["options.path","$container","options.name"]}}},{"name":"install","config":{"fs":{"path":"dist/esm/cli-commands/install.js","source":"src/cli-commands/install.ts","inject":["params.0","$container"]},"":{"inject":["params.0","$container"]},"cli":{"inject":["params.0","$container"]}}},{"name":"link","config":{"fs":{"path":"dist/esm/cli-commands/link.js","source":"src/cli-commands/link.ts","inject":["params.0","params.1","$container"]},"":{"inject":["params.0","params.1","$container"]},"cli":{"inject":["params.0","params.1","$container"]}}},{"name":"log","config":{"fs":{"path":"dist/esm/cli-commands/log.js","source":"src/cli-commands/log.ts","inject":["params.0"]},"":{"inject":["params.0"]},"cli":{"inject":["params.0"]}}},{"name":"ls","config":{"fs":{"path":"dist/esm/cli-commands/ls.js","source":"src/cli-commands/ls.ts","inject":[]},"":{"inject":[]},"cli":{"inject":[]},"html-form":{"inject":[]}}},{"name":"map","config":{"fs":{"path":"dist/esm/cli-commands/map.js","source":"src/cli-commands/map.ts","inject":["$state.config","params.0","params.1","params.2","params.3","params.4"]},"":{"inject":["$state.config","params.0","params.1","params.2","params.3","params.4"]},"cli":{"inject":["context.state","options.name","options.path","options.runtime","cwd","options"],"options":{"commandable":{"aliases":["c"],"needsValue":false},"stateless":{"aliases":["s"],"needsValue":false},"runtime":{"aliases":["r"],"needsValue":true}},"usage":"map <name> <path>"}}},{"name":"run","config":{"fs":{"path":"dist/esm/cli-commands/run.js","source":"src/cli-commands/run.ts","inject":["params.0","params.1"]},"":{"inject":["params.0","params.1"]},"jsonrpc":false,"cli":{"options":{"output":{"aliases":["o"],"needsValue":true,"doc":"output as `table` if array otherwise falls back to standard node output"},"verbose":{"aliases":["v"]},"tls":{"doc":"enables tls connection to the `pmSock`"},"pmSock":{"aliases":["pm-sock"],"needsValue":true,"doc":"path to the unix socket or destination in the form host:port"},"help":{"doc":"displays this help message"},"keepAttached":{"aliases":["keep-attached"],"needsValue":false,"doc":"keeps the process attached to the current terminal"},"wait":{"aliases":["w"],"needsValue":false,"doc":"waits for the program to be started before returning, otherwise, returns after the start command is sent to the pm daemon"},"inspect":{"needsValue":false,"doc":"starts the process with --inspect-brk parameter to help debugging"},"new":{"needsValue":false},"name":{"doc":"name to assign to the process","needsValue":true},"program":{"doc":"program to start"}},"inject":["options.program","options.name","context","options.pmSock"],"usage":"run <name> [...args]"}}},{"name":"start","config":{"fs":{"path":"dist/esm/cli-commands/start.js","source":"src/cli-commands/start.ts","inject":["params.0","params.1"]},"":{"inject":["params.0","params.1"]},"cli":{"options":{"output":{"aliases":["o"],"needsValue":true,"doc":"output as `table` if array otherwise falls back to standard node output"},"verbose":{"aliases":["v"]},"tls":{"doc":"enables tls connection to the `pmSock`"},"pmSock":{"aliases":["pm-sock"],"needsValue":true,"doc":"path to the unix socket or destination in the form host:port"},"help":{"doc":"displays this help message"},"keepAttached":{"aliases":["keep-attached"],"needsValue":false,"doc":"keeps the process attached to the current terminal"},"wait":{"aliases":["w"],"needsValue":false,"doc":"waits for the program to be started before returning, otherwise, returns after the start command is sent to the pm daemon"},"inspect":{"needsValue":false,"doc":"starts the process with --inspect-brk parameter to help debugging"}},"inject":["options.program","context"],"usage":"start pm"}}},{"name":"uninstall","config":{"fs":{"path":"dist/esm/cli-commands/uninstall.js","source":"src/cli-commands/uninstall.ts","inject":["params.0","$container"]},"":{"inject":["params.0","$container"]},"cli":{"inject":["params.0","$container"]}}},{"name":"update","config":{"fs":{"path":"dist/esm/cli-commands/update.js","source":"src/cli-commands/update.ts","inject":["params.0","params.1","params.2"]},"cli":{"inject":["params.0","params.1","$container"]},"":{"inject":["params.0","params.1","params.2"]}}},{"name":"version","config":{"fs":{"path":"dist/esm/cli-commands/version.js","source":"src/cli-commands/version.ts","inject":["params.0","params.1"]},"":{"inject":["params.0","params.1"]},"cli":{"inject":["options.packageName","options.folder"],"usage":"version <packageName> [folder]"},"schema":{"inject":["params.0","params.1"],"$defs":{"params.0":{"type":"string"},"params.1":{"type":"string"}}}}}],"$schema":"https://raw.githubusercontent.com/npenin/akala/main/packages/commands/container-schema.json"} as Metadata.Container;

   export function connect(processor?:ICommandProcessor) {
            const container = new Container<void>("cliCommands", void 0);
            registerCommands(meta.commands, processor, container);
            return container as container & Container<void>;
        }
}

export { cliCommands as default };